{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/inputs-and-outputs",
    "result": {"data":{"markdownRemark":{"id":"8921d88d-e1f6-58bc-be1f-2242028f8572","excerpt":"$page-showing-target$ In this section, we will endow reactors with inputs and outputs. Input and Output Declarations Input and output declarations have the formâ€¦","html":"<p>$page-showing-target$</p>\n<p>In this section, we will endow reactors with inputs and outputs.</p>\n<h2 id=\"input-and-output-declarations\" style=\"position:relative;\"><a href=\"#input-and-output-declarations\" aria-label=\"input and output declarations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Input and Output Declarations</h2>\n<p>Input and output declarations have the form:</p>\n<div class=\"lf-c lf-ts lf-rs lf-cpp\">\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">input</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>type<span class=\"token operator\">></span>\n    <span class=\"token lf_keywords\">output</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>type<span class=\"token operator\">></span></code></pre></div>\n</div>\n<div class=\"lf-py\">\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">input</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span>\n    <span class=\"token lf_keywords\">output</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span></code></pre></div>\n</div>\n<p>For example, the following reactor doubles its input and sends the result to the output:</p>\n<p>$start(Double)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Double <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token operator\">-></span>value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">reactor</span> Double <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            y<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Double <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        y<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token lf_keywords\">target</span> TypeScript\n<span class=\"token lf_keywords\">reactor</span> Double <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token builtin\">number</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        y <span class=\"token operator\">=</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token lf_keywords\">target</span> <span class=\"token class-name\">Rust</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token class-name\">Double</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>$end(Double)$</p>\n<p>Notice how the input value is accessed and how the output value is set. This is done differently for each target language. See the <a href=\"/docs/handbook/target-languate-details\">Target Language Details</a> for detailed documentation of these mechanisms.\nSetting an output within a reaction will trigger downstream reactions at the same <a href=\"/docs/handbook/time-and-timers#logical-time\">Logical Time</a> that the reaction is invoked (or, more precisely, at the same <a href=\"/docs/handbook/superdense-time#tag-vs-time\">tag</a>). If a particular output port is set more than once at any tag, the last set value will be the one that downstream reactions see. Since the order in which reactions of a reactor are invoked at a logical time is deterministic, and whether inputs are present depends only on their timestamps, the final value set for an output will also be deterministic.</p>\n<div class=\"lf-c lf-cpp lf-ts lf-rs\">\n<p>The <strong>type</strong> of a port is a type in the target language plus the special type $time$. A type may also be specified using a <strong>code block</strong>, delimited by the same delimeters <code class=\"language-text\">{= ... =}</code> that separate target language code from Lingua Franca code in reactions. Any valid target-language type designator can be given within these delimiters. See <a href=\"/docs/handbook/lingua-franca-types\">Lingua Franca Types</a> for details.</p>\n</div>\n<p>The $reaction$ declaration above indicates that an input event on port <code class=\"language-text\">x</code> is a <strong>trigger</strong> and that an output event on port <code class=\"language-text\">y</code> is a (potential) <strong>effect</strong>. A reaction can declare more than one trigger or effect by just listing them separated by commas. For example, the following reactor has two triggers and tests each input for presence before using it:</p>\n<p>$start(Destination)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Destination <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">input</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>is_present<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> x<span class=\"token operator\">-></span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">-></span>is_present<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> y<span class=\"token operator\">-></span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received %d.\\n\"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">reactor</span> Destination <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">input</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Received: \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> \n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Destination <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">input</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token builtin\">sum</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span>is_present<span class=\"token punctuation\">:</span>\n            <span class=\"token builtin\">sum</span> <span class=\"token operator\">+=</span> x<span class=\"token punctuation\">.</span>value\n        <span class=\"token keyword\">if</span> y<span class=\"token punctuation\">.</span>is_present<span class=\"token punctuation\">:</span>\n            <span class=\"token builtin\">sum</span> <span class=\"token operator\">+=</span> y<span class=\"token punctuation\">.</span>value\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Received </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token lf_keywords\">target</span> TypeScript\n<span class=\"token lf_keywords\">reactor</span> Destination <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token builtin\">number</span>\n    <span class=\"token lf_keywords\">input</span> y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> x\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> y\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Received </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>sum<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token lf_keywords\">target</span> <span class=\"token class-name\">Rust</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token class-name\">Destination</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">input</span> y<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> y<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received {}.\"</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>$end(Destination)$</p>\n<p><strong>NOTE:</strong> if a reaction fails to test for the presence of an input and reads its value anyway, then the result it will get is target dependent.\n<span class=\"lf-c\">In the C target, the value read will be the most recently seen input value, or, if no input event has occurred at an earlier logical time, then zero or NULL, depending on the datatype of the input.</span>\n<span class=\"lf-cpp\">In the C++ target, a smart pointer is returned for present values and <code class=\"language-text\">nullptr</code> if the value is not present.\n<span class=\"lf-py warning\">FIXME.</span>\n<span class=\"lf-ts\">In the TS target, the value will be <strong>undefined</strong>, a legitimate value in TypeScript.</span>\n<span class=\"lf-rs warning\">FIXME.</span></p>\n<h2 id=\"triggers-effects-and-uses\" style=\"position:relative;\"><a href=\"#triggers-effects-and-uses\" aria-label=\"triggers effects and uses permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Triggers, Effects, and Uses</h2>\n<p>The general form of a $reaction$ is</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\"><span class=\"token lf_keywords\">reaction</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>triggers<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span>uses<span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>effects<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token lf_keywords\">target</span> language code<span class=\"token operator\">></span>\n<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <strong>triggers</strong> field can be a comma-separated list of input ports, <a href=\"/docs/handbook/hierarchy\">output ports of contained reactors</a>, <a href=\"/docs/handbook/timers-and-actions\">timers, actions</a>, or the special events $startup$ and $shutdown$. There must be at least one trigger for each reaction. A reaction with a $startup$ trigger is invoked when the program begins executing, and a reaction with a $shutdown$ trigger is invoked at the end of execution.</p>\n<p>The <strong>uses</strong> field, which is optional, specifies input ports (or <a href=\"/docs/handbook/hierarchy\">output ports of contained reactors</a>) that do not trigger execution of the reaction but may be read by the reaction.</p>\n<p>The <strong>effects</strong> field, which is also optional, is a comma-separated lists of output ports ports, <a href=\"/docs/handbook/hierarchy\">input ports of contained reactors</a>, or <a href=\"/docs/handbook/timers-and-actions\">actions</a>.</p>\n<h2 id=\"setting-an-output-multiple-times\" style=\"position:relative;\"><a href=\"#setting-an-output-multiple-times\" aria-label=\"setting an output multiple times permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting an Output Multiple Times</h2>\n<p>If one or more reactions set an output multiple times at the same <a href=\"/docs/handbook/superdense-time#tag-vs-time\">tag</a>, then only the last value set will be seen by any downstream reactors.</p>\n<p>If a reaction wishes to test whether an output has been previously set at the current tag by some other reaction, it can test it in the same way it tests inputs for presence.</p>\n<h2 id=\"mutable-inputs\" style=\"position:relative;\"><a href=\"#mutable-inputs\" aria-label=\"mutable inputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutable Inputs</h2>\n<p>Normally, a reaction does not modify the value of an input. An input is said to be <strong>immutable</strong>. The degree to which this is enforced varies by target language. Most of the target languages make it rather difficult to enforce, so the programmer needs to avoid modifying the input. Modifying an input value may lead to nondeterministic results.</p>\n<p>Occassionally, it is useful to modify an input. For example, the input may be a large data structure, and a reaction may wish to make a small modification and forward the result to an output. To accomplish this, the programmer should declare the input <strong>mutable</strong> as follows:</p>\n<div class=\"lf-c lf-cpp lf-ts lf-rs>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">mutable</span> <span class=\"token lf_keywords\">input</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>type<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n</div>\n<div class=\"lf-py>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">mutable</span> <span class=\"token lf_keywords\">input</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n</div>\n<p>This is a directive to the code generator indicating that reactions that read this input may also modify the value of the input. The code generator will attempt to optimize the scheduling to avoid copying the input value, but this may not be possible, in which case it will automatically insert a copy operation, making it safe to modify the input. The target-spefic reference documentation has more details about how this works.</p>","headings":[{"value":"Input and Output Declarations","depth":2},{"value":"Triggers, Effects, and Uses","depth":2},{"value":"Setting an Output Multiple Times","depth":2},{"value":"Mutable Inputs","depth":2}],"frontmatter":{"permalink":"/docs/handbook/inputs-and-outputs","title":"Inputs and Outputs","oneline":"Inputs, outputs, and reactions in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"A First Reactor","oneline":"Writing your first Lingua Franca reactor.","permalink":"/docs/handbook/a-first-reactor"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Parameters and State Variables","oneline":"Parameters and state variables in Lingua Franca.","permalink":"/docs/handbook/parameters-and-state-variables"}}}},"pageContext":{"id":"1-inputs-and-outputs","slug":"/docs/handbook/inputs-and-outputs","repoPath":"/packages/documentation/copy/en/topics/Inputs and Outputs.md","previousID":"dea84b3a-4122-57ea-b26e-5e77c0eac000","nextID":"5d1d8c4f-898f-522e-9605-ba9daa57d1f6","lang":"en","modifiedTime":"2022-04-27T17:29:43.686Z"}},
    "staticQueryHashes": []}