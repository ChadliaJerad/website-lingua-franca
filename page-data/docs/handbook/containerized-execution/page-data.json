{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/containerized-execution",
    "result": {"data":{"markdownRemark":{"id":"4d9ade85-3ebb-5e1f-a3d4-35f5df66ae06","excerpt":"For the  target at least, the Lingua Franca code generator is able to generate a Dockerfile when it generates the C source files. To enable this, include the…","html":"<p>For the <code class=\"language-text\">C</code> target at least, the Lingua Franca code generator is able to generate a Dockerfile when it generates the C source files. To enable this, include the <code class=\"language-text\">docker</code> property in your target specification, as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target C {\n    docker: true\n};</code></pre></div>\n<p>The generated Docker file has the same name as the LF file except that the extension is <code class=\"language-text\">.Dockerfile</code> and will be put in the <code class=\"language-text\">src-gen</code> directory.  You can also specify options.  Currently, only the base image (<code class=\"language-text\">FROM</code>) can be customized, but this will be extended to allow further customization is the future.  To customize the Docker file, instead of just <code class=\"language-text\">true</code> above, which gives default options, specify the options as in the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target C {\n    docker: {FROM: \"alpine:latest\"}\n};</code></pre></div>\n<p>This specifies that the base image is the latest version of <code class=\"language-text\">alpine</code>, a very small Linux. In fact, <code class=\"language-text\">alpine:latest</code> is the default value for this option, so you only need to specify this option if you need something other than <code class=\"language-text\">alpine:latest</code>.</p>\n<p>How to use this depends on whether your application is federated. You will need to <a href=\"https://docs.docker.com/get-docker/\">install Docker</a> if you haven’t already in order to use this.</p>\n<h2 id=\"unfederated-execution\" style=\"position:relative;\"><a href=\"#unfederated-execution\" aria-label=\"unfederated execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unfederated Execution</h2>\n<h3 id=\"run-container-using-code-classlanguage-textdocker-buildcode-followed-by-code-classlanguage-textdocker-runcode\" style=\"position:relative;\"><a href=\"#run-container-using-code-classlanguage-textdocker-buildcode-followed-by-code-classlanguage-textdocker-runcode\" aria-label=\"run container using code classlanguage textdocker buildcode followed by code classlanguage textdocker runcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run container using <code class=\"language-text\">docker build</code> followed by <code class=\"language-text\">docker run</code></h3>\n<p>Suppose your LF source file is <code class=\"language-text\">Foo.lf</code>.  When you run <code class=\"language-text\">lfc</code> or use the IDE to generate code, a file called <code class=\"language-text\">Foo.Dockerfile</code> will appear in the <code class=\"language-text\">src_gen</code> directory.  You can use this file to build a Docker image as follows. First, make sure you are in the same directory as the source file. Then issue the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   docker build -t foo -f src-gen/Foo.Dockerfile . </code></pre></div>\n<p>This will create a Docker image with tag <code class=\"language-text\">foo</code>. The tag is required to be all lower-case letters. By convention, we advise using the LF source file name, converted to lower case.</p>\n<p>You can then use this tag to run the image in a container:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    docker run -t --rm foo</code></pre></div>\n<p>The <code class=\"language-text\">-t</code> option creates a pseudo terminal, which is necessary for you to see any output produced by your program to <code class=\"language-text\">stdout</code>.  If your program also reads from <code class=\"language-text\">stdin</code>, then you will need to give the <code class=\"language-text\">-i</code> option as well, or combine the two as <code class=\"language-text\">it</code>.</p>\n<p>The <code class=\"language-text\">--rm</code> option is important. This removes the container upon completion of the run. If you omit this option, the container will continue to exist even after your program has terminated. You can alternatively remove the container after the run using <code class=\"language-text\">docker rm</code>.</p>\n<p>If you wish for your program to run in the background, give a <code class=\"language-text\">-d</code> option as well (for “detached”). In this case, you will not see any output from your run.</p>\n<p>The above run command can include any supported command-line arguments to the LF program. For example, to specify a logical timeout, you can do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    docker run -t --rm foo --timeout 20 sec</code></pre></div>\n<h3 id=\"run-container-using-code-classlanguage-textdocker-compose-upcode\" style=\"position:relative;\"><a href=\"#run-container-using-code-classlanguage-textdocker-compose-upcode\" aria-label=\"run container using code classlanguage textdocker compose upcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run container using <code class=\"language-text\">docker compose up</code></h3>\n<p>When you use <code class=\"language-text\">lfc</code> to compile <code class=\"language-text\">Foo.lf</code>, a file called <code class=\"language-text\">docker-compose.yml</code> will also appear in the same directory where <code class=\"language-text\">Foo.Dockerfile</code> is located. <code class=\"language-text\">cd</code> to that directory. Then, use <code class=\"language-text\">docker compose up</code> to automatically build and run the container. Once the container finishes execution, use <code class=\"language-text\">docker compose down</code> in the same directory where <code class=\"language-text\">docker-compose.yml</code> is located to remove the container.</p>\n<h2 id=\"federated-execution\" style=\"position:relative;\"><a href=\"#federated-execution\" aria-label=\"federated execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Federated Execution</h2>\n<h3 id=\"run-container-using-code-classlanguage-textdocker-buildcode-followed-by-code-classlanguage-textdocker-runcode-1\" style=\"position:relative;\"><a href=\"#run-container-using-code-classlanguage-textdocker-buildcode-followed-by-code-classlanguage-textdocker-runcode-1\" aria-label=\"run container using code classlanguage textdocker buildcode followed by code classlanguage textdocker runcode 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run container using <code class=\"language-text\">docker build</code> followed by <code class=\"language-text\">docker run</code></h3>\n<p>For a federated Lingua Franca program, one Dockerfile is created for each federate plus an additional one for the RTI. The Dockerfile for the RTI will be generated at <code class=\"language-text\">src-gen/RTI</code>.  You will need to run <code class=\"language-text\">docker build</code> for each of these. For example, to build the image for the RTI, you can do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker build -t distributedcount_rti -f src-gen/DistributedCount_RTI.Dockerfile .</code></pre></div>\n<p>(This is for the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/DistributedCount.lf\">DistributedCount.lf</a> test program).</p>\n<p>Now, there are several options for how to proceed.  One is to create a named network on which to run your federation. For example, to create a network named <code class=\"language-text\">lf</code>, do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    docker network create lf</code></pre></div>\n<p>You can then run the RTI on this network and assign the RTI a name that the federates can use to find the RTI:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    docker run -t --rm --network lf --name distributedcount-rti distributedcount_rti</code></pre></div>\n<p>Here, the assigned name is not quite the same as the tag that was specified when building the image (the last argument is the tag of the image to run in a container) because a host name is not allowed to have an underscore in it.</p>\n<p>Currently, you will also have to specify this host name in the LF source file so that the federates know where to find the RTI. E.g., in <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/DistributedCount.lf\">DistributedCount.lf</a>, change the end of the file to read as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">federated reactor DistributedCount at distributedcount-rti {\n    c = new Count();\n    p = new Print();\n    c.out -> p.in after 200 msec;\n}</code></pre></div>\n<p>Notice the <code class=\"language-text\">at distributedcount-rti</code>, which must match the name you use when running the RTI. <strong>FIXME:</strong> We should find a way to make this more automatic!</p>\n<p>In two other terminals, you can now run the other federates on the same network:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run -t --rm --network lf distributedcount_c</code></pre></div>\n<p>and</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker run -t --rm --network lf distributedcount_p</code></pre></div>\n<h3 id=\"run-container-using-code-classlanguage-textdocker-compose-upcode-1\" style=\"position:relative;\"><a href=\"#run-container-using-code-classlanguage-textdocker-compose-upcode-1\" aria-label=\"run container using code classlanguage textdocker compose upcode 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run container using <code class=\"language-text\">docker compose up</code></h3>\n<p>For a federated Lingua Franca program, once you use <code class=\"language-text\">lfc</code> to compile <code class=\"language-text\">Foo.lf</code>, on top of the <code class=\"language-text\">docker-compose.yml</code> for the reactors, an additional <code class=\"language-text\">docker-compose.yml</code> will be generated for the RTI and placed in <code class=\"language-text\">src-gen/RTI</code>.</p>\n<p>To run the federated program, open two terminals. In the first terminal, go to <code class=\"language-text\">src-gen/RTI</code> and use <code class=\"language-text\">docker compose up</code> to build and run the containerized RTI. Wait until the RTI is booted up. Then, open a second terminal and <code class=\"language-text\">cd</code> to the top level folder of the program (this is the folder that contains one folder for each of the federated reactors). You should see a <code class=\"language-text\">docker-compose.yml</code> there. Run <code class=\"language-text\">docker compose up</code> to build and run the containers.</p>\n<p>Once the program finished executing, run <code class=\"language-text\">docker compose down</code> in both the folder that contains the <code class=\"language-text\">docker-compose.yml</code> for the RTI as well as the folder that contains the <code class=\"language-text\">docker-compose.yml</code> for the reactors to remove the containers.</p>","headings":[{"value":"Unfederated Execution","depth":2},{"value":"Run container using <code class=\"language-text\">docker build</code> followed by <code class=\"language-text\">docker run</code>","depth":3},{"value":"Run container using <code class=\"language-text\">docker compose up</code>","depth":3},{"value":"Federated Execution","depth":2},{"value":"Run container using <code class=\"language-text\">docker build</code> followed by <code class=\"language-text\">docker run</code>","depth":3},{"value":"Run container using <code class=\"language-text\">docker compose up</code>","depth":3}],"frontmatter":{"permalink":"/docs/handbook/containerized-execution","title":"Containerized Execution","oneline":"Containerized Execution (preliminary)","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Contributing","oneline":"Contribute to Lingua Franca.","permalink":"/docs/handbook/contributing"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Contributing","oneline":"Contribute to Lingua Franca.","permalink":"/docs/handbook/contributing"}}}},"pageContext":{"id":"6-containerized-execution","slug":"/docs/handbook/containerized-execution","repoPath":"/packages/documentation/copy/en/preliminary/Containerized Execution.md","lang":"en","modifiedTime":"2022-04-19T22:18:03.119Z"}},
    "staticQueryHashes": []}