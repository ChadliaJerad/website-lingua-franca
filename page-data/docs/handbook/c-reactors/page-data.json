{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/c-reactors",
    "result": {"data":{"markdownRemark":{"id":"5bc98fa2-d635-5805-b994-21d427762194","excerpt":"WARNING: This page documents only the C target. Choose the C target language in the left sidebar to see the C code examples. In the C reactor target for Lingua…","html":"<p><span class=\"lf-cpp lf-py lf-ts lf-rs warning\"><strong>WARNING: This page documents only the C target.</strong> Choose the C target language in the left sidebar to see the C code examples.</span></p>\n<p>In the C reactor target for Lingua Franca, reactions are written in C and the code generator generates one or more standalone C programs that can be compiled and run on several platforms. For requirements, see <a href=\"setup-for-c\">setup for C</a>. It has been tested on MacOS, Linux, Windows, and at least one bare-iron embedded platforms. The single-threaded version (which you get by setting the <a href=\"/docs/handbook/target-specification#threading\"><code class=\"language-text\">threading</code> target parameter</a> to <code class=\"language-text\">false</code>) is the most portable, requiring only a handful of common C libraries (see <a href=\"#included-libraries\">Included Libraries</a> below). The multithreaded version requires a small subset of the Posix thread library (<code class=\"language-text\">pthreads</code>) and transparently executes in parallel on a multicore machine while preserving the deterministic semantics of Lingua Franca.</p>\n<p>Note that C is not a safe language. There are many ways that a programmer can circumvent the semantics of Lingua Franca and introduce nondeterminism and illegal memory accesses. For example, it is easy for a programmer to mistakenly send a message that is a pointer to data on the stack. The destination reactors will very likely read invalid data. It is also easy to create memory leaks, where memory is allocated and never freed. Here, we provide some guidelines for a style for writing reactors that will be safe.</p>\n<p><strong>NOTE:</strong> If you intend to use C++ code or import C++ libraries in the C target, we provide a special <a href=\"#the-ccpp-target\">CCpp target</a> that automatically uses a C++ compiler by default. Alternatively, you might want to use the <a href=\"/docs/handbook/cpp-reactors\">Cpp target</a>.</p>\n<h2 id=\"the-c-target-specification\" style=\"position:relative;\"><a href=\"#the-c-target-specification\" aria-label=\"the c target specification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The C Target Specification</h2>\n<p>To have Lingua Franca generate C code, start your <code class=\"language-text\">.lf</code> file with one of the following target specifications:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">target</span> C <span class=\"token operator\">&lt;</span>options<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">target</span> CCpp <span class=\"token operator\">&lt;</span>options<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that for all LF statements, the final semicolon is optional, but if you are writing your code in C, you may want to include the final semicolon for uniformity. See <a href=\"/docs/handbook/target-specification\">detailed documentation of the target options</a>.</p>\n<p>The second form, <code class=\"language-text\">CCpp</code>, is used when you wish to use a C++ compiler to compile the generated code, thereby allowing your C reactors to call C++ code. The C target uses a C compiler by default, and will fail to compile mixed C/C++ language programs. As a remedy, the <code class=\"language-text\">CCpp</code> target uses the C runtime but employs a C++ compiler to compile your program. To use it, simply replace <code class=\"language-text\">target C</code> with <code class=\"language-text\">target CCpp</code>.</p>\n<p>Here is a minimal example of a program written in the <code class=\"language-text\">CCpp</code> target, taken from <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/target/HelloWorldCCPP.lf\">HelloWorldCCPP.lf</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> CCpp<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> HelloWorld <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span> <span class=\"token comment\">// Note that no C++ header will be included by default.</span></span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token function\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Note:</strong> Unless some feature in the C target is needed, we recommend using the <a href=\"/docs/handbook/cpp-reactors\">Cpp target</a> that uses a runtime that is written natively in C++.</p>\n<p><strong>Note:</strong> A <code class=\"language-text\">.lf</code> file that uses the <code class=\"language-text\">CCpp</code> target cannot and should not be imported to an <code class=\"language-text\">.lf</code> file that uses the <code class=\"language-text\">C</code> target. Although these two targets use essentially the same runtime, such a scenario can cause unintended compiler errors.</p>\n<h2 id=\"the-self-struct\" style=\"position:relative;\"><a href=\"#the-self-struct\" aria-label=\"the self struct permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The self Struct</h2>\n<p>The code generator synthesizes a struct type in C for each reactor class and a constructor that creates an instance of this struct. By convention, these instances are called <code class=\"language-text\">self</code> and are visible within each reactor body. The <code class=\"language-text\">self</code> struct contains the parameters, state variables, and values associated with actions and ports of the reactor. Parameters and state variables are accessed directly on the <code class=\"language-text\">self</code> struct, whereas ports and actions are directly in scope by name, as we will see below. Let’s begin with parameters.</p>\n<h2 id=\"parameters-and-state-variables\" style=\"position:relative;\"><a href=\"#parameters-and-state-variables\" aria-label=\"parameters and state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameters and State Variables</h2>\n<p>Reactor parameters and state variables are referenced in the C code using the <code class=\"language-text\">self</code> struct. The following <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/Stride.lf\">Stride</a> example modifies the <code class=\"language-text\">Count</code> reactor in <a href=\"/docs/handbook/parameters-and-state-variables#state-declaration\">State Declaration</a> to include both a parameter and state variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>stride<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token operator\">-></span>count <span class=\"token operator\">+=</span> self<span class=\"token operator\">-></span>stride<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This defines a <code class=\"language-text\">stride</code> parameter with type <code class=\"language-text\">int</code> and initial value <code class=\"language-text\">1</code> and\na <code class=\"language-text\">count</code> state variable with the same type and initial value.\nThese are referenced in the reaction with the syntax <code class=\"language-text\">self->stride</code> and <code class=\"language-text\">self->count</code> respectively.</p>\n<p>It may be tempting to declare state variables in the $preamble$, as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> FlawedCount <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce a sequence of integers, but if there is more than one instance of the reactor, those instances will share the same variable count. Hence, <strong>don’t do this</strong>! Sharing variables across instances of reactors violates a basic principle, which is that reactors communicate only by sending messages to one another. Sharing variables will make your program nondeterministic. If you have multiple instances of the above FlawedCount reactor, the outputs produced by each instance will not be predictable, and in a multithreaded implementation, will also not be repeatable.</p>\n<h2 id=\"array-values-for-parameters\" style=\"position:relative;\"><a href=\"#array-values-for-parameters\" aria-label=\"array values for parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array Values for Parameters</h2>\n<p>Parameters and state variables can have array values, though some care is needed. The <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayAsParameter.lf\">ArrayAsParameter</a> example outputs the elements of an array as a sequence of individual messages:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Source</span><span class=\"token punctuation\">(</span>sequence<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n_sequence<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out<span class=\"token punctuation\">,</span> next <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>sequence<span class=\"token punctuation\">[</span>self<span class=\"token operator\">-></span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token operator\">-></span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token operator\">-></span>count <span class=\"token operator\">&lt;</span> self<span class=\"token operator\">-></span>n_sequence<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This uses a <a href=\"/docs/handbook/actions#logical-actions\">$logical$ $action$</a> to repeat the reaction, sending one element of the array in each invocation.</p>\n<p>In C, arrays do not encode their own length, so a separate parameter <code class=\"language-text\">n_sequence</code> is used for the array length. Obviously, there is potential here for errors, where the array length doesn’t match the length parameter.</p>\n<p>Above, the parameter default value is an array with three elements, <code class=\"language-text\">[0, 1, 2]</code>. The syntax for giving this default value is that of a Lingua Franca list, <code class=\"language-text\">(0, 1, 2)</code>, which gets converted by the code generator into a C static initializer. The default value can be overridden when instantiating the reactor using a similar syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Source</span><span class=\"token punctuation\">(</span>sequence <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n_sequence<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"array-values-for-states\" style=\"position:relative;\"><a href=\"#array-values-for-states\" aria-label=\"array values for states permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array Values for States</h2>\n<p>A state variable can also have an array value. For example, the [MovingAverage] (<a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/MovingAverage.lf\">https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/MovingAverage.lf</a>) reactor computes the <strong>moving average</strong> of the last four inputs each time it receives an input:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> MovingAverage <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> delay_line<span class=\"token operator\">:</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> index<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Calculate the output.</span>\n        <span class=\"token keyword\">double</span> sum <span class=\"token operator\">=</span> in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> self<span class=\"token operator\">-></span>delay_line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> sum<span class=\"token operator\">/</span><span class=\"token number\">4.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Insert the input in the delay line.</span>\n        self<span class=\"token operator\">-></span>delay_line<span class=\"token punctuation\">[</span>self<span class=\"token operator\">-></span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Update the index for the next input.</span>\n        self<span class=\"token operator\">-></span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token operator\">-></span>index <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            self<span class=\"token operator\">-></span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The second line declares that the type of the state variable is an array of <code class=\"language-text\">double</code>s with the initial value of the array being a three-element array filled with zeros.</p>\n<h2 id=\"states-and-parameters-with-struct-values\" style=\"position:relative;\"><a href=\"#states-and-parameters-with-struct-values\" aria-label=\"states and parameters with struct values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>States and Parameters with Struct Values</h2>\n<p>States whose type are structs can similarly be initialized. This <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/StructAsState.lf\">StructAsState</a> example illustrates this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> StructAsState <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hello_t</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">state</span> s<span class=\"token operator\">:</span><span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State s.name=\\\"%s\\\", value=%d.\\n\"</span><span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>s<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>s<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that state <code class=\"language-text\">s</code> is given type <code class=\"language-text\">hello_t</code>, which is defined in the $preamble$. The initial value just lists the initial values of each of the fields of the struct in the order they are declared.</p>\n<p>Parameters are similar:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">StructParameter</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span><span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hello_t</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parameter p.name=\\\"%s\\\", value=%d.\\n\"</span><span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token operator\">-></span>p<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"FAILED: Expected 42.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"inputs-and-outputs\" style=\"position:relative;\"><a href=\"#inputs-and-outputs\" aria-label=\"inputs and outputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inputs and Outputs</h2>\n<p>In the body of a reaction in the C target, the value of an input is obtained using the syntax <code class=\"language-text\">name->value</code>, where <code class=\"language-text\">name</code> is the name of the input port. See, for example, the <code class=\"language-text\">Destination</code> reactor in <a href=\"/docs/handbook/inputs-and-outputs#triggers-effects-and-uses\">Triggers, Effects, and Uses</a>.</p>\n<p>To set the value of outputs, use one of several variants of the <code class=\"language-text\">SET</code> macro. See, for example, the <code class=\"language-text\">Double</code> reactor in <a href=\"/docs/handbook/inputs-and-outputs#input-and-output-declarations\">Input and Output Declarations</a>.)</p>\n<p>There are several variants of the <code class=\"language-text\">SET</code> macro, and the one you should use depends on the type of the output. The simple version <code class=\"language-text\">SET</code> works for all primitive C type (int, double, etc.) as well as the <code class=\"language-text\">bool</code> and <code class=\"language-text\">string</code> types that Lingua Franca defines. For the other variants, see <a href=\"#Sending-and-Receiving-Arrays-and-Structs\">Sending and Receiving Arrays and Structs</a> below.</p>\n<p>An output may even be set in different reactions of the same reactor at the same tag. In this case, one reaction may wish to test whether the previously invoked reaction has set the output. It can check <code class=\"language-text\">name->is_present</code> to determine whether the output has been set. For example, the following reactor (the test case <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/TestForPreviousOutput.lf\">TestForPreviousOutput</a>) will always produce the output 42:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> TestForPreviousOutput <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Set a seed for random number generation based on the current time.</span>\n        <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Randomly produce an output or not.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>out<span class=\"token operator\">-></span>is_present<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> out<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first reaction may or may not set the output to 21. The second reaction doubles the output if it has been previously produced and otherwise produces 42.</p>\n<h2 id=\"sending-and-receiving-arrays-and-structs\" style=\"position:relative;\"><a href=\"#sending-and-receiving-arrays-and-structs\" aria-label=\"sending and receiving arrays and structs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sending and Receiving Arrays and Structs</h2>\n<p>You can define your own datatypes in C and send and receive those. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/StructAsType.lf\">StructAsType</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> StructAsType <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hello_t</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hello_t</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The $preamble$ code defines a struct datatype. In the reaction to $startup$, the reactor creates an instance of this struct on the stack (as a local variable named <code class=\"language-text\">temp</code>) and then copies that struct to the output using the <code class=\"language-text\">SET</code> macro.</p>\n<p>For large structs, it may be inefficient to create a struct on the stack and copy it to the output, as done above. You can instead write directly to the fields of the struct. For example, the above reaction could be rewritten as follows (see <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/StructAsTypeDirect.lf\">StructAsTypeDirect</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\">    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token operator\">-></span>value<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token operator\">-></span>value<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SET_PRESENT</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>The final call to <code class=\"language-text\">SET_PRESENT</code> is necessary to inform downstream reactors that the struct has a new value. (This is a macro that simply does <code class=\"language-text\">out->is_present = true</code>). Note that in subsequent reactions, the values of the struct persist. Hence, this technique can be very efficient if a large struct is modified only slightly in each of a sequence of reactions.</p>\n<p>A reactor receiving the struct message uses the struct as normal in C:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received: name = %s, value = %d\\n\"</span><span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The preamble should not be repeated in this reactor definition if the two reactors are defined together because this will trigger an error when the compiler thinks that hello_t is being redefined.</p>\n<p>Arrays that have fixed sizes are handled similarly. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayAsType.lf\">ArrayAsType</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> ArrayAsType <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SET_PRESENT</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, the output is declared to have type <code class=\"language-text\">int[3]</code>, an array of three integers. The startup reaction above writes to the array and then calls <code class=\"language-text\">SET_PRESENT</code> to indicate an updated value. Again, the values in the array will persist across reactions.</p>\n<p>A reactor receiving this array is straightforward. It just references the array elements as usual in C, as illustrated by this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received: [\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"dynamically-allocated-arrays\" style=\"position:relative;\"><a href=\"#dynamically-allocated-arrays\" aria-label=\"dynamically allocated arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamically Allocated Arrays</h2>\n<p>For arrays where the size is variable, it may be necessary to dynamically allocate memory. But when should that memory be freed? A reactor cannot know when downstream reactors are done with the data. Lingua Franca provides utilities for managing this using reference counting. You can pass a pointer to a dynamically allocated object as illustrated in the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayPrint.lf\">ArrayPrint</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> ArrayPrint <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Dynamically allocate an output array of length 3.</span>\n        <span class=\"token function\">SET_NEW_ARRAY</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Above allocates the array, which then must be populated.</span>\n        out<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This declares the output datatype to be <code class=\"language-text\">int[]</code> (or, equivalently, <code class=\"language-text\">int*</code>), an array of integers of unspecified size. To produce the array in a reaction, it uses the library function <code class=\"language-text\">SET_NEW_ARRAY</code> to allocate an array of length 3 and sets the output to send that array. The reaction then populates the array with data. The deallocation of the memory for the array will occur automatically after the last reactor that receives a pointer to the array has finished using it.</p>\n<p>A reactor receiving the array looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> Print <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received: [\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> in<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the body of the reaction, <code class=\"language-text\">in->value</code> is a pointer to first element of the array, so it can be indexed as usual with arrays in C, <code class=\"language-text\">in->value[i]</code>. Moreover, a variable <code class=\"language-text\">in->length</code> is bound to the length of the array.</p>\n<h2 id=\"mutable-inputs\" style=\"position:relative;\"><a href=\"#mutable-inputs\" aria-label=\"mutable inputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutable Inputs</h2>\n<p>Although it cannot be enforced in C, the receiving reactor should not modify the values stored in the array. Inputs are logically <em>immutable</em> because there may be several recipients. Any recipient that wishes to modify the array should make a copy of it. Fortunately, a utility is provided for this pattern. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayScale.lf\">ArrayScale</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">ArrayScale</span><span class=\"token punctuation\">(</span>scale<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">mutable</span> <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> in<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> self<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">SET_TOKEN</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, the input is declared $mutable$, which means that any reaction is free to modify the input. If this reactor is the only recipient of the array or the last recipient of the array, then this will not copy of the array but rather use the original array. Otherwise, it will use a copy.</p>\n<p>The above <code class=\"language-text\">ArrayScale</code> reactor modifies the array and then forwards it to its output port using the <code class=\"language-text\">SET_TOKEN()</code> macro. That macro further delegates to downstream reactors the responsibility for freeing dynamically allocated memory once all readers have completed their work.</p>\n<p>If the above code were not to forward the array, then the dynamically allocated memory will be automatically freed when this reactor is done with it.</p>\n<p>The above three reactors can be combined into a pipeline as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> ArrayScaleTest <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayScale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span>out <span class=\"token operator\">-</span><span class=\"token operator\">></span> c<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>out <span class=\"token operator\">-</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this composite, the array is allocated by <code class=\"language-text\">ArrayPrint</code>, modified by <code class=\"language-text\">ArrayScale</code>, and deallocated (freed) after <code class=\"language-text\">Print</code> has reacted. No copy is necessary because <code class=\"language-text\">ArrayScale</code> is the only recipient of the original array.</p>\n<p>Inputs and outputs can also be dynamically allocated structs. In fact, Lingua Franca’s C target will treat any input or output datatype that ends with <code class=\"language-text\">[]</code> or <code class=\"language-text\">*</code> specially by providing utilities for allocating memory and modifying and forwarding. Deallocation of the allocated memory is automatic. The complete set of utilities is given below.</p>\n<h2 id=\"string-types\" style=\"position:relative;\"><a href=\"#string-types\" aria-label=\"string types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Types</h2>\n<p>String types in C are <code class=\"language-text\">char*</code>. But, as explained above, types ending with <code class=\"language-text\">*</code> are interpreted specially to provide automatic memory management, which we generally don’t want with strings (a string that is a compile-time constant must not be freed). You could enclose the type as <code class=\"language-text\">{= char* =}</code>, but to avoid this awkwardness, the header files include a typedef that permits using <code class=\"language-text\">string</code> instead of <code class=\"language-text\">char*</code>. For example (from <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/DelayString.lf\">DelayString.lf</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">DelayString</span><span class=\"token punctuation\">(</span>delay<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> a<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// The following copies the char*, not the string.</span>\n        <span class=\"token function\">schedule_copy</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>delay<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"macros-for-setting-output-values\" style=\"position:relative;\"><a href=\"#macros-for-setting-output-values\" aria-label=\"macros for setting output values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Macros For Setting Output Values</h2>\n<p>In all of the following, <out> is the name of the output and <value> is the value to be sent.</p>\n<blockquote>\n<p><code class=\"language-text\">SET(&lt;out>, &lt;value>);</code></p>\n</blockquote>\n<p>Set the specified output (or input of a contained reactor) to the specified value. This version is used for primitive type such as <code class=\"language-text\">int</code>, <code class=\"language-text\">double</code>, etc. as well as the built-in types <code class=\"language-text\">bool</code> and <code class=\"language-text\">string</code> (but only if the string is a statically allocated constant; otherwise, see <code class=\"language-text\">SET_NEW_ARRAY</code>). It can also be used for structs with a type defined by a <code class=\"language-text\">typedef</code> so that the type designating string does not end in ’*‘. The value is copied and therefore the variable carrying the value can be subsequently modified without changing the output.</p>\n<blockquote>\n<p><code class=\"language-text\">SET_ARRAY(&lt;out>, &lt;value>, &lt;element_size>, &lt;length>);</code></p>\n</blockquote>\n<p>This version is used for outputs with a type declaration ending with <code class=\"language-text\">[]</code> or <code class=\"language-text\">*</code>, such as <code class=\"language-text\">int[]</code>. This version is for use when the <em>value</em> to be sent is in dynamically allocated memory that will need to be freed downstream. The allocated memory will be automatically freed when all recipients of the outputs are done with it. Since C does not encode array sizes as part of the array, the <em>length</em> and <em>element_size</em> must be given (the latter is the size of each element in bytes). See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/SetArray.lf\">SetArray.lf</a>.</p>\n<blockquote>\n<p><code class=\"language-text\">SET_NEW(&lt;out>);</code></p>\n</blockquote>\n<p>This version is used for outputs with a type declaration ending with <code class=\"language-text\">*</code> (see example below). This sets the <code class=\"language-text\">out</code> variable to point to newly allocated memory for storing the specified output type. After calling this function, the reaction should populate that memory with the content it intends to send to downstream reactors. This macro is equivalent to <code class=\"language-text\">SET_NEW_ARRAY(out, 1)</code>. See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/StructPrint.lf\">StructPrint.lf</a></p>\n<blockquote>\n<p><code class=\"language-text\">SET_NEW_ARRAY(&lt;out>, &lt;length>);</code></p>\n</blockquote>\n<p>This version is used for outputs with a type declaration ending with <code class=\"language-text\">[]</code> or <code class=\"language-text\">*</code>. This sets the <em>out</em> variable to point to newly allocated memory sufficient to hold an array of the specified length containing the output type in each element. The caller should subsequently populate the array with the contents that it intends to send to downstream reactors. See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayPrint.lf\">ArrayPrint.lf</a>.</p>\n<p><strong>Dynamically allocated strings:</strong> If an output is to be a dynamically allocated string, as opposed to a static string constant, then you can use <code class=\"language-text\">SET_NEW_ARRAY</code> to allocate the memory, and the memory will be automatically freed downstream after the all users have read the string. To do this, set the output type to <code class=\"language-text\">char[]</code> or <code class=\"language-text\">char*</code> rather than <code class=\"language-text\">string</code> and call <code class=\"language-text\">SET_NEW_ARRAY</code> with the desired length. After this, <em>out</em> will point to a char array of the required length. You can then populate it with your desired string, e.g. using <code class=\"language-text\">snprintf()</code>. See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/federated/DistributedToken.lf\">DistributedToken.lf</a></p>\n<blockquote>\n<p><code class=\"language-text\">SET_PRESENT(&lt;out>);</code></p>\n</blockquote>\n<p>This version just sets the <code class=\"language-text\">&lt;out>->is_present</code> variable corresponding to the specified output to true. This is normally used with array outputs with fixed sizes and statically allocated structs. In these cases, the values in the output are normally written directly to the array or struct. See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayAsType.lf\">ArrayAsType.lf</a></p>\n<blockquote>\n<p><code class=\"language-text\">SET_TOKEN(&lt;out>, &lt;value>);</code></p>\n</blockquote>\n<p>This version is used for outputs with a type declaration ending with <code class=\"language-text\">*</code> (any pointer) or <code class=\"language-text\">[]</code> (any array). The <code class=\"language-text\">&lt;value></code> argument should be a struct of type <code class=\"language-text\">token_t</code>. This can be the trickiest form to use, but it is rarely necessary for the programmer to create their own (dynamically allocated) instance of <code class=\"language-text\">token_t</code>. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/SetToken.lf\">SetToken.lf</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\">    <span class=\"token lf_keywords\">reactor</span> Source <span class=\"token punctuation\">{</span>\n        <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n        <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n        <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n            <span class=\"token function\">schedule_int</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">MSEC</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n        <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n            <span class=\"token function\">SET_TOKEN</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> a<span class=\"token operator\">-></span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, the first reaction schedules an integer-valued action to trigger after 200 microseconds. As explained below, action payloads are carried by tokens. The second reaction grabs the token rather than the value using the syntax <code class=\"language-text\">a->token</code> (the name of the action followed by <code class=\"language-text\">->token</code>). It then forwards the token to the output. The output data type is <code class=\"language-text\">int*</code> not <code class=\"language-text\">int</code> because the token carries a pointer to dynamically allocated memory that contains the value. All inputs and outputs with types ending in <code class=\"language-text\">*</code> or <code class=\"language-text\">[]</code> are carried by tokens.</p>\n<p>All of the <code class=\"language-text\">SET</code> macros will overwrite any output value previously set at the same logical time and will cause the final output value to be sent to all reactors connected to the output. They also all set a local <code class=\"language-text\">&lt;out>->is_present</code> variable to true. This can be used to subsequently test whether the output value has been set.</p>\n<h2 id=\"dynamically-allocated-structs\" style=\"position:relative;\"><a href=\"#dynamically-allocated-structs\" aria-label=\"dynamically allocated structs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamically Allocated Structs</h2>\n<p>The <code class=\"language-text\">SET_NEW</code> and <code class=\"language-text\">SET_TOKEN</code> macros can be used to send <code class=\"language-text\">structs</code> of arbitrary complexity. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> StructPrint <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hello_t</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token class-name\">hello_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Dynamically allocate an output struct.</span>\n        <span class=\"token function\">SET_NEW</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Above allocates a struct, which then must be populated.</span>\n        out<span class=\"token operator\">-></span>value<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token operator\">-></span>value<span class=\"token operator\">-></span>value <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The $preamble$ declares a struct type <code class=\"language-text\">hello_t</code> with two fields, and the <code class=\"language-text\">SET_NEW</code> macro allocates memory to contain such a struct. The subsequent code populates that memory. A reactor receiving this struct might look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token class-name\">hello_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received: name = %s, value = %d\\n\"</span><span class=\"token punctuation\">,</span>\n            in<span class=\"token operator\">-></span>value<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>value<span class=\"token operator\">-></span>value\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Just as with arrays, an input with a pointer type can be declared $mutable$, in which case it is safe to modify the fields and forward the struct.</p>\n<p>Occasionally, you will want an input or output type to be a pointer, but you don’t want the automatic memory allocation and deallocation. A simple example is a string type, which in C is <code class=\"language-text\">char*</code>. Consider the following (erroneous) reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> Erroneous <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An output data type that ends with <code class=\"language-text\">*</code> signals to Lingua Franca that the message is dynamically allocated and must be freed downstream after all recipients are done with it. But the <code class=\"language-text\">\"Hello World\"</code> string here is statically allocated, so an error will occur when the last downstream reactor to use this message attempts to free the allocated memory. To avoid this for strings, you can use the <code class=\"language-text\">string</code> type, defined in <code class=\"language-text\">reactor.h</code>, as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> Fixed <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">string</code> type is equivalent to <code class=\"language-text\">char*</code>, but since it doesn’t end with <code class=\"language-text\">*</code>, it does not signal to Lingua Franca that the type is dynamically allocated. Lingua Franca only handles allocation and deallocation for types that are specified literally with a final <code class=\"language-text\">*</code> in the type name. The same trick can be used for any type where you don’t want automatic allocation and deallocation. E.g., the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/SendsPointerTest.lf\">SendsPointer</a> example looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> SendsPointer  <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> int_pointer<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span>int_pointer<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> my_constant <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>my_constant<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above technique can be used to abuse the reactor model of computation by communicating pointers to shared variables. This is generally a bad idea unless those shared variables are immutable. The result will likely be nondeterministic. Also, communicating pointers across machines that do not share memory will not work at all.</p>\n<h2 id=\"time\" style=\"position:relative;\"><a href=\"#time\" aria-label=\"time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time</h2>\n<p>In the C target, the value of a time instant or interval is an integer specifying a number of nanoseconds. An instant is the number of nanoseconds that have elapsed since January 1, 1970. An interval is the difference between two instants. When an LF program starts executing, logical time is (normally) set to the instant provided by the operating system. (On some embedded platforms without real-time clocks, it will be set instead to zero.)</p>\n<p>Time in the C target is a <code class=\"language-text\">long long</code>, which is (normally) a 64 bit signed number. Since a 64-bit number has a limited range, this measure of time instants will overflow in approximately the year 2262. For better code clarity, two types are defined in <a href=\"https://github.com/lf-lang/reactor-c/blob/main/core/tag.h\">tag.h</a>, <code class=\"language-text\">instant_t</code> and <code class=\"language-text\">interval_t</code>, which you can use for time instants and intervals respectively. These are both equivalent to <code class=\"language-text\">long long</code>, but using those types will insulate your code against changes and platform-specific customizations.</p>\n<p>Lingua Franca uses a superdense model of time. A reaction is invoked at a logical <strong>tag</strong>, a struct consists of a <code class=\"language-text\">time</code> value (an <code class=\"language-text\">instant_t</code>, which is a <code class=\"language-text\">long long</code>) and a <code class=\"language-text\">microstep</code> value (a <code class=\"language-text\">microstep_t</code>, which is an unsigned <code class=\"language-text\">int</code>). The tag is guaranteed to not increase during the execution of a reaction. Outputs produced by a reaction have the same tag as the inputs, actions, or timers that trigger the reaction, and hence are <strong>logically simultaneous</strong>.</p>\n<p>The time structs and functions for working with time are defined in <a href=\"https://github.com/lf-lang/reactor-c/blob/main/core/tag.h\">tag.h</a>. The most useful functions are:</p>\n<ul>\n<li><code class=\"language-text\">tag_t get_current_tag()</code>: Get the current tag at which this reaction has been invoked.</li>\n<li><code class=\"language-text\">instant_t get_logical_time()</code>: Get the current logical time (the first part of the current tag).</li>\n<li><code class=\"language-text\">microstep_t get_microstep() </code>: Get the current microstep (the second part of the current tag).</li>\n<li><code class=\"language-text\">interval_t get_elapsed_logical_time()</code>: Get the logical time elapsed since program start.</li>\n<li><code class=\"language-text\">int compare_tags(tag_t, tag_t)</code>: Compare two tags, returning -1, 0, or 1 for less than, equal, and greater than.</li>\n</ul>\n<p>There are also some useful functions for accessing physical time:</p>\n<ul>\n<li><code class=\"language-text\">instant_t get_physical_time()</code>: Get the current physical time.</li>\n<li><code class=\"language-text\">instant_t get_elapsed_physical_time()</code>: Get the physical time elapsed since program start.</li>\n<li><code class=\"language-text\">instant_t get_start_time()</code>: Get the starting physical and logical time.</li>\n</ul>\n<p>The last of these is both a physical and logical time because, at the start of execution, the starting logical time is set equal to the current physical time as measured by a local clock.</p>\n<p>A reaction can examine the current logical time (which is constant during the execution of the reaction). For example, consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/GetTime.lf\">GetTime</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> GetTime <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token class-name\">instant_t</span> <span class=\"token lf_keywords\">logical</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logical time is %lld.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token lf_keywords\">logical</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When executed, you will get something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Start execution at time Sun Oct 13 10:18:36 2019\nplus 353609000 nanoseconds.\nLogical time is 1570987116353609000.\nLogical time is 1570987117353609000.\nLogical time is 1570987118353609000.\n...</code></pre></div>\n<p>The first two lines give the current time-of-day provided by the execution platform at the start of execution. This is used to initialize logical time. Subsequent values of logical time are printed out in their raw form, rather than the friendlier form in the first two lines. If you look closely, you will see that each number is one second larger than the previous number, where one second is 1000000000 nanoseconds.</p>\n<p>You can also obtain the <em>elapsed</em> logical time since the start of execution:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> GetTime <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token class-name\">interval_t</span> elapsed <span class=\"token operator\">=</span> <span class=\"token function\">get_elapsed_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elapsed logical time is %lld.\\n\"</span><span class=\"token punctuation\">,</span> elapsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Start execution at time Sun Oct 13 10:25:22 2019\nplus 833273000 nanoseconds.\nElapsed logical time is 0.\nElapsed logical time is 1000000000.\nElapsed logical time is 2000000000.\n...</code></pre></div>\n<p>You can also get physical time, which comes from your platform’s real-time clock:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> GetTime <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token class-name\">instant_t</span> <span class=\"token lf_keywords\">physical</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_physical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Physical time is %lld.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token lf_keywords\">physical</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Start execution at time Sun Oct 13 10:35:59 2019\nplus 984992000 nanoseconds.\nPhysical time is 1570988159986108000.\nPhysical time is 1570988160990219000.\nPhysical time is 1570988161990067000.\n...</code></pre></div>\n<p>Finally, you can get elapsed physical time:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> GetTime <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token class-name\">instant_t</span> elapsed_physical <span class=\"token operator\">=</span> <span class=\"token function\">get_elapsed_physical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elapsed physical time is %lld.\\n\"</span><span class=\"token punctuation\">,</span> elapsed_physical<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Elapsed physical time is 657000.\nElapsed physical time is 1001856000.\nElapsed physical time is 2004761000.\n...</code></pre></div>\n<p>Notice that these numbers are increasing by <em>roughly</em> one second each time. If you set the <code class=\"language-text\">fast</code> target parameter to <code class=\"language-text\">true</code>, then physical time will elapse much faster than logical time.</p>\n<p>Working with nanoseconds in C code can be tedious if you are interested in longer durations. For convenience, a set of macros are available to the C programmer to convert time units into the required nanoseconds. For example, you can specify 200 msec in C code as <code class=\"language-text\">MSEC(200)</code> or two weeks as <code class=\"language-text\">WEEKS(2)</code>. The provided macros are <code class=\"language-text\">NSEC</code>, <code class=\"language-text\">USEC</code> (for microseconds), <code class=\"language-text\">MSEC</code>, <code class=\"language-text\">SEC</code>, <code class=\"language-text\">MINUTE</code>, <code class=\"language-text\">HOUR</code>, <code class=\"language-text\">DAY</code>, and <code class=\"language-text\">WEEK</code>. You may also use the plural of any of these. Examples are given in the next section.</p>\n<h2 id=\"actions-with-values\" style=\"position:relative;\"><a href=\"#actions-with-values\" aria-label=\"actions with values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions With Values</h2>\n<p>Actions are described in the <a href=\"/docs/handbook/actions\">Actions</a>. If an action is declared with a data type, then it can carry a <strong>value</strong>, a data value that becomes available to any reaction triggered by the action. This is particularly useful for physical actions that are externally triggered because it enables the action to convey information to the reactor. This could be, for example, the body of an incoming network message or a numerical reading from a sensor.</p>\n<p>Recall from <a href=\"/docs/handbook/composing-reactors\">Composing Reactors</a> that the $after$ keyword on a connection between ports introduces a logical delay. This is actually implemented using a logical action. We illustrate how this is done using the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/DelayInt.lf\">DelayInt</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">DelayInt</span><span class=\"token punctuation\">(</span>delay<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> d<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> d<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> d <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">schedule_int</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>delay<span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using this reactor as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    source<span class=\"token punctuation\">.</span>out <span class=\"token operator\">-</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">;</span>\n    d<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> sink<span class=\"token punctuation\">.</span>out</code></pre></div>\n<p>is equivalent to</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    source<span class=\"token punctuation\">.</span>out <span class=\"token operator\">-</span><span class=\"token operator\">></span> sink<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span> <span class=\"token lf_keywords\">after</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span></code></pre></div>\n<p>(except that our <code class=\"language-text\">DelayInt</code> reactor will only work with data type <code class=\"language-text\">int</code>).</p>\n<p>The action <code class=\"language-text\">d</code> is specified with a type <code class=\"language-text\">int</code>. The reaction to the input <code class=\"language-text\">in</code> declares as its effect the action <code class=\"language-text\">d</code>. This declaration makes it possible for the reaction to schedule a future triggering of <code class=\"language-text\">d</code>. The reaction uses one of several variants of the <strong>schedule</strong> function, namely <strong>schedule_int</strong>, a convenience function provided because integer payloads on actions are very common. We will see below, however, that payloads can have any data type.</p>\n<p>The first reaction declares that it is triggered by <code class=\"language-text\">d</code> and has effect <code class=\"language-text\">out</code>. To read the value, it uses the <code class=\"language-text\">d->value</code> variable. Because this reaction is first, the <code class=\"language-text\">out</code> at any logical time can be produced before the input <code class=\"language-text\">in</code> is even known to be present. Hence, this reactor can be used in a feedback loop, where <code class=\"language-text\">out</code> triggers a downstream reactor to send a message back to <code class=\"language-text\">in</code> of this same reactor. If the reactions were given in the opposite order, there would be causality loop and compilation would fail.</p>\n<p>If you are not sure whether an action carries a value, you can test for it as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\">    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>has_value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> d<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is possible to both be triggered by and schedule an action the same reaction. For example, this <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/CountSelf.lf\">CountSelf</a> reactor will produce a counting sequence after it is triggered the first time:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">CountSelf</span><span class=\"token punctuation\">(</span>delay<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a<span class=\"token punctuation\">,</span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">schedule_int</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>delay<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a<span class=\"token punctuation\">,</span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> a<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">schedule_int</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>delay<span class=\"token punctuation\">,</span> a<span class=\"token operator\">-></span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Of course, to produce a counting sequence, it would be more efficient to use a state variable.</p>\n<h2 id=\"schedule-functions\" style=\"position:relative;\"><a href=\"#schedule-functions\" aria-label=\"schedule functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Schedule Functions</h2>\n<p>Actions with values can be rather tricky to use because the value must usually be carried in dynamically allocated memory. It will not work for value to refer to a state variable of the reactor because that state variable will likely have changed value by the time the reactions to the action are invoked. Several variants of the <code class=\"language-text\">schedule</code> function are provided to make it easier to pass values across time in varying circumstances.</p>\n<blockquote>\n<p><code class=\"language-text\">schedule(&lt;action>, &lt;offset>);</code></p>\n</blockquote>\n<p>This is the simplest version as it carries no value. The action need not have a data type.</p>\n<blockquote>\n<p><code class=\"language-text\">schedule_int(&lt;action>, &lt;offset>, &lt;value>);</code></p>\n</blockquote>\n<p>This version carries an <code class=\"language-text\">int</code> value. The datatype of the action is required to be <code class=\"language-text\">int</code>.</p>\n<blockquote>\n<p><code class=\"language-text\">schedule_token(&lt;action>, &lt;offset>, &lt;value>);</code></p>\n</blockquote>\n<p>This version carries a <strong>token</strong>, which has type <code class=\"language-text\">token_t</code> and points to the value, which can have any type. There is a <code class=\"language-text\">create_token()</code> function that can be used to create a token, but programmers will rarely need to use this. Instead, you can use <code class=\"language-text\">schedule_value()</code> (see below), which will automatically create a token. Alternatively, for inputs with types ending in <code class=\"language-text\">*</code> or <code class=\"language-text\">[]</code>, the value is wrapped in a token, and the token can be obtained using the syntax <code class=\"language-text\">inputname->token</code> in a reaction and then forwarded using <code class=\"language-text\">schedule_token()</code> (see <a href=\"#Dynamically-Allocated-Structs\">Dynamically Allocated Structs</a> above). If the input is mutable, the reaction can then even modify the value pointed to by the token and/or use <code class=\"language-text\">schedule_token()</code> to send the token to a future logical time. For example, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/DelayPointer.lf\">DelayPointer</a> reactor realizes a logical delay for any datatype carried by a token:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">DelayPointer</span><span class=\"token punctuation\">(</span>delay<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Using SET_TOKEN delegates responsibility for</span>\n        <span class=\"token comment\">// freeing the allocated memory downstream.</span>\n        <span class=\"token function\">SET_TOKEN</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> a<span class=\"token operator\">-></span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Schedule the actual token from the input rather than</span>\n        <span class=\"token comment\">// a new token with a copy of the input value.</span>\n        <span class=\"token function\">schedule_token</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>delay<span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">schedule_value**(&lt;action>, &lt;offset>, &lt;value>, &lt;length>);</code></p>\n</blockquote>\n<p>This version is used to send into the future a value that has been dynamically allocated malloc. It will be automatically freed when it is no longer needed. The <em>value</em> argument is a pointer to the memory containing the value. The <em>length</em> argument should be 1 if it is a not an array and the array length otherwise. This length will be needed downstream to interpret the data correctly. See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ScheduleValue.lf\">ScheduleValue.lf</a>.</p>\n<blockquote>\n<p><code class=\"language-text\">schedule_copy(&lt;action>, &lt;offset>, &lt;value>, &lt;length>);</code></p>\n</blockquote>\n<p>This version is for sending a copy of some data pointed to by the <code class=\"language-text\">&lt;value></code> argument. The data is assumed to be a scalar or array of type matching the <code class=\"language-text\">&lt;action></code> type. The <code class=\"language-text\">&lt;length></code> argument should be 1 if it is a not an array and the array length otherwise. This length will be needed downstream to interpret the data correctly.</p>\n<p>Occasionally, an action payload may not be dynamically allocated nor freed. For example, it could be a pointer to a statically allocated string. If you know this to be the case, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/DelayString.lf\">DelayString</a> reactor will realize a logical time delay on such a string:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">DelayString</span><span class=\"token punctuation\">(</span>delay<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> a<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// The following copies the char*, not the string.</span>\n        <span class=\"token function\">schedule_copy</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>delay<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The datatype <code class=\"language-text\">string</code> is an alias for <code class=\"language-text\">char*</code>, but Lingua Franca does not know this, so it creates a token that contains a copy of the pointer to the string rather than a copy of the string itself.</p>\n<h2 id=\"stopping-execution\" style=\"position:relative;\"><a href=\"#stopping-execution\" aria-label=\"stopping execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stopping Execution</h2>\n<p>A reaction may request that the execution stop after all events with the current timestamp have been processed by calling the built-in function <code class=\"language-text\">request_stop()</code>, which takes no arguments. In a non-federated execution, the returned time is normally the same as the current logical time, and the actual last tag will be one microstep later. In a federated execution, however, the stop time will likely be larger than the current logical time. All federates are assured of stopping at the same logical time.</p>\n<h2 id=\"log-and-debug-information\" style=\"position:relative;\"><a href=\"#log-and-debug-information\" aria-label=\"log and debug information permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Log and Debug Information</h2>\n<p>A suite of useful functions is provided in <a href=\"https://github.com/lf-lang/reactor-c/blob/main/core/utils/util.h\">util.h</a> for producing messages to be made visible when the generated program is run. Of course, you can always use <code class=\"language-text\">printf</code>, but this is not a good choice for logging or debug information, and it is not a good choice when output needs to be redirected to a window or some other user interface (see for example the <a href=\"https://github.com/lf-lang/reactor-c/blob/main/util/sensor_simulator.h\">sensor simulator</a>). Also, in federated execution, these functions identify which federate is producing the message. The functions are listed below. The arguments for all of these are identical to <code class=\"language-text\">printf</code> with the exception that a trailing newline is automatically added and therefore need not be included in the format string.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">DEBUG_PRINT(format, ...)</code>: Use this for verbose messages that are only needed during debugging. Nothing is printed unless the <a href=\"/docs/handbook/target-specification#logging\">target</a> parameter <code class=\"language-text\">logging</code> is set to <code class=\"language-text\">debug</code>. THe overhead is minimized when nothing is to be printed.</p>\n</li>\n<li>\n<p><code class=\"language-text\">LOG_PRINT(format, ...)</code>: Use this for messages that are useful logs of the execution. Nothing is printed unless the <a href=\"/docs/handbook/target-specification#logging\">target parameter <code class=\"language-text\">logging</code></a> is set to <code class=\"language-text\">log</code> or <code class=\"language-text\">debug</code>. This is a macro so that overhead is minimized when nothing is to be printed.</p>\n</li>\n<li>\n<p><code class=\"language-text\">info_print(format, ...)</code>: Use this for messages that should normally be printed but may need to be redirected to a user interface such as a window or terminal (see <code class=\"language-text\">register_print_function</code> below). These messages can be suppressed by setting the <a href=\"/docs/handbook/target-specification#logging\">logging target property</a> to <code class=\"language-text\">warn</code> or <code class=\"language-text\">error</code>.</p>\n</li>\n<li>\n<p><code class=\"language-text\">warning_print(format, ...)</code>: Use this for warning messages. These messages can be suppressed by setting the <a href=\"/docs/handbook/target-specification#logging\">logging target property</a> to <code class=\"language-text\">error</code>.</p>\n</li>\n<li>\n<p><code class=\"language-text\">error_print(format, ...)</code>: Use this for error messages. These messages are not suppressed by any <a href=\"/docs/handbook/target-specification#logging\">logging target property</a>.</p>\n</li>\n<li>\n<p><code class=\"language-text\">error_print_and_exit(format, ...)</code>: Use this for catastrophic errors.</p>\n</li>\n</ul>\n<p>In addition, a utility function is provided to register a function to redirect printed outputs:</p>\n<ul>\n<li><code class=\"language-text\">register_print_function(function)</code>: Register a function that will be used instead of <code class=\"language-text\">printf</code> to print messages generated by any of the above functions. The function should accept the same arguments as <code class=\"language-text\">printf</code>.</li>\n</ul>\n<h2 id=\"implementation-details\" style=\"position:relative;\"><a href=\"#implementation-details\" aria-label=\"implementation details permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementation Details</h2>\n<h3 id=\"included-libraries\" style=\"position:relative;\"><a href=\"#included-libraries\" aria-label=\"included libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Included Libraries</h3>\n<p>The generated code includes the following standard C libraries, so there is no need for a reactor definition to explicitly include them if they are needed:</p>\n<ul>\n<li>stdio.h</li>\n<li>stdlib.h</li>\n<li>string.h</li>\n<li>time.h</li>\n<li>errno.h</li>\n</ul>\n<p>In addition, the multithreaded implementation uses</p>\n<ul>\n<li>pthread.h</li>\n</ul>\n<h3 id=\"single-threaded-implementation\" style=\"position:relative;\"><a href=\"#single-threaded-implementation\" aria-label=\"single threaded implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single Threaded Implementation</h3>\n<p>The runtime library for the single-threaded implementation is in the following files:</p>\n<ul>\n<li>reactor.c</li>\n<li>reactor_common.c (included in the above using #include)</li>\n<li>pqueue.c</li>\n</ul>\n<p>Three header files provide the interfaces:</p>\n<ul>\n<li>reactor.h</li>\n<li>ctarget.h</li>\n<li>pqueue.h</li>\n</ul>\n<p>The strategy is to have two queues of pending accessor invocations, one that is sorted by timestamp (the <strong>event queue</strong>) and one that is sorted by priority (the <strong>reaction queue</strong>). Execution proceeds as follows:</p>\n<ol>\n<li>\n<p>At initialization, an event for each timer is put on the event queue and logical time is initialized to the current time, represented as the number of nanoseconds elapsed since January 1, 1970.</p>\n</li>\n<li>\n<p>At each logical time, pull all events from event queue that have the same earliest time stamp, find the reactions that these events trigger, and put them on the reaction queue. If there are no events on the event queue, then exit the program (unless the <code class=\"language-text\">--keepalive true</code> command-line argument is given).</p>\n</li>\n<li>\n<p>Wait until physical time matches or exceeds that earliest timestamp (unless the <code class=\"language-text\">--fast true</code> command-line argument is given). Then advance logical time to match that earliest timestamp.</p>\n</li>\n<li>\n<p>Execute reactions in order of priority from the reaction queue. These reactions may produce outputs, which results in more events getting put on the reaction queue. Those reactions are assured of having lower priority than the reaction that is executing. If a reaction calls <code class=\"language-text\">schedule()</code>, an event will be put on the event queue, not the reaction queue.</p>\n</li>\n<li>\n<p>When the reaction queue is empty, go to 2.</p>\n</li>\n</ol>\n<h3 id=\"multithreaded-implementation\" style=\"position:relative;\"><a href=\"#multithreaded-implementation\" aria-label=\"multithreaded implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multithreaded Implementation</h3>\n<p>The runtime library for the multithreaded implementation is in the following files:</p>\n<ul>\n<li>reactor_threaded.c</li>\n<li>reactor_common.c (included in the above using #include)</li>\n<li>pqueue.c</li>\n</ul>\n<p>The same two header files provide the interfaces:</p>\n<ul>\n<li>reactor.h</li>\n<li>pqueue.h</li>\n</ul>\n<p>The default number of worker threads is given by the <code class=\"language-text\">workers</code> argument in the <a href=\"/docs/handbook/target-specification#threading\">target</a> statement.\nThis can be overridden with the <code class=\"language-text\">--workers</code> <a href=\"#command-line-arguments\">command-line argument</a>.\nBy default, the number of workers will match the number of cores on the execution platform.</p>\n<p>Upon initialization, the main thread will create the specified number of worker threads.\nA good choice is for this number to match the number of available cores.\nExecution proceeds in a manner similar to the <a href=\"single-threaded-implementation\">single threaded implementation</a>\nexcept that the worker threads concurrently draw reactions from the reaction queue.\nThe execution algorithm ensures that no reaction executes until all reactions that it depends on that are also\non the reaction queue have executed at the current logical time.</p>","headings":[{"value":"The C Target Specification","depth":2},{"value":"The self Struct","depth":2},{"value":"Parameters and State Variables","depth":2},{"value":"Array Values for Parameters","depth":2},{"value":"Array Values for States","depth":2},{"value":"States and Parameters with Struct Values","depth":2},{"value":"Inputs and Outputs","depth":2},{"value":"Sending and Receiving Arrays and Structs","depth":2},{"value":"Dynamically Allocated Arrays","depth":2},{"value":"Mutable Inputs","depth":2},{"value":"String Types","depth":2},{"value":"Macros For Setting Output Values","depth":2},{"value":"Dynamically Allocated Structs","depth":2},{"value":"Time","depth":2},{"value":"Actions With Values","depth":2},{"value":"Schedule Functions","depth":2},{"value":"Stopping Execution","depth":2},{"value":"Log and Debug Information","depth":2},{"value":"Implementation Details","depth":2},{"value":"Included Libraries","depth":3},{"value":"Single Threaded Implementation","depth":3},{"value":"Multithreaded Implementation","depth":3}],"frontmatter":{"permalink":"/docs/handbook/c-reactors","title":"C Reactors","oneline":"Writing reactors using the C target in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Future Proof Package/Import System","oneline":"A future proof package and import system","permalink":"/docs/handbook/proof-import"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Future Proof Package/Import System","oneline":"A future proof package and import system","permalink":"/docs/handbook/proof-import"}}}},"pageContext":{"id":"3-c-reactors","slug":"/docs/handbook/c-reactors","repoPath":"/packages/documentation/copy/en/reference/C Reactors.md","lang":"en","modifiedTime":"2022-04-17T15:37:44.763Z"}},
    "staticQueryHashes": []}