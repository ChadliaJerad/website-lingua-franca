{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/deadlines",
    "result": {"data":{"markdownRemark":{"id":"14cd5452-2d0a-5b28-a72b-80e00294f1a8","excerpt":"$page-showing-target$ Lingua Franca includes a notion of a deadline, which is a constraint on the relation between logical time and physical time. Specificallyâ€¦","html":"<p>$page-showing-target$</p>\n<p>Lingua Franca includes a notion of a <strong>deadline</strong>, which is a constraint on the relation between logical time and physical time. Specifically, a program may specify that the invocation of a reaction must occur within some <em>physical</em> time interval of the <em>logical</em> time of the message. If a reaction is invoked at logical time 12 noon, for example, and the reaction has a deadline of one hour, then the reaction is required to be invoked before the physical-time clock of the execution platform reaches 1 PM. If the deadline is violated, then the specified deadline handler is invoked instead of the reaction. For example:</p>\n<p>$start(Deadline)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Deadline <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> d<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Produced if the deadline is violated.</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> d <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Normal reaction.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span> <span class=\"token lf_keywords\">deadline</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deadline violation detected.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> x<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">reactor</span> Deadline <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> d<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Produced if the deadline is violated.</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> d <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Normal reaction.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span> <span class=\"token lf_keywords\">deadline</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span>ms<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Deadline violation detected.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        d<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Deadline <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> d<span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> Produced <span class=\"token keyword\">if</span> the <span class=\"token lf_keywords\">deadline</span> <span class=\"token keyword\">is</span> violated<span class=\"token punctuation\">.</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> d <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Normal reaction.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span> <span class=\"token lf_keywords\">deadline</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deadline violation detected.\"</span><span class=\"token punctuation\">)</span>\n        d<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token lf_keywords\">target</span> TypeScript\n<span class=\"token lf_keywords\">reactor</span> Deadline <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token builtin\">number</span>\n    <span class=\"token lf_keywords\">output</span> d<span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token comment\">// Produced if the deadline is violated.</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> d <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Normal reaction.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span> <span class=\"token lf_keywords\">deadline</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deadline violation detected.\"</span><span class=\"token punctuation\">)</span>\n        d <span class=\"token operator\">=</span> x\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token constant\">WARNING</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">No</span> source file found<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">..</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>rs<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span><span class=\"token class-name\">Deadline</span><span class=\"token punctuation\">.</span>lf</code></pre></div>\n<p>$end(Deadline)$</p>\n<p>This reactor specifies a deadline of 10 milliseconds (this can be a parameter of the reactor). If the reaction to <code class=\"language-text\">x</code> is triggered later in physical time than 10 msec past the timestamp of <code class=\"language-text\">x</code>, then the second body of code is executed instead of the first. That second body of code has access to anything the first body of code has access to, including the input <code class=\"language-text\">x</code> and the output <code class=\"language-text\">d</code>. The output can be used to notify the rest of the system that a deadline violation occurred. This reactor can be tested as follows:</p>\n<p>$start(DeadlineTest)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> Deadline <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Deadline.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n    d <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> d<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">lf_nanosleep</span><span class=\"token punctuation\">(</span><span class=\"token function\">MSEC</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deadline reactor produced an output.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">Deadline</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Deadline.lf\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n    d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> d<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep_for</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Deadline reactor produced an output.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> Deadline <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Deadline.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span> <span class=\"token lf_keywords\">import</span> <span class=\"token lf_keywords\">time</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n    d <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> Deadline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        a<span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.02</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deadline reactor produced an output.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token lf_keywords\">target</span> TypeScript\n<span class=\"token keyword\">import</span> Deadline <span class=\"token keyword\">from</span> <span class=\"token string\">\"Deadline.lf\"</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a\n    d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Deadline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        d<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        actions<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>TimeValue<span class=\"token punctuation\">.</span><span class=\"token function\">zero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        d<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> later <span class=\"token operator\">=</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentPhysicalTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TimeValue<span class=\"token punctuation\">.</span><span class=\"token lf_keywords\">msecs</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            util<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentPhysicalTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> later<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Take time...</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deadline reactor produced an output.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token constant\">WARNING</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">No</span> source file found<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">..</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>rs<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span><span class=\"token class-name\">DeadlineTest</span><span class=\"token punctuation\">.</span>lf</code></pre></div>\n<p>$end(DeadlineTest)$</p>\n<img alt=\"Lingua Franca diagram\" src=\"/d4798b4ddf96c807f5fdb7ec7da9b6c5/DeadlineTest.svg\" width=\"500\">\n<p>Running this program will result in the following output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Normal reaction.\nDeadline violation detected.\nDeadline reactor produced an output.</code></pre></div>\n<p>The first reaction of the <code class=\"language-text\">Deadline</code> reactor does not violate the deadline, but the second does. Notice that the sleep in the $main$ reactor occurs <em>after</em> setting the output, but because of the deterministic semantics of LF, this does not matter. The actual value of an output cannot be known until every reaction that sets that output <em>completes</em> its execution. Since this reaction takes at least 20 msec to complete, the deadline is assured of being violated.</p>\n<p>Notice that the deadline is annotated in the diagram with a small clock symbol.</p>","headings":[],"frontmatter":{"permalink":"/docs/handbook/deadlines","title":"Deadlines","oneline":"Deadlines in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Superdense Time","oneline":"Superdense time in Lingua Franca.","permalink":"/docs/handbook/superdense-time"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Multiports and Banks","oneline":"Multiports and Banks of Reactors.","permalink":"/docs/handbook/multiports-and-banks"}}}},"pageContext":{"id":"1-deadlines","slug":"/docs/handbook/deadlines","repoPath":"/packages/documentation/copy/en/topics/Deadlines.md","previousID":"87fbdd2f-f348-5e23-8921-5fb303bcdd88","nextID":"69a14bb0-4b21-5bc0-b083-61c7c3454df8","lang":"en","modifiedTime":"2022-04-26T16:52:51.759Z"}},
    "staticQueryHashes": []}