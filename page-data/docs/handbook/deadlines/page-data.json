{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/deadlines",
    "result": {"data":{"markdownRemark":{"id":"14cd5452-2d0a-5b28-a72b-80e00294f1a8","excerpt":"$page-showing-target$ Lingua Franca includes a notion of a deadline, which is a constraint on the relation between logical time and physical time. Specificallyâ€¦","html":"<p>$page-showing-target$</p>\n<p>Lingua Franca includes a notion of a <strong>deadline</strong>, which is a constraint on the relation between logical time and physical time. Specifically, a program may specify that the invocation of a reaction must occur within some <em>physical</em> time interval of the <em>logical</em> time of the message. If a reaction is invoked at logical time 12 noon, for example, and the reaction has a deadline of one hour, then the reaction is required to be invoked before the physical-time clock of the execution platform reaches 1 PM. If the deadline is violated, then the specified deadline handler is invoked instead of the reaction. For example:</p>\n<p>$start(Deadline)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Deadline</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> d:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span><span class=\"source-lf\"> </span><span class=\"source-lf comment-line-double-dash-lflang\">// Produced if the deadline is violated.</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> d </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Normal reaction.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">deadline</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">10</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Deadline violation detected.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">d</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">x</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-pointer-access-cpp\">-&gt;</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">value</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Deadline</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> d:</span><span class=\"source-lf storage-type-primitive-cpp storage-type-built-in-primitive-cpp\">int</span><span class=\"source-lf\">;</span><span class=\"source-lf\"> </span><span class=\"source-lf comment-line-double-dash-lflang\">// Produced if the deadline is violated.</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> d </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Normal reaction.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">deadline</span><span class=\"source-lf\">(10ms) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Deadline violation detected.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">d</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">set</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-cpp\">*</span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">x</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">get</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Deadline</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> d; </span><span class=\"source-lf comment-line-double-dash-lflang\">// Produced if the deadline is violated.</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> d </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Normal reaction.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">deadline</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">10</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-py\">{=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Deadline violation detected.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">d</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python\">x</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">value</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">=}</span>\n<span class=\"source-lf\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span>\n<span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Deadline</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">input</span><span class=\"source-lf\"> x:</span><span class=\"source-lf storage-type-lflang\">number</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">output</span><span class=\"source-lf\"> d:</span><span class=\"source-lf storage-type-lflang\">number</span><span class=\"source-lf\"> </span><span class=\"source-lf comment-line-double-dash-lflang\">// Produced if the deadline is violated.</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(x) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> d </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Normal reaction.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-lflang\">deadline</span><span class=\"source-lf\">(</span><span class=\"source-lf constant-numeric-int-lflang\">10</span><span class=\"source-lf\"> </span><span class=\"source-lf constant-numeric-lflang\">msec</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Deadline violation detected.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">d</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">x</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">rs</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">Deadline</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<p>$end(Deadline)$</p>\n<p>This reactor specifies a deadline of 10 milliseconds (this can be a parameter of the reactor). If the reaction to <code>x</code> is triggered later in physical time than 10 msec past the timestamp of <code>x</code>, then the second body of code is executed instead of the first. That second body of code has access to anything the first body of code has access to, including the input <code>x</code> and the output <code>d</code>. The output can be used to notify the rest of the system that a deadline violation occurred. This reactor can be tested as follows:</p>\n<p>$start(DeadlineTest)$</p>\n<pre class=\"source-lf language-lf-c\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">C</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Deadline</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Deadline.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Deadline</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">, a </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">d</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">x</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_schedule</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c\">a</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_set</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c variable-other-object-access-cpp\">d</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-c variable-other-property-cpp\">x</span><span class=\"source-lf meta-embedded-block-c punctuation-separator-delimiter-comma-cpp\">,</span><span class=\"source-lf meta-embedded-block-c\"> </span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">lf_nanosleep</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">MSEC</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c constant-numeric-decimal-cpp\">20</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">d</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-c\">{=</span>\n<span class=\"source-lf meta-embedded-block-c\">        </span><span class=\"source-lf meta-embedded-block-c entity-name-function-call-cpp\">printf</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp\">Deadline reactor produced an output.</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp constant-character-escape-cpp\">\\n</span><span class=\"source-lf meta-embedded-block-c string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-c punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-c punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-c\">    </span><span class=\"source-lf meta-embedded-block-c\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-cpp\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Cpp</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Deadline</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Deadline.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a;</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Deadline</span><span class=\"source-lf\">();</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">, a </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">d</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-property-cpp\">x</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">set</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">a</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">schedule</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-cpp keyword-other-unit-user-defined-cpp\">ms</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-access-cpp\">d</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp variable-other-object-property-cpp\">x</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-dot-access-cpp\">.</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-member-cpp\">set</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-member-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">0</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-member-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-function-call-cpp\">this_thread</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-function-call-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp entity-name-function-call-cpp\">sleep_for</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-begin-bracket-round-function-call-cpp\">(</span><span class=\"source-lf meta-embedded-block-cpp constant-numeric-decimal-cpp\">20</span><span class=\"source-lf meta-embedded-block-cpp keyword-other-unit-user-defined-cpp\">ms</span><span class=\"source-lf meta-embedded-block-cpp punctuation-section-arguments-end-bracket-round-function-call-cpp\">)</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\"></span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">d</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-cpp\">{=</span>\n<span class=\"source-lf meta-embedded-block-cpp\">        </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">cout </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-begin-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp\">Deadline reactor produced an output.</span><span class=\"source-lf meta-embedded-block-cpp string-quoted-double-cpp punctuation-definition-string-end-cpp\">&quot;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp keyword-operator-bitwise-shift-cpp\">&lt;&lt;</span><span class=\"source-lf meta-embedded-block-cpp\"> </span><span class=\"source-lf meta-embedded-block-cpp entity-name-scope-resolution-cpp\">std</span><span class=\"source-lf meta-embedded-block-cpp punctuation-separator-namespace-access-cpp punctuation-separator-scope-resolution-cpp\">::</span><span class=\"source-lf meta-embedded-block-cpp\">endl</span><span class=\"source-lf meta-embedded-block-cpp punctuation-terminator-statement-cpp\">;</span>\n<span class=\"source-lf meta-embedded-block-cpp\">    </span><span class=\"source-lf meta-embedded-block-cpp\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-py\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">Python</span><span class=\"source-lf meta-targetspec-lflang\">;</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Deadline</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Deadline.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf\">;</span>\n<span class=\"source-lf keyword-control-lflang\">preamble</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-py\">{=</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py keyword-control-import-python\">import</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">time</span><span class=\"source-lf meta-embedded-block-py\"> =}</span>\n<span class=\"source-lf meta-embedded-block-py\">main</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">reactor</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py punctuation-definition-dict-begin-python\">{</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">logical</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">action</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py\">;</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py\">d</span><span class=\"source-lf meta-embedded-block-py\"> = </span><span class=\"source-lf meta-embedded-block-py\">new</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-generic-python\">Deadline</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py\">;</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-generic-python\">reaction</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">startup</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py invalid-illegal-annotation-python\">-&gt;</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">d</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">x</span><span class=\"source-lf meta-embedded-block-py punctuation-separator-element-python\">,</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py punctuation-definition-dict-begin-python\">{</span><span class=\"source-lf meta-embedded-block-py\">=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">d</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">x</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">0</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">a</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">schedule</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">0</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    =</span><span class=\"source-lf meta-embedded-block-py punctuation-definition-dict-end-python\">}</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-generic-python\">reaction</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">a</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py invalid-illegal-annotation-python\">-&gt;</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py\">d</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">x</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py punctuation-definition-dict-begin-python\">{</span><span class=\"source-lf meta-embedded-block-py\">=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">d</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-attribute-python\">x</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">set</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python constant-numeric-dec-python\">0</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py\">time</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-generic-python\">sleep</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python meta-function-call-arguments-python constant-numeric-float-python\">0.02</span><span class=\"source-lf meta-embedded-block-py meta-member-access-python meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    =</span><span class=\"source-lf meta-embedded-block-py punctuation-definition-dict-end-python\">}</span>\n<span class=\"source-lf meta-embedded-block-py\">    </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-generic-python\">reaction</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python\">d</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python punctuation-separator-period-python\">.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python meta-member-access-python meta-attribute-python\">d</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span><span class=\"source-lf meta-embedded-block-py\"> </span><span class=\"source-lf meta-embedded-block-py punctuation-definition-dict-begin-python\">{</span><span class=\"source-lf meta-embedded-block-py\">=</span>\n<span class=\"source-lf meta-embedded-block-py\">        </span><span class=\"source-lf meta-embedded-block-py meta-function-call-python support-function-builtin-python\">print</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-begin-python\">(</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-begin-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python\">Deadline reactor produced an output.</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python meta-function-call-arguments-python string-quoted-single-python punctuation-definition-string-end-python\">&quot;</span><span class=\"source-lf meta-embedded-block-py meta-function-call-python punctuation-definition-arguments-end-python\">)</span>\n<span class=\"source-lf meta-embedded-block-py\">    =</span><span class=\"source-lf meta-embedded-block-py punctuation-definition-dict-end-python\">}</span>\n<span class=\"source-lf meta-embedded-block-py punctuation-definition-dict-end-python\">}</span>\n</pre>\n<pre class=\"source-lf language-lf-ts\"><span class=\"source-lf meta-targetspec-lflang keyword-control-lflang\">target</span><span class=\"source-lf meta-targetspec-lflang\"> </span><span class=\"source-lf meta-targetspec-lflang constant-language-lflang\">TypeScript</span>\n<span class=\"source-lf keyword-control-import-lflang\">import</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Deadline</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-control-import-lflang\">from</span><span class=\"source-lf\"> </span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span><span class=\"source-lf string-quoted-double-lflang\">Deadline.lf</span><span class=\"source-lf string-quoted-double-lflang\">&quot;</span>\n<span class=\"source-lf storage-modifier-lflang\">main</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">reactor</span><span class=\"source-lf\"> {</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf storage-modifier-lflang\">logical</span><span class=\"source-lf\"> </span><span class=\"source-lf storage-modifier-lflang\">action</span><span class=\"source-lf\"> a</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-lflang\">=</span><span class=\"source-lf\"> </span><span class=\"source-lf keyword-operator-new-lflang\">new</span><span class=\"source-lf\"> </span><span class=\"source-lf entity-name-type-lflang\">Deadline</span><span class=\"source-lf\">()</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf support-variable-lflang\">startup</span><span class=\"source-lf\">) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\">, a </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-object-ts\">d</span><span class=\"source-lf meta-embedded-block-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts support-variable-property-dom-ts\">x</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">0</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-ts\">actions</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-property-ts\">a</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts entity-name-function-ts\">schedule</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-ts\">TimeValue</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts entity-name-function-ts\">zero</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-separator-comma-ts\">,</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-language-null-ts\">null</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(a) </span><span class=\"source-lf keyword-operator-lflang\">-&gt;</span><span class=\"source-lf\"> </span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">x</span><span class=\"source-lf\"> </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts variable-other-object-ts\">d</span><span class=\"source-lf meta-embedded-block-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts support-variable-property-dom-ts\">x</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts constant-numeric-decimal-ts\">0</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts keyword-control-loop-ts\">for</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts storage-type-ts\">const</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts meta-definition-variable-ts variable-other-constant-ts\">later</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-var-single-variable-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts keyword-operator-assignment-ts\">=</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts entity-name-function-ts\">getCurrentPhysicalTime</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts support-function-dom-ts\">add</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts variable-other-object-ts\">TimeValue</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-function-call-ts entity-name-function-ts\">msecs</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts constant-numeric-decimal-ts\">20</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts meta-var-expr-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span>\n<span class=\"source-lf meta-embedded-block-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts variable-other-object-ts\">util</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts entity-name-function-ts\">getCurrentPhysicalTime</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts keyword-operator-relational-ts\">&lt;</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts variable-other-readwrite-ts\">later</span><span class=\"source-lf meta-embedded-block-ts punctuation-terminator-statement-ts\">;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span><span class=\"source-lf meta-embedded-block-ts\"> </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">{</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-whitespace-comment-leading-ts\">            </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts comment-line-double-slash-ts punctuation-definition-comment-ts\">//</span><span class=\"source-lf meta-embedded-block-ts meta-block-ts comment-line-double-slash-ts\"> Take time...</span>\n<span class=\"source-lf meta-embedded-block-ts meta-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-block-ts punctuation-definition-block-ts\">}</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">    </span><span class=\"source-lf keyword-control-lflang\">reaction</span><span class=\"source-lf\">(</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">d</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">d</span><span class=\"source-lf\">) </span><span class=\"source-lf meta-embedded-block-ts\">{=</span>\n<span class=\"source-lf meta-embedded-block-ts\">        </span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-class-console-ts\">console</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts punctuation-accessor-ts\">.</span><span class=\"source-lf meta-embedded-block-ts meta-function-call-ts support-function-console-ts\">log</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">(</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-begin-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts\">Deadline reactor produced an output.</span><span class=\"source-lf meta-embedded-block-ts string-quoted-double-ts punctuation-definition-string-end-ts\">&quot;</span><span class=\"source-lf meta-embedded-block-ts meta-brace-round-ts\">)</span>\n<span class=\"source-lf meta-embedded-block-ts\">    </span><span class=\"source-lf meta-embedded-block-ts\">=}</span>\n<span class=\"source-lf\">}</span>\n<span class=\"source-lf\"></span>\n</pre>\n<pre class=\"source-lf language-lf-rs\"><span class=\"source-lf\">WARNING: No source file found: </span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">code</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">rs</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf\">src</span><span class=\"source-lf keyword-operator-lflang\">/</span><span class=\"source-lf variable-other-constant-reactorinstance-lflang\">DeadlineTest</span><span class=\"source-lf keyword-operator-lflang\">.</span><span class=\"source-lf variable-other-lflang\">lf</span>\n</pre>\n<p>$end(DeadlineTest)$</p>\n<img alt=\"Lingua Franca diagram\" src=\"/d4798b4ddf96c807f5fdb7ec7da9b6c5/DeadlineTest.svg\" width=\"500\">\n<p>Running this program will result in the following output:</p>\n<pre class=\"source-lf language-text\">Normal reaction.\nDeadline violation detected.\nDeadline reactor produced an output.</pre>\n<p>The first reaction of the <code>Deadline</code> reactor does not violate the deadline, but the second does. Notice that the sleep in the $main$ reactor occurs <em>after</em> setting the output, but because of the deterministic semantics of LF, this does not matter. The actual value of an output cannot be known until every reaction that sets that output <em>completes</em> its execution. Since this reaction takes at least 20 msec to complete, the deadline is assured of being violated.</p>\n<p>Notice that the deadline is annotated in the diagram with a small clock symbol.</p>","headings":[],"frontmatter":{"permalink":"/docs/handbook/deadlines","title":"Deadlines","oneline":"Deadlines in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Superdense Time","oneline":"Superdense time in Lingua Franca.","permalink":"/docs/handbook/superdense-time"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Multiports and Banks","oneline":"Multiports and Banks of Reactors.","permalink":"/docs/handbook/multiports-and-banks"}}}},"pageContext":{"id":"1-deadlines","slug":"/docs/handbook/deadlines","repoPath":"/packages/documentation/copy/en/topics/Deadlines.md","previousID":"87fbdd2f-f348-5e23-8921-5fb303bcdd88","nextID":"69a14bb0-4b21-5bc0-b083-61c7c3454df8","lang":"en","modifiedTime":"2022-05-07T16:02:59.533Z"}},
    "staticQueryHashes": []}