{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/write-reactor-py",
    "result": {"data":{"markdownRemark":{"id":"a0fd6d12-d649-5ba5-b798-d891c6712c48","excerpt":"In the Python reactor target for Lingua Franca, reactions are written in Python. The user-written reactors are then generated into a Python 3 script that can be…","html":"<p>In the Python reactor target for Lingua Franca, reactions are written in Python. The user-written reactors are then generated into a Python 3 script that can be executed on several platforms. The Python target has been tested on Linux, MacOS, and Windows. To facilitate efficient and fast execution of Python code, the generated program relies on a C extension to facilitate Lingua Franca APIs such as <code class=\"language-text\">set</code> and <code class=\"language-text\">schedule</code>. To learn more about the structure of the generated Python program, see <a href=\"#implementation-details\">Implementation Details</a>.</p>\n<p>Python reactors can bring the vast library of scientific modules that exist for Python into a Lingua Franca program. Moreover, since the Python reactor target is based on a fast and efficient C runtime library, Lingua Franca programs can execute much faster than native equivalent Python programs in many cases. Finally, interoperability with C reactors is planned for the future.</p>\n<blockquote>\n<p>:spiral_notepad: In comparison to the C reactor target, the Python target can be up to an order of magnitude slower. However, depending on the type of application and the implementation optimizations in Python, you can achieve an on-par performance to the C target in many applications.</p>\n</blockquote>\n<h2 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p>First, install Python 3 on your machine. See <a href=\"https://wiki.python.org/moin/BeginnersGuide/Download\">downloading Python</a>.</p>\n<blockquote>\n<p>:spiral_notepad: The Python target requires a C implementation of Python (nicknamed CPython). This is what you will get if you use the above link, or with most of the alternative Python installations such as Anaconda. See <a href=\"https://www.python.org/download/alternatives/\">this</a> for more details.</p>\n</blockquote>\n<p>The Python reactor target relies on <code class=\"language-text\">pip</code> and <code class=\"language-text\">setuptools</code> to be able to compile and install a <a href=\"https://docs.python.org/3/extending/extending.html\">Python C extension</a> for each LF program. To install <code class=\"language-text\">pip3</code>, you can follow instructions <a href=\"https://pip.pypa.io/en/stable/installation/\">here</a>.\n<code class=\"language-text\">setuptools</code> can be installed using <code class=\"language-text\">pip3</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> setuptools</code></pre></div>\n<blockquote>\n<p>:spiral_notepad: A <a href=\"https://docs.python.org/3/extending/extending.html\">Python C extension</a> is currently generated for each Lingua Franca program. To ensure cross-compatibility across multiple platforms, this extension is installed in the user space once code generation is finished (see <a href=\"#implementation-details\">Implementation Details</a>). This extension module will have the name LinguaFranca[your_LF_program_name]. There is a handy script <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/uninstallAllLinguaFrancaTestPackages.sh\">here</a> that can uninstall all extension modules that are installed automatically by Lingua Franca tools (such as <code class=\"language-text\">lfc</code>).</p>\n</blockquote>\n<h2 id=\"a-minimal-example\" style=\"position:relative;\"><a href=\"#a-minimal-example\" aria-label=\"a minimal example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A Minimal Example</h2>\n<p>A “Hello World” reactor for the target looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">target Python<span class=\"token punctuation\">;</span>\nmain reactor Minimal <span class=\"token punctuation\">{</span>\n    reaction<span class=\"token punctuation\">(</span>startup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">startup</code> trigger causes the reaction to execute at the logical start time of the program. This program can be found in a file called <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/Minimal.lf\">Minimal.lf</a> in the [test directory], where you can also find quite a few more interesting examples. If you compile this using the <code class=\"language-text\">lfc</code> <a href=\"https://github.com/lf-lang/lingua-franca/wiki/downloading-and-building#Command-Line-Tools\">command-line compiler</a> or the [Eclipse-base IDE], then a generated file called <code class=\"language-text\">Minimal.py</code> plus supporting files will be put into a subdirectory called <code class=\"language-text\">src-gen/Minimal</code>. If you are in the test directory, you can run the generated <code class=\"language-text\">Minimal.py</code> by running the following code in a shell:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python3 src-gen/Minimal/Minimal.py</code></pre></div>\n<p>The resulting output should look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">---- Start execution at <span class=\"token function\">time</span> Mon Oct <span class=\"token number\">12</span> <span class=\"token number\">14</span>:31:00 <span class=\"token number\">2020</span>\n---- plus <span class=\"token number\">213090100</span> nanoseconds.\nHello World.\n---- Elapsed logical <span class=\"token function\">time</span> <span class=\"token punctuation\">(</span>in nsec<span class=\"token punctuation\">)</span>: <span class=\"token number\">0</span>\n---- Elapsed physical <span class=\"token function\">time</span> <span class=\"token punctuation\">(</span>in nsec<span class=\"token punctuation\">)</span>: <span class=\"token number\">96,100</span></code></pre></div>\n<h2 id=\"the-python-target-specification\" style=\"position:relative;\"><a href=\"#the-python-target-specification\" aria-label=\"the python target specification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Python Target Specification</h2>\n<p>To have Lingua Franca generate Python code, start your <code class=\"language-text\">.lf</code> file with the following target specification:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target Python;</code></pre></div>\n<p>A Python target specification may optionally specify any of the <a href=\"\">standard parameters</a> (except for flags) that are supported by all targets.</p>\n<p>For example, for the Python target, in a source file named <code class=\"language-text\">Foo.lf</code>, you might specify:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target Python {\n    fast: true,\n    timeout: 10 secs\n};</code></pre></div>\n<p>The <code class=\"language-text\">fast</code> option given above specifies to execute the file as fast as possible, ignoring timing delays. This is achieved by not waiting for physical time to match logical time.</p>\n<p>The <code class=\"language-text\">timeout</code> option specifies to stop after 10 seconds of logical time have elapsed.</p>\n<p>These specify the <em>default</em> behavior of the generated code, the behavior it will exhibit if you give no command-line option. FIXME: command-line options are not supported yet.</p>\n<blockquote>\n<p>⚠ The LFC lexer does not support single-quoted strings in Python. This limitation also applies to target property values.</p>\n</blockquote>\n<h2 id=\"command-line-arguments\" style=\"position:relative;\"><a href=\"#command-line-arguments\" aria-label=\"command line arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Command-Line Arguments</h2>\n<p>The Python reactor target currently does not support dynamically changing arguments at runtime.</p>\n<h2 id=\"imports\" style=\"position:relative;\"><a href=\"#imports\" aria-label=\"imports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Imports</h2>\n<p>The <a href=\"Language-Specification#import-statement\">import statement</a> can be used to share reactor definitions across several applications. Suppose for example that we modify the above Minimal.lf program as follows and store this in a file called <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/HelloWorld.lf\">HelloWorld.lf</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">target Python<span class=\"token punctuation\">;</span>\nreactor HelloWorld <span class=\"token punctuation\">{</span>\n\tstate success<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\treaction<span class=\"token punctuation\">(</span>startup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World.\"</span><span class=\"token punctuation\">)</span>\n\t\tself<span class=\"token punctuation\">.</span>success <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nmain reactor HelloWorldTest <span class=\"token punctuation\">{</span>\n\ta <span class=\"token operator\">=</span> new HelloWorld<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This can be compiled and run, and its behavior will be identical to the version above. But now, this can be imported into another reactor definition as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target Python;\nimport HelloWorld.lf;\nmain reactor TwoHelloWorlds {\n\ta = new HelloWorld();\n\tb = new HelloWorld();\n}</code></pre></div>\n<p>This will create two instances of the HelloWorld reactor, and when executed, will print “Hello World” twice.</p>\n<blockquote>\n<p>:spiral_notepad: In the above example, the order in which the two reactions are invoked is undefined because there is no causal relationship between them.</p>\n</blockquote>\n<p>A more interesting illustration of imports can be found in the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/Import.lf\">Import.lf</a> test case in the <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/test/Python\">test directory</a>.</p>\n<h2 id=\"preamble\" style=\"position:relative;\"><a href=\"#preamble\" aria-label=\"preamble permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preamble</h2>\n<p>Reactions may contain arbitrary Python code, but often it is convenient for that code to use external packages and modules or to share class and method definitions. For either purpose, a reactor may include a preamble section. For example, the following reactor uses the <code class=\"language-text\">platform</code> module to print the platform information and a defined method to add 42 to an integer:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">main reactor Preamble <span class=\"token punctuation\">{</span>\n\tpreamble <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n\t\t<span class=\"token keyword\">import</span> platform\n\t\t<span class=\"token keyword\">def</span> <span class=\"token function\">add_42</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">42</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\ttimer t<span class=\"token punctuation\">;</span>\n\treaction<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n\t\ts <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span>\n\t\ti <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Converted string {:s} to int {:d}.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"42 plus 42 is \"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>add_42<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your platform is \"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>On a Linux machine, this will print:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Converted string <span class=\"token number\">42</span> to int <span class=\"token number\">42</span>.\n<span class=\"token number\">42</span> plus <span class=\"token number\">42</span> is <span class=\"token number\">84</span>\nYour platform is Linux</code></pre></div>\n<p>By putting import in the <strong>preamble</strong>, the module becomes available in all reactions of this reactor using the self modifier.</p>\n<blockquote>\n<p>:spiral_notepad: Preambles will be put in the generated Python class for the given reactor, and thus is part of the instance of the reactor (and cannot be shared between different instantiations of the reactor). For more information about implementation details of the Python target, see <a href=\"#implementation-details\">Implementation Details</a>.</p>\n</blockquote>\n<p>Alternatively, top level preambles could be used that don’t belong to any particular reactor. These preambles can be used for functions such as import. The following example shows importing the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/include/hello.py\">hello</a> module:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">target Python <span class=\"token punctuation\">{</span>\n    files<span class=\"token punctuation\">:</span> include<span class=\"token operator\">/</span>hello<span class=\"token punctuation\">.</span>py\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\npreamble <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n<span class=\"token keyword\">import</span> hello\n<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice the usage of the <code class=\"language-text\">files</code> target property to move the <code class=\"language-text\">hello.py</code> module located in the <code class=\"language-text\">include</code> folder of the test directory into the working directory (located in <code class=\"language-text\">src-gen/NAME</code>).</p>\n<h2 id=\"reactions\" style=\"position:relative;\"><a href=\"#reactions\" aria-label=\"reactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reactions</h2>\n<p><a href=\"https://github.com/lf-lang/lingua-franca/wiki/Language-Specification#reaction-declaration\">Recall</a> that a reaction is defined within a reactor using the following syntax:</p>\n<blockquote>\n<p><strong>reaction</strong>(<em>triggers</em>) <em>uses</em> -> <em>effects</em> {=<br/>\n   … target language code … <br/>\n=}</p>\n</blockquote>\n<p>In this section, we explain how <strong>triggers</strong>, <strong>uses</strong>, and <strong>effects</strong> variables work in the Python target.</p>\n<h2 id=\"types\" style=\"position:relative;\"><a href=\"#types\" aria-label=\"types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types</h2>\n<p>In the Python target, reactor elements like inputs, outputs, actions, parameters, and state variables are not typed. This effectively allows for any valid Python object to be passed on these elements. For more details and examples on using various Python object types, see <a href=\"#sending-and-receiving-objects\">Sending and Receiving Objects</a>.</p>\n<h3 id=\"inputs-and-outputs\" style=\"position:relative;\"><a href=\"#inputs-and-outputs\" aria-label=\"inputs and outputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inputs and Outputs</h3>\n<p>In the body of a reaction in the Python target, the value of an in put is obtained using the syntax <code class=\"language-text\">name.value</code>, where <code class=\"language-text\">name</code> is the name of the input port. To determine whether an input is present, use <code class=\"language-text\">name.is_present</code>. For example, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/Determinism.lf\">Determinism.lf</a> test case in the <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/test/Python\">test directory</a> includes the following reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">reactor Destination <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">input</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">input</span> y<span class=\"token punctuation\">;</span>\n    reaction<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        sm <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span>is_present<span class=\"token punctuation\">:</span>\n            sm <span class=\"token operator\">+=</span> x<span class=\"token punctuation\">.</span>value\n        <span class=\"token keyword\">if</span> y<span class=\"token punctuation\">.</span>is_present<span class=\"token punctuation\">:</span>\n            sm <span class=\"token operator\">+=</span> y<span class=\"token punctuation\">.</span>value\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received \"</span><span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> sm <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"FAILURE: Expected 2.\\n\"</span><span class=\"token punctuation\">)</span>\n            exit<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The reaction refers to the input values <code class=\"language-text\">x.value</code> and <code class=\"language-text\">y.value</code> and tests for their presence by referring to the variables <code class=\"language-text\">x.is_present</code> and <code class=\"language-text\">y.is_present</code>. If a reaction is triggered by just one input, then normally it is not necessary to test for its presence; it will always be present. But in the above example, there are two triggers, so the reaction has no assurance that both will be present.</p>\n<p>Inputs declared in the <strong>uses</strong> part of the reaction do not trigger the reaction. Consider the following modification to the above reaction:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">reaction<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n    sm <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">if</span> y<span class=\"token punctuation\">.</span>is_present<span class=\"token punctuation\">:</span>\n        sm <span class=\"token operator\">+=</span> y<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received \"</span><span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is no longer necessary to test for the presence of <code class=\"language-text\">x</code> because that is the only trigger. The input <code class=\"language-text\">y</code>, however, may or may not be present at the logical time that this reaction is triggered. Hence, the code must test for its presence.</p>\n<p>The <strong>effects</strong> portion of the reaction specification can include outputs and actions. Actions will be described below. Outputs are set using a <code class=\"language-text\">SET</code> macro. For example, we can further modify the above example as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">output z<span class=\"token punctuation\">;</span>\nreaction<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> y <span class=\"token operator\">-</span><span class=\"token operator\">></span> z <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n    sm <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">if</span> y<span class=\"token punctuation\">.</span>is_present<span class=\"token punctuation\">:</span>\n        sm <span class=\"token operator\">+=</span> y<span class=\"token punctuation\">.</span>value\n    z<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">set</code> function on an output port will perform the following operation:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">z.value = sm\nz.is_present = True</code></pre></div>\n<p>The <code class=\"language-text\">set</code> function can be used to set any valid Python object. For more information, see <a href=\"#sending-and-receiving-objects\">Sending and Receiving Objects</a>.</p>\n<p>If an output gets set more than once at any logical time, downstream reactors will see only the <em>final</em> value that is set. Since the order in which reactions of a reactor are invoked at a logical time is deterministic, and whether inputs are present depends only on their timestamp, the final value set for an output will also be deterministic.</p>\n<p>An output may even be set in different reactions of the same reactor at the same logical time. In this case, one reaction may wish to test whether the previously invoked reaction has set the output. It can check <code class=\"language-text\">name.is_present</code> to determine whether the output has been set. For example, the following reactor (see <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/TestForPreviousOutput.lf\">TestForPreviousOutput.lf</a>) will always produce the output 42:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">reactor Source <span class=\"token punctuation\">{</span>\n    output out<span class=\"token punctuation\">;</span>\n    preamble <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">import</span> random\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n    reaction<span class=\"token punctuation\">(</span>startup<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\"># Set a seed for random number generation based on the current time.</span>\n        self<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># Randomly produce an output or not.</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    reaction<span class=\"token punctuation\">(</span>startup<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> out<span class=\"token punctuation\">.</span>is_present<span class=\"token punctuation\">:</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> out<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first reaction may or may not set the output to 21. The second reaction doubles the output if it has been previously produced and otherwise produces 42.</p>\n<h3 id=\"using-state-variables\" style=\"position:relative;\"><a href=\"#using-state-variables\" aria-label=\"using state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using State Variables</h3>\n<p>A reactor may declare state variables, which become properties of each instance of the reactor. For example, the following reactor (see <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/lib/Count.lf\">Count.lf</a>) will produce the output sequence 1, 2, 3, … :</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">reactor Count <span class=\"token punctuation\">{</span>\n    state count<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    output out<span class=\"token punctuation\">;</span>\n    timer t<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reaction<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The declaration on the second line gives the variable the name “count”, and initializes its value to 1.</p>\n<p>The initial value is the expression enclosed within the parentheses. It may be any <a href=\"Language-Specification.md#appendix-lf-expressions\">LF expression</a>, including an integer like seen above. LF supports only simple expression forms, if you need an arbitrary Python expression, you can enclose it within the Python-code delimiters <code class=\"language-text\">{= ... =}</code> (see example below).</p>\n<p>In the body of the reaction, the state variable is referenced using the syntax <code class=\"language-text\">self.count</code>. Here, <code class=\"language-text\">self</code> is a keyword that refers to the generated reactor class in Python and contains all the instance-specific data associated with an instance of the reactor. For more information regarding the implementation details of the Python target, see <a href=\"#implementation-details\">Implementation Details</a>. Since each instance of a reactor has its own state variables, these variables are carried in the self object.</p>\n<p>In certain cases, such as when more control is needed for initialization of certain class objects, this method might be preferable. Nonetheless, the code delimiters <code class=\"language-text\">{= ... =}</code> can also also be used. The following example, taken from <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/StructAsState.lf\">StructAsState.lf</a> demonstrates this usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">main reactor StructAsState <span class=\"token punctuation\">{</span>\n    preamble <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">class</span> <span class=\"token class-name\">hello</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n                self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value    \n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    state s <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>hello<span class=\"token punctuation\">(</span><span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reaction<span class=\"token punctuation\">(</span>startup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State s.name='{:s}', value={:d}.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">:</span>\n            sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"FAILED: Expected 42.\\n\"</span><span class=\"token punctuation\">)</span>\n            exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that a class <code class=\"language-text\">hello</code> is defined in the preamble. The state variable <code class=\"language-text\">s</code> is then initialized to an instance of <code class=\"language-text\">hello</code> constructed within the <code class=\"language-text\">{= ... =}</code> delimiters.</p>\n<p>State variables may be initialized to lists or tuples without requiring <code class=\"language-text\">{==}</code> delimiters. The following illustrates the difference:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">target Python<span class=\"token punctuation\">;</span>\nmain reactor Foo <span class=\"token punctuation\">{</span>\n    state a_tuple<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    state a_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reaction<span class=\"token punctuation\">(</span>startup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\"># will print \"&lt;class 'tuple'> != &lt;class 'list'>\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0} != {1}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>a_tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>a_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In Python, tuples are immutable, while lists can be modified. Be aware also that the syntax for declaring tuples in the Python target is the same syntax as to declare an array in the C target, so the immutability might be a surprise.</p>\n<h3 id=\"using-parameters\" style=\"position:relative;\"><a href=\"#using-parameters\" aria-label=\"using parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Parameters</h3>\n<p>Reactor parameters are also referenced in the Python code using the <code class=\"language-text\">self</code> object. The <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/Stride.lf\">Stride.lf</a> example modifies the above <code class=\"language-text\">Count</code> reactor so that its stride is a parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">target Python<span class=\"token punctuation\">;</span>\nreactor Count<span class=\"token punctuation\">(</span>stride<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state count<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    output y<span class=\"token punctuation\">;</span>\n    timer t<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> msec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reaction<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        y<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>stride\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nreactor Display <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">input</span> x<span class=\"token punctuation\">;</span>\n    state expected<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> <span class=\"token keyword\">for</span> testing<span class=\"token punctuation\">.</span>\n    reaction<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received: \"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!=</span> self<span class=\"token punctuation\">.</span>expected<span class=\"token punctuation\">:</span>\n            sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"ERROR: Expected {:d}.\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>expected <span class=\"token operator\">+=</span> <span class=\"token number\">2</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nmain reactor Stride <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> new Count<span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    d <span class=\"token operator\">=</span> new Display<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The second line defines the <code class=\"language-text\">stride</code> parameter and gives its initial value. As with state variables, types are not allowed. The initial value can be alternatively put in <code class=\"language-text\">{= ... =}</code> if necessary. The parameter is referenced in the reaction with the syntax <code class=\"language-text\">self.stride</code>.</p>\n<p>When the reactor is instantiated, the default parameter value can be overridden. This is done in the above example near the bottom with the line:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">c = new Count(stride = 2);</code></pre></div>\n<p>If there is more than one parameter, use a comma-separated list of assignments.</p>\n<p>Like state variables, parameters can have list or tuple values. In the following example, the parameter <code class=\"language-text\">sequence</code> has as default value the list <code class=\"language-text\">[0, 1, 2]</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">reactor Source<span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    output out<span class=\"token punctuation\">;</span>\n    state count<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    logical action <span class=\"token builtin\">next</span><span class=\"token punctuation\">;</span>\n    reaction<span class=\"token punctuation\">(</span>startup<span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> out<span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sequence<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>count<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That default value can be overridden when instantiating the reactor using a similar syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">s = new Source(sequence = [1, 2, 3, 4]);</code></pre></div>\n<p>Notice that as any ordinary Python list, <code class=\"language-text\">len(self.sequence)</code> has been used in the code to deduce the length of the list.</p>\n<p>In the above example, the <a href=\"https://github.com/lf-lang/lingua-franca/wiki/Language-Specification#action-declaration\"><strong>logical action</strong></a> named <code class=\"language-text\">next</code> and the <code class=\"language-text\">schedule</code> function are explained below in <a href=\"#scheduling-delayed-reactions\">Scheduling Delayed Reactions</a>; here, they are used simply to repeat the reaction until all elements of the array have been sent.</p>\n<h3 id=\"sending-and-receiving-objects\" style=\"position:relative;\"><a href=\"#sending-and-receiving-objects\" aria-label=\"sending and receiving objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sending and Receiving Objects</h3>\n<p>You can define your own data types in Python and send and receive those. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/StructAsType.lf\">StructAsType</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target Python {files: include/hello.py};\n\npreamble {=\nimport hello\n=}\n\nreactor Source {\n    output out;\n    \n    reaction(startup) -> out {=\n        temp = hello.hello(\"Earth\", 42)\n        out.set(temp)\n    =}\n}</code></pre></div>\n<p>The top-level preamble has imported the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/include/hello.py\">hello</a> module, which contains the following class:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value  </code></pre></div>\n<p>In the reaction to <strong>startup</strong>, the reactor has created an instance object of this class (as local variable named <code class=\"language-text\">temp</code>) and passed it downstream using the <code class=\"language-text\">set</code> method on output port <code class=\"language-text\">out</code>.</p>\n<p>Alternatively, you can forego the variable and pass an instance object of the class directly to the port value, as is used in the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/StructAsTypeDirect.lf\">StructAsTypeDirect</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">reactor Source <span class=\"token punctuation\">{</span>\n    output out<span class=\"token punctuation\">;</span>\n    reaction<span class=\"token punctuation\">(</span>startup<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> hello<span class=\"token punctuation\">.</span>hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        out<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Earth\"</span>\n        out<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The call to the <code class=\"language-text\">set</code> function is necessary to inform downstream reactors that the class object has a new value. In short, the <code class=\"language-text\">set</code> method is defined as follows:</p>\n<blockquote>\n<p><strong>.set</strong><em>(value)</em>; Set the specified output (or input of a contained reactor) to the specified value. This value can be any Python object (including None and objects of type Any). The value is copied and therefore the variable carrying the value can be subsequently modified without changing the output.</p>\n</blockquote>\n<p>A reactor receiving the class object message can take advantage of Python’s duck typing and directly access the object:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">reactor Print<span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">input</span> _in<span class=\"token punctuation\">;</span>\n    reaction<span class=\"token punctuation\">(</span>_in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received: name = {:s}, value = {:d}\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>_in<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> \n                                                             _in<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>:spiral_notepad: The <code class=\"language-text\">hello</code> module has been imported using a top-level preamble, therefore, the contents of the module are available to all reactors defined in the current Lingua Franca file (similar situation arises if the <code class=\"language-text\">hello</code> class itself was in the top-level preamble).</p>\n</blockquote>\n<h2 id=\"timed-behavior\" style=\"position:relative;\"><a href=\"#timed-behavior\" aria-label=\"timed behavior permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Timed Behavior</h2>\n<p>Timers are specified exactly as in the <a href=\"Language-Specification#timer-declaration\">Lingua Franca language specification</a>. When working with time in the Python code body of a reaction, however, you will need to know a bit about its internal representation.</p>\n<p>In the Python target, similar to the C target, the value of a time instant or interval is an integer specifying a number of nanoseconds. An instant is the number of nanoseconds that have elapsed since January 1, 1970. An interval is the difference between two instants. When an LF program starts executing, logical time is (normally) set to the instant provided by the operating system (on some embedded platforms without real-time clocks, it will be set to zero instead).</p>\n<p>Time in the Python target is an <code class=\"language-text\">int</code>, which is unbounded. For better clarity, two derived types are defined in <code class=\"language-text\">LinguaFrancaBase</code>, <code class=\"language-text\">instant_t</code> and <code class=\"language-text\">interval_t</code>, which you can use for time instants and intervals respectively. These are both equivalent to <code class=\"language-text\">int</code>, but using those types will insulate your code against changes and platform-specific customizations.</p>\n<p>Lingua Franca uses a superdense model of time. A reaction is invoked at a logical <strong>Tag</strong>, an object consists of a <code class=\"language-text\">time</code> value (an int) and a <code class=\"language-text\">microstep</code> value (an unsigned int). The tag is guaranteed to not increase during the execution of a reaction.  Outputs produced by a reaction have the same tag as the inputs, actions, or timers that trigger the reaction, and hence are <strong>logically simultaneous</strong>.</p>\n<p><code class=\"language-text\">Tag</code>s can be initialized using <code class=\"language-text\">Tag(time=some_number, microstep=some_other_number)</code>.</p>\n<p>The functions for working with time are defined in <a href=\"https://github.com/lf-lang/reactor-c-py/blob/main/lib/pythontarget.c#L971\">pythontarget.c</a>.  The most useful functions are:</p>\n<ul>\n<li><code class=\"language-text\">get_current_tag() -> Tag</code>: Returns a Tag instance of the current tag at which this reaction has been invoked.</li>\n<li><code class=\"language-text\">get_logical_time() -> int</code>: Get the current logical time (the first part of the current tag).</li>\n<li><code class=\"language-text\">get_microstep() -> unsigned int</code>: Get the current microstep (the second part of the current tag).</li>\n<li><code class=\"language-text\">get_elapsed_logical_time() -> int</code>: Get the logical time elapsed since program start.</li>\n<li><code class=\"language-text\">compare_tags(Tag, Tag) -> int</code>: Compare two <code class=\"language-text\">Tag</code> instances, returning -1, 0, or 1 for less than, equal, and greater than. <code class=\"language-text\">Tag</code>s can also be compared using rich comparators (ex. <code class=\"language-text\">&lt;</code>, <code class=\"language-text\">></code>, <code class=\"language-text\">==</code>), which returns <code class=\"language-text\">True</code> or <code class=\"language-text\">False</code>.</li>\n</ul>\n<p>There are also some useful functions for accessing physical time:</p>\n<ul>\n<li><code class=\"language-text\">get_physical_time() -> int</code>: Get the current physical time.</li>\n<li><code class=\"language-text\">get_elapsed_physical_time() -> int</code>: Get the physical time elapsed since program start.</li>\n<li><code class=\"language-text\">get_start_time() -> int</code>: Get the starting physical and logical time.</li>\n</ul>\n<p>The last of these is both a physical and logical time because, at the start of execution, the starting logical time is set equal to the current physical time as measured by a local clock.</p>\n<p>A reaction can examine the current logical time (which is constant during the execution of the reaction). For example, consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/GetTime.lf\">GetTime.lf</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">main reactor GetTime <span class=\"token punctuation\">{</span>\n    timer t<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reaction<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        logical <span class=\"token operator\">=</span> get_logical_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logical time is \"</span><span class=\"token punctuation\">,</span> logical<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When executed, you will get something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">---- Start execution at <span class=\"token function\">time</span> Thu Nov  <span class=\"token number\">5</span> 08:51:02 <span class=\"token number\">2020</span>\n---- plus <span class=\"token number\">864237900</span> nanoseconds.\nLogical <span class=\"token function\">time</span> is  <span class=\"token number\">1604587862864237900</span>\nLogical <span class=\"token function\">time</span> is  <span class=\"token number\">1604587863864237900</span>\nLogical <span class=\"token function\">time</span> is  <span class=\"token number\">1604587864864237900</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>The first two lines give the current time-of-day provided by the execution platform at the start of execution. This is used to initialize logical time. Subsequent values of logical time are printed out in their raw form, rather than the friendlier form in the first two lines. If you look closely, you will see that each number is one second larger than the previous number, where one second is 1000000000 nanoseconds.</p>\n<p>You can also obtain the <em>elapsed</em> logical time since the start of execution:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">main reactor GetTime <span class=\"token punctuation\">{</span>\n    timer t<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reaction<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        elapsed <span class=\"token operator\">=</span> get_elapsed_logical_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elapsed logical time is \"</span><span class=\"token punctuation\">,</span> elapsed<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">---- Start execution at <span class=\"token function\">time</span> Thu Nov  <span class=\"token number\">5</span> 08:51:02 <span class=\"token number\">2020</span>\n---- plus <span class=\"token number\">864237900</span> nanoseconds.\nElapsed logical <span class=\"token function\">time</span> is  <span class=\"token number\">0</span>\nElapsed logical <span class=\"token function\">time</span> is  <span class=\"token number\">1000000000</span>\nElapsed logical <span class=\"token function\">time</span> is  <span class=\"token number\">2000000000</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>You can also get physical time, which comes from your platform’s real-time clock:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">main reactor GetTime <span class=\"token punctuation\">{</span>\n    timer t<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reaction<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        physical <span class=\"token operator\">=</span> get_physical_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Physical time is \"</span><span class=\"token punctuation\">,</span> physical<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">---- Start execution at <span class=\"token function\">time</span> Thu Nov  <span class=\"token number\">5</span> 08:51:02 <span class=\"token number\">2020</span>\n---- plus <span class=\"token number\">864237900</span> nanoseconds.\nPhysical <span class=\"token function\">time</span> is  <span class=\"token number\">1604587862864343500</span>\nPhysical <span class=\"token function\">time</span> is  <span class=\"token number\">1604587863864401900</span>\nPhysical <span class=\"token function\">time</span> is  <span class=\"token number\">1604587864864395200</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>Finally, you can get elapsed physical time:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">main reactor GetTime <span class=\"token punctuation\">{</span>\n    timer t<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    reaction<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        elapsed_physical <span class=\"token operator\">=</span> get_elapsed_physical_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elapsed physical time is \"</span><span class=\"token punctuation\">,</span> elapsed_physical<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">---- Start execution at <span class=\"token function\">time</span> Thu Nov  <span class=\"token number\">5</span> 08:51:02 <span class=\"token number\">2020</span>\n---- plus <span class=\"token number\">864237900</span> nanoseconds.\nElapsed physical <span class=\"token function\">time</span> is  <span class=\"token number\">110200</span>\nElapsed physical <span class=\"token function\">time</span> is  <span class=\"token number\">1000185400</span>\nElapsed physical <span class=\"token function\">time</span> is  <span class=\"token number\">2000178600</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>Notice that these numbers are increasing by roughly one second each time. If you set the <code class=\"language-text\">fast</code> target parameter to <code class=\"language-text\">true</code>, then physical time will elapse much faster than logical time.</p>\n<p>Working with nanoseconds in the Python code can be tedious if you are interested in longer durations. For convenience, a set of functions are available to the Python programmer to convert time units into the required nanoseconds. For example, you can specify 200 msec in Python code as <code class=\"language-text\">MSEC(200)</code> or two weeks as <code class=\"language-text\">WEEKS(2)</code>. The provided functions are <code class=\"language-text\">NSEC</code>, <code class=\"language-text\">USEC</code> (for microseconds), <code class=\"language-text\">MSEC</code>, <code class=\"language-text\">SEC</code>, <code class=\"language-text\">MINUTE</code>, <code class=\"language-text\">HOUR</code>, <code class=\"language-text\">DAY</code>, and <code class=\"language-text\">WEEK</code>. You may also use the plural of any of these. Examples are given in the next section.</p>\n<h3 id=\"scheduling-delayed-reactions\" style=\"position:relative;\"><a href=\"#scheduling-delayed-reactions\" aria-label=\"scheduling delayed reactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduling Delayed Reactions</h3>\n<p>The Python target provides a <code class=\"language-text\">.schedule()</code> method to trigger an action at a future logical time. Actions are described in the <a href=\"language-specification#action-declaration\">Language Specification</a> document. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/Schedule.lf\">Schedule</a> reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">target Python<span class=\"token punctuation\">;</span>\nreactor Schedule <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">input</span> x<span class=\"token punctuation\">;</span>\n    logical action a<span class=\"token punctuation\">;</span>\n    reaction<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        elapsed_time <span class=\"token operator\">=</span> get_elapsed_logical_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Action triggered at logical time {:d} nsec after start.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>elapsed_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    reaction<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        a<span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">(</span>MSEC<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When this reactor receives an input <code class=\"language-text\">x</code>, it calls <code class=\"language-text\">a.schedule()</code>, specifying the action <code class=\"language-text\">a</code> to be triggered and the logical time offset (200 msec). The action <code class=\"language-text\">a</code> will be triggered at a logical time 200 milliseconds after the arrival of input <code class=\"language-text\">x</code>. At that logical time, the second reaction will trigger and will use the <code class=\"language-text\">get_elapsed_logical_time()</code> function to determine how much logical time has elapsed since the start of execution.</p>\n<p>Notice that after the logical time offset of 200 msec, there may be another input <code class=\"language-text\">x</code> simultaneous with the action <code class=\"language-text\">a</code>. Because the reaction to <code class=\"language-text\">a</code> is given first, it will execute first. This becomes important when such a reactor is put into a feedback loop (see below).</p>\n<h3 id=\"zero-delay-actions\" style=\"position:relative;\"><a href=\"#zero-delay-actions\" aria-label=\"zero delay actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Zero-Delay actions</h3>\n<p>If the specified delay in a <code class=\"language-text\">.schedule()</code> call is zero, then the action <code class=\"language-text\">a</code> will be triggered one <strong>microstep</strong> later in <strong>superdense time</strong> (see <a href=\"https://github.com/lf-lang/lingua-franca/wiki/language-specification#superdense-time\">Superdense Time</a>). Hence, if the input <code class=\"language-text\">x</code> arrives at metric logical time t, and you call <code class=\"language-text\">.schedule()</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a.schedule(0)</code></pre></div>\n<p>then when a reaction to <code class=\"language-text\">a</code> is triggered, the input <code class=\"language-text\">x</code> will be absent (it was present at the <em>previous</em> microstep). The reaction to <code class=\"language-text\">x</code> and the reaction to <code class=\"language-text\">a</code> occur at the same metric time <em>t</em>, but separated by one microstep, so these two reactions are <em>not</em> logically simultaneous.</p>\n<p>The metric time is visible to the Python programmer and can be obtained in a reaction using either <code class=\"language-text\">get_elapsed_logical_time()</code>, as above or <code class=\"language-text\">get_logical_time()</code>. The latter function also returns an <code class=\"language-text\">int</code> (aka <code class=\"language-text\">instant_t</code>), but its meaning is now the time elapsed since January 1, 1970 in nanoseconds.</p>\n<p>As described in the <a href=\"https://github.com/lf-lang/lingua-franca/wiki/language-specification#action-declaration\">Language Specification</a> document, action declarations can have a <em>min_delay</em> parameter. This modifies the timestamp further. Also, the action declaration may be <strong>physical</strong> rather than <strong>logical</strong>, in which case the assigned timestap will depend on the physical clock of the executing platform.</p>\n<h2 id=\"actions-with-values\" style=\"position:relative;\"><a href=\"#actions-with-values\" aria-label=\"actions with values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions With Values</h2>\n<p>Actions can also carry a <strong>value</strong>, a Python object that becomes available to any reaction triggered by the action. This is particularly useful for physical actions that are externally triggered because it enables the action to convey information to the reactor. This could be, for example, the body of an incoming network message or a numerical reading from a sensor.</p>\n<p>Recall from the <a href=\"https://github.com/lf-lang/lingua-franca/wiki/language-specification#Contained-Reactors\">Contained Reactors</a> section in the Language Specification document that the <strong>after</strong> keyword on a connection between ports introduces a logical delay. This is actually implemented using a logical action. We illustrate how this is done using the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/DelayInt.lf\">DelayInt</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">reactor Delay<span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">(</span><span class=\"token number\">100</span> msec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">input</span> _in<span class=\"token punctuation\">;</span>\n    output out<span class=\"token punctuation\">;</span>\n    logical action a<span class=\"token punctuation\">;</span>\n    reaction<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> a<span class=\"token punctuation\">.</span>is_present<span class=\"token punctuation\">:</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    reaction<span class=\"token punctuation\">(</span>_in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        a<span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">,</span> _in<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using this reactor as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">d = new Delay();\nsource.out -> d._in;\nd._in -> sink.out;</code></pre></div>\n<p>is equivalent to:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">source.out -> sink.in after 100 msec;</code></pre></div>\n<p>The reaction to the input <code class=\"language-text\">in</code> declares as its effect the action <code class=\"language-text\">a</code>. This declaration makes it possible for the reaction to schedule a future triggering of <code class=\"language-text\">a</code>. As with other constructs in the Python reactor target, types are avoided.</p>\n<p>The first reaction declares that it is triggered by <code class=\"language-text\">a</code> and has effect <code class=\"language-text\">out</code>. To read the value, it uses the <code class=\"language-text\">a.value</code> class variable. Because this reaction is first, the <code class=\"language-text\">out</code> at any logical time can be produced before the input <code class=\"language-text\">_in</code> is even known to be present. Hence, this reactor can be used in a feedback loop, where <code class=\"language-text\">out</code> triggers a downstream reactor to send a message back to <code class=\"language-text\">_in</code> of this same reactor. If the reactions were given in the opposite order, there would be causality loop and compilation would fail.</p>\n<h2 id=\"stopping-execution\" style=\"position:relative;\"><a href=\"#stopping-execution\" aria-label=\"stopping execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stopping Execution</h2>\n<p>A reaction may request that the execution stop after all events with the current timestamp have been processed by calling the built-in function <code class=\"language-text\">request_stop()</code>, which takes no arguments. In a non-federated execution, the actual last tag of the program will be one microstep later than the tag at which <code class=\"language-text\">request_stop()</code> was called. For example, if the current tag is <code class=\"language-text\">(2 seconds, 0)</code>, the last (stop) tag will be <code class=\"language-text\">(2 seconds, 1)</code>.</p>\n<blockquote>\n<p>:spiral_notepad: The [[ timeout | Target-Specification#timeout ]] target specification will take precedence over this function. For example, if a program has a timeout of <code class=\"language-text\">2 seconds</code> and <code class=\"language-text\">request_stop()</code> is called at the <code class=\"language-text\">(2 seconds, 0)</code> tag, the last tag will still be <code class=\"language-text\">(2 seconds, 0)</code>.</p>\n</blockquote>\n<h2 id=\"log-and-debug-information\" style=\"position:relative;\"><a href=\"#log-and-debug-information\" aria-label=\"log and debug information permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Log and Debug Information</h2>\n<p>The Python supports the [[ logging | Target-Specification#logging ]] target specification. This will cause the runtime to produce more or less information about the execution. However, user-facing functions for different logging levels are not yet implemented (see issue <a href=\"https://github.com/lf-lang/lingua-franca/issues/619\">#619</a>).</p>\n<h2 id=\"implementation-details\" style=\"position:relative;\"><a href=\"#implementation-details\" aria-label=\"implementation details permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementation Details</h2>\n<p>The Python target is built on top of the C runtime to enable maximum efficiency where possible. The Python target uses the [[ single threaded C runtime | Writing-Reactors-in-C#single-threaded-implementation ]] by default but will switch to the [[ multithreaded C runtime | Writing-Reactors-in-C#multithreaded-implementation ]] if a physical action is detected. The [[ threads | Writing-Reactors-in-C#threads ]] target specification can be used to override this behavior.</p>\n<p>Running [[ lfc | downloading-and-building#Command-Line-Tools ]] on a <code class=\"language-text\">XXX.lf</code> program that uses the Python target specification will create the following files:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── src\n│   └── XXX.lf\n└── src-gen\n    └── XXX\n        ├── core\n        │   ...             # C runtime files\n        ├── ctarget.c       # C target API implementations\n        ├── ctarget.h       # C target API definitions\n        ├── pythontarget.c  # Python target API implementations\n        ├── pythontarget.h  # Python target API definitions\n        ├── setup.py        # Setup file used to install the Python C extension\n        ├── XXX.c           # Source code of the Python C extension\n        └── XXX.py          # Actual Python code containing reactors and reaction code</code></pre></div>\n<p>There are two major components in the <code class=\"language-text\">src-gen/XXX</code> directory that together enable the execution of a Python target application: A [[ XXX.py | Writing-Reactors-in-Python#the-xxxpy-file-containing-user-code ]] file containing the user code (e.g., reactor definitions and reactions) and the source code for a [[ Python C extension module | Writing-Reactors-in-Python#the-generated-linguafrancaxxx-python-module-a-c-extension-module ]] called <code class=\"language-text\">LinguaFrancaXXX</code> containing the C runtime, as well as hooks to execute the user-defined reactions. The interactions between the <code class=\"language-text\">src-gen/XXX/XXX.py</code> file and the <code class=\"language-text\">LinguaFrancaXXX</code> module are explained [[ here | Writing-Reactors-in-Python#interactions-between-xxxpy-and-linguafrancaxxx ]].</p>\n<h3 id=\"the-code-classlanguage-textxxxpycode-file-containing-user-code\" style=\"position:relative;\"><a href=\"#the-code-classlanguage-textxxxpycode-file-containing-user-code\" aria-label=\"the code classlanguage textxxxpycode file containing user code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code class=\"language-text\">XXX.py</code> file containing user code</h3>\n<p>The <code class=\"language-text\">XXX.py</code> file contains all the reactor definitions in the form of Python classes. The contents of a reactor are converted as follows:</p>\n<ul>\n<li>Each <strong>Reaction</strong> in a reactor definition will be converted to a class method.</li>\n<li>Each <strong>Parameter</strong> will be converted to a class <a href=\"https://docs.python.org/3/library/functions.html?highlight=property#property\">property</a> to make it read-only.</li>\n<li>Each <strong>State</strong> variable will be converted to an <a href=\"https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables\">instance variable</a>.</li>\n<li>Each trigger and effect will be converted to an object passed as a method function argument to reaction methods, allowing the body of the reaction to access them.</li>\n<li>Each reactor <strong>Preamble</strong> will be put in the class definition verbatim.</li>\n</ul>\n<p>Finally, each reactor class instantiation will be converted to a Python object class instantiation.</p>\n<p>For example, imagine the following program:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># src/XXX.lf</span>\ntarget Python<span class=\"token punctuation\">;</span>\nreactor Foo<span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    preamble <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">import</span> random\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    state baz\n    <span class=\"token builtin\">input</span> _in\n    logical action act\n    reaction<span class=\"token punctuation\">(</span>_in<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\"># Body of the reaction</span>\n        self<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Note the use of self</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nmain reactor <span class=\"token punctuation\">{</span>\n    foo <span class=\"token operator\">=</span> new Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Th reactor <code class=\"language-text\">Foo</code> and its instance, <code class=\"language-text\">foo</code>, will be converted to</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># src-gen/XXX/XXX.py</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n                \n<span class=\"token comment\"># Python class for reactor Foo</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_Foo</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># From the preamble, verbatim:</span>\n    <span class=\"token keyword\">import</span> random\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#Define parameters and their default values</span>\n        self<span class=\"token punctuation\">.</span>_bar <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token comment\"># Handle parameters that are set in instantiation</span>\n        self<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># Define state variables</span>\n        self<span class=\"token punctuation\">.</span>baz <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        \n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_bar\n            \n    <span class=\"token keyword\">def</span> <span class=\"token function\">reaction_function_0</span><span class=\"token punctuation\">(</span>self <span class=\"token punctuation\">,</span> _in<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Body of the reaction</span>\n        self<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Note the use of self</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n                    \n        \n<span class=\"token comment\"># Instantiate classes</span>\nxxx_foo_lf <span class=\"token operator\">=</span> \\\n    <span class=\"token punctuation\">[</span>_Foo<span class=\"token punctuation\">(</span>bank_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> \\\n        _bar<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h3 id=\"the-generated-linguafrancaxxx-python-module-a-c-extension-module\" style=\"position:relative;\"><a href=\"#the-generated-linguafrancaxxx-python-module-a-c-extension-module\" aria-label=\"the generated linguafrancaxxx python module a c extension module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The generated LinguaFrancaXXX Python module (a C extension module)</h3>\n<p>The rest of the files in <code class=\"language-text\">src-gen/XXX</code> form a <a href=\"https://docs.python.org/3/extending/building.html#building-c-and-c-extensions\">Python C extension module</a> called <code class=\"language-text\">LinguaFrancaXXX</code> that can be installed by executing <code class=\"language-text\">python3 -m pip install .</code> in the <code class=\"language-text\">src-gen/XXX/</code> folder. In this case, <code class=\"language-text\">pip</code> will read the instructions in the <code class=\"language-text\">src-gen/XXX/setup.py</code> file and install a <code class=\"language-text\">LinguaFrancaXXX</code> module in your local Python module installation directory.</p>\n<blockquote>\n<p>:spiral_notepad: LinguaFrancaXXX does not necessarily have to be installed if you are using the “traditional” Python implementation (CPython) directly. You could simply use <code class=\"language-text\">python3 setup.py build</code> to build the module in the <code class=\"language-text\">src-gen/XXX</code> folder. However, we have found that <a href=\"https://www.python.org/download/alternatives/\">other C Python implementations</a> such as Anaconda will not work with this kind of local module.</p>\n</blockquote>\n<p>As mentioned before, the LinguaFrancaXXX module is separate from <code class=\"language-text\">src-gen/XXX/XXX.py</code> but interacts with it. Next, we explain this interaction.</p>\n<h3 id=\"interactions-between-xxxpy-and-linguafrancaxxx\" style=\"position:relative;\"><a href=\"#interactions-between-xxxpy-and-linguafrancaxxx\" aria-label=\"interactions between xxxpy and linguafrancaxxx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interactions between XXX.py and LinguaFrancaXXX</h3>\n<p>The LinguaFrancaXXX module is imported in <code class=\"language-text\">src-gen/XXX/XXX.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from LinguaFrancaXXX import *</code></pre></div>\n<p>This is done to enable the main function in <code class=\"language-text\">src-gen/XXX/XXX.py</code> to make a call to the <code class=\"language-text\">start()</code> function, which is part of the generated (and installed) <code class=\"language-text\">LinguaFrancaXXX</code> module. This function will start the main event handling loop of the C runtime.</p>\n<p>From then on, <code class=\"language-text\">LinguaFrancaXXX</code> will call reactions that are defined in <code class=\"language-text\">src-gen/XXX/XXX.py</code> when needed.</p>\n<h3 id=\"the-linguafrancabase-package\" style=\"position:relative;\"><a href=\"#the-linguafrancabase-package\" aria-label=\"the linguafrancabase package permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The LinguaFrancaBase package</h3>\n<p><a href=\"https://pypi.org/project/LinguaFrancaBase/\">LinguaFrancaBase</a> is a package that contains several helper methods and definitions that are necessary for the Python target to work. This module is installable via <code class=\"language-text\">python3 -m pip install LinguaFrancaBase</code> but is automatically installed if needed during the installation of <code class=\"language-text\">LinguaFrancaXXX</code>. The source code of this package can be found <a href=\"https://github.com/lf-lang/reactor-c-py\">here</a>.</p>\n<p>This package’s modules are imported in the <code class=\"language-text\">XXX.py</code> program:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from LinguaFrancaBase.constants import * #Useful constants\nfrom LinguaFrancaBase.functions import * #Useful helper functions\nfrom LinguaFrancaBase.classes import * #Useful classes</code></pre></div>\n<h3 id=\"already-imported-python-modules\" style=\"position:relative;\"><a href=\"#already-imported-python-modules\" aria-label=\"already imported python modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Already imported Python modules</h3>\n<p>The following packages are already imported and thus do not need to be re-imported by the user:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import sys\nimport copy</code></pre></div>\n<h2 id=\"examples\" style=\"position:relative;\"><a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h2>\n<p>To see a few interactive examples written using the Python target, see <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/example/Python/src\">here</a>.</p>\n<p>The <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/test/Python\">Python CI tests</a> might also act as a reference in some cases for the capabilities of the Python target.</p>","headings":[{"value":"Setup","depth":2},{"value":"A Minimal Example","depth":2},{"value":"The Python Target Specification","depth":2},{"value":"Command-Line Arguments","depth":2},{"value":"Imports","depth":2},{"value":"Preamble","depth":2},{"value":"Reactions","depth":2},{"value":"Types","depth":2},{"value":"Inputs and Outputs","depth":3},{"value":"Using State Variables","depth":3},{"value":"Using Parameters","depth":3},{"value":"Sending and Receiving Objects","depth":3},{"value":"Timed Behavior","depth":2},{"value":"Scheduling Delayed Reactions","depth":3},{"value":"Zero-Delay actions","depth":3},{"value":"Actions With Values","depth":2},{"value":"Stopping Execution","depth":2},{"value":"Log and Debug Information","depth":2},{"value":"Implementation Details","depth":2},{"value":"The <code class=\"language-text\">XXX.py</code> file containing user code","depth":3},{"value":"The generated LinguaFrancaXXX Python module (a C extension module)","depth":3},{"value":"Interactions between XXX.py and LinguaFrancaXXX","depth":3},{"value":"The LinguaFrancaBase package","depth":3},{"value":"Already imported Python modules","depth":3},{"value":"Examples","depth":2}],"frontmatter":{"permalink":"/docs/handbook/write-reactor-py","title":"Writing Reactors in Python","oneline":"Writing Reactors in Python.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Writing Reactors in TypeScript","oneline":"Writing Reactors in TypeScript.","permalink":"/docs/handbook/write-reactor-ts"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Regression Tests","oneline":"Regression Tests for Lingua Franca.","permalink":"/docs/handbook/regression-tests"}}}},"pageContext":{"id":"0-writing-reactors-in-python","slug":"/docs/handbook/write-reactor-py","repoPath":"/packages/documentation/copy/en/topics/Writing Reactors in Python.md","previousID":"9d6b3ced-5e8a-52b2-b734-4b5809270a3b","nextID":"54ac9379-90ba-5662-99e4-e3fffada5c63","lang":"en","modifiedTime":"2022-02-03T19:46:10.430Z"}},
    "staticQueryHashes": []}