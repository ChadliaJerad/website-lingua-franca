{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/target-language-reference",
    "result": {"data":{"markdownRemark":{"id":"5784036b-f51c-5d96-b477-c59475b1094f","excerpt":"$page-showing-target$ WARNING: This page documents only the C target. Choose the C target language in the left sidebar to see the C code examples. In the C…","html":"<p>$page-showing-target$</p>\n<div class=\"lf-c\">\n<p><span class=\"lf-cpp lf-py lf-ts lf-rs warning\"><strong>WARNING: This page documents only the C target.</strong> Choose the C target language in the left sidebar to see the C code examples.</span></p>\n<p>In the C reactor target for Lingua Franca, reactions are written in C and the code generator generates one or more standalone C programs that can be compiled and run on several platforms. For requirements, see <a href=\"setup-for-c\">setup for C</a>. It has been tested on MacOS, Linux, Windows, and at least one bare-iron embedded platforms. The single-threaded version (which you get by setting the <a href=\"/docs/handbook/target-specification#threading\"><code class=\"language-text\">threading</code> target parameter</a> to <code class=\"language-text\">false</code>) is the most portable, requiring only a handful of common C libraries (see <a href=\"#included-libraries\">Included Libraries</a> below). The multithreaded version requires a small subset of the Posix thread library (<code class=\"language-text\">pthreads</code>) and transparently executes in parallel on a multicore machine while preserving the deterministic semantics of Lingua Franca.</p>\n<p>Note that C is not a safe language. There are many ways that a programmer can circumvent the semantics of Lingua Franca and introduce nondeterminism and illegal memory accesses. For example, it is easy for a programmer to mistakenly send a message that is a pointer to data on the stack. The destination reactors will very likely read invalid data. It is also easy to create memory leaks, where memory is allocated and never freed. Here, we provide some guidelines for a style for writing reactors that will be safe.</p>\n<p><strong>NOTE:</strong> If you intend to use C++ code or import C++ libraries in the C target, we provide a special <a href=\"#the-ccpp-target\">CCpp target</a> that automatically uses a C++ compiler by default. Alternatively, you might want to use the <a href=\"/docs/handbook/cpp-reactors\">Cpp target</a>.</p>\n<h2 id=\"the-c-target-specification\" style=\"position:relative;\"><a href=\"#the-c-target-specification\" aria-label=\"the c target specification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The C Target Specification</h2>\n<p>To have Lingua Franca generate C code, start your <code class=\"language-text\">.lf</code> file with one of the following target specifications:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">target</span> C <span class=\"token operator\">&lt;</span>options<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">target</span> CCpp <span class=\"token operator\">&lt;</span>options<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that for all LF statements, the final semicolon is optional, but if you are writing your code in C, you may want to include the final semicolon for uniformity.</p>\n<p>For options to the target specification, see <a href=\"/docs/handbook/target-specification\">detailed documentation of the target options</a>.</p>\n<p>The second form, <code class=\"language-text\">CCpp</code>, is used when you wish to use a C++ compiler to compile the generated code, thereby allowing your C reactors to call C++ code. The C target uses a C compiler by default, and will fail to compile mixed C/C++ language programs. As a remedy, the <code class=\"language-text\">CCpp</code> target uses the C runtime but employs a C++ compiler to compile your program. To use it, simply replace <code class=\"language-text\">target C</code> with <code class=\"language-text\">target CCpp</code>.</p>\n<p>Here is a minimal example of a program written in the <code class=\"language-text\">CCpp</code> target, taken from <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/target/HelloWorldCCPP.lf\">HelloWorldCCPP.lf</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> CCpp<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> HelloWorld <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span> <span class=\"token comment\">// Note that no C++ header will be included by default.</span></span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token function\">HelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Note:</strong> Unless some feature in the C target is needed, we recommend using the <a href=\"/docs/handbook/cpp-reactors\">Cpp target</a> that uses a runtime that is written natively in C++.</p>\n<p><strong>Note:</strong> A <code class=\"language-text\">.lf</code> file that uses the <code class=\"language-text\">CCpp</code> target cannot and should not be imported to an <code class=\"language-text\">.lf</code> file that uses the <code class=\"language-text\">C</code> target. Although these two targets use essentially the same runtime, such a scenario can cause unintended compiler errors.</p>\n<h2 id=\"the-self-struct\" style=\"position:relative;\"><a href=\"#the-self-struct\" aria-label=\"the self struct permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The self Struct</h2>\n<p>The code generator synthesizes a struct type in C for each reactor class and a constructor that creates an instance of this struct. By convention, these instances are called <code class=\"language-text\">self</code> and are visible within each reactor body. The <code class=\"language-text\">self</code> struct contains the parameters, state variables, and values associated with actions and ports of the reactor. Parameters and state variables are accessed directly on the <code class=\"language-text\">self</code> struct, whereas ports and actions are directly in scope by name, as we will see below. Let’s begin with parameters.</p>\n<h2 id=\"parameters-and-state-variables\" style=\"position:relative;\"><a href=\"#parameters-and-state-variables\" aria-label=\"parameters and state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameters and State Variables</h2>\n<p>Reactor parameters and state variables are referenced in the C code using the <code class=\"language-text\">self</code> struct. The following <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/Stride.lf\">Stride</a> example modifies the <code class=\"language-text\">Count</code> reactor in <a href=\"/docs/handbook/parameters-and-state-variables#state-declaration\">State Declaration</a> to include both a parameter and state variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>stride<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token operator\">-></span>count <span class=\"token operator\">+=</span> self<span class=\"token operator\">-></span>stride<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This defines a <code class=\"language-text\">stride</code> parameter with type <code class=\"language-text\">int</code> and initial value <code class=\"language-text\">1</code> and\na <code class=\"language-text\">count</code> state variable with the same type and initial value.\nThese are referenced in the reaction with the syntax <code class=\"language-text\">self->stride</code> and <code class=\"language-text\">self->count</code> respectively.</p>\n<p>It may be tempting to declare state variables in the $preamble$, as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> FlawedCount <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce a sequence of integers, but if there is more than one instance of the reactor, those instances will share the same variable count. Hence, <strong>don’t do this</strong>! Sharing variables across instances of reactors violates a basic principle, which is that reactors communicate only by sending messages to one another. Sharing variables will make your program nondeterministic. If you have multiple instances of the above FlawedCount reactor, the outputs produced by each instance will not be predictable, and in a multithreaded implementation, will also not be repeatable.</p>\n<h2 id=\"array-values-for-parameters\" style=\"position:relative;\"><a href=\"#array-values-for-parameters\" aria-label=\"array values for parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array Values for Parameters</h2>\n<p>Parameters and state variables can have array values, though some care is needed. The <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayAsParameter.lf\">ArrayAsParameter</a> example outputs the elements of an array as a sequence of individual messages:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Source</span><span class=\"token punctuation\">(</span>sequence<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n_sequence<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out<span class=\"token punctuation\">,</span> next <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>sequence<span class=\"token punctuation\">[</span>self<span class=\"token operator\">-></span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        self<span class=\"token operator\">-></span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token operator\">-></span>count <span class=\"token operator\">&lt;</span> self<span class=\"token operator\">-></span>n_sequence<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This uses a <a href=\"/docs/handbook/actions#logical-actions\">$logical$ $action$</a> to repeat the reaction, sending one element of the array in each invocation.</p>\n<p>In C, arrays do not encode their own length, so a separate parameter <code class=\"language-text\">n_sequence</code> is used for the array length. Obviously, there is potential here for errors, where the array length doesn’t match the length parameter.</p>\n<p>Above, the parameter default value is an array with three elements, <code class=\"language-text\">[0, 1, 2]</code>. The syntax for giving this default value is that of a Lingua Franca list, <code class=\"language-text\">(0, 1, 2)</code>, which gets converted by the code generator into a C static initializer. The default value can be overridden when instantiating the reactor using a similar syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Source</span><span class=\"token punctuation\">(</span>sequence <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n_sequence<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"array-values-for-states\" style=\"position:relative;\"><a href=\"#array-values-for-states\" aria-label=\"array values for states permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array Values for States</h2>\n<p>A state variable can also have an array value. For example, the [MovingAverage] (<a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/MovingAverage.lf\">https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/MovingAverage.lf</a>) reactor computes the <strong>moving average</strong> of the last four inputs each time it receives an input:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> MovingAverage <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> delay_line<span class=\"token operator\">:</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> index<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Calculate the output.</span>\n        <span class=\"token keyword\">double</span> sum <span class=\"token operator\">=</span> in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> self<span class=\"token operator\">-></span>delay_line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> sum<span class=\"token operator\">/</span><span class=\"token number\">4.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Insert the input in the delay line.</span>\n        self<span class=\"token operator\">-></span>delay_line<span class=\"token punctuation\">[</span>self<span class=\"token operator\">-></span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Update the index for the next input.</span>\n        self<span class=\"token operator\">-></span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token operator\">-></span>index <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            self<span class=\"token operator\">-></span>index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The second line declares that the type of the state variable is an array of <code class=\"language-text\">double</code>s with the initial value of the array being a three-element array filled with zeros.</p>\n<h2 id=\"states-and-parameters-with-struct-values\" style=\"position:relative;\"><a href=\"#states-and-parameters-with-struct-values\" aria-label=\"states and parameters with struct values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>States and Parameters with Struct Values</h2>\n<p>States whose type are structs can similarly be initialized. This <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/StructAsState.lf\">StructAsState</a> example illustrates this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> StructAsState <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hello_t</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">state</span> s<span class=\"token operator\">:</span><span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State s.name=\\\"%s\\\", value=%d.\\n\"</span><span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>s<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>s<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that state <code class=\"language-text\">s</code> is given type <code class=\"language-text\">hello_t</code>, which is defined in the $preamble$. The initial value just lists the initial values of each of the fields of the struct in the order they are declared.</p>\n<p>Parameters are similar:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">StructParameter</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span><span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hello_t</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Parameter p.name=\\\"%s\\\", value=%d.\\n\"</span><span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>p<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token operator\">-></span>p<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"FAILED: Expected 42.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"inputs-and-outputs\" style=\"position:relative;\"><a href=\"#inputs-and-outputs\" aria-label=\"inputs and outputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inputs and Outputs</h2>\n<p>In the body of a reaction in the C target, the value of an input is obtained using the syntax <code class=\"language-text\">name->value</code>, where <code class=\"language-text\">name</code> is the name of the input port. See, for example, the <code class=\"language-text\">Destination</code> reactor in <a href=\"/docs/handbook/inputs-and-outputs#triggers-effects-and-uses\">Triggers, Effects, and Uses</a>.</p>\n<p>To set the value of outputs, use one of several variants of the <code class=\"language-text\">SET</code> macro. See, for example, the <code class=\"language-text\">Double</code> reactor in <a href=\"/docs/handbook/inputs-and-outputs#input-and-output-declarations\">Input and Output Declarations</a>.)</p>\n<p>There are several variants of the <code class=\"language-text\">SET</code> macro, and the one you should use depends on the type of the output. The simple version <code class=\"language-text\">SET</code> works for all primitive C type (int, double, etc.) as well as the <code class=\"language-text\">bool</code> and <code class=\"language-text\">string</code> types that Lingua Franca defines. For the other variants, see <a href=\"#Sending-and-Receiving-Arrays-and-Structs\">Sending and Receiving Arrays and Structs</a> below.</p>\n<p>An output may even be set in different reactions of the same reactor at the same tag. In this case, one reaction may wish to test whether the previously invoked reaction has set the output. It can check <code class=\"language-text\">name->is_present</code> to determine whether the output has been set. For example, the following reactor (the test case <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/TestForPreviousOutput.lf\">TestForPreviousOutput</a>) will always produce the output 42:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> TestForPreviousOutput <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Set a seed for random number generation based on the current time.</span>\n        <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Randomly produce an output or not.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>out<span class=\"token operator\">-></span>is_present<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> out<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first reaction may or may not set the output to 21. The second reaction doubles the output if it has been previously produced and otherwise produces 42.</p>\n<h2 id=\"sending-and-receiving-arrays-and-structs\" style=\"position:relative;\"><a href=\"#sending-and-receiving-arrays-and-structs\" aria-label=\"sending and receiving arrays and structs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sending and Receiving Arrays and Structs</h2>\n<p>You can define your own datatypes in C and send and receive those. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/StructAsType.lf\">StructAsType</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> StructAsType <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hello_t</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hello_t</span> temp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The $preamble$ code defines a struct datatype. In the reaction to $startup$, the reactor creates an instance of this struct on the stack (as a local variable named <code class=\"language-text\">temp</code>) and then copies that struct to the output using the <code class=\"language-text\">SET</code> macro.</p>\n<p>For large structs, it may be inefficient to create a struct on the stack and copy it to the output, as done above. You can instead write directly to the fields of the struct. For example, the above reaction could be rewritten as follows (see <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/StructAsTypeDirect.lf\">StructAsTypeDirect</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\">    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token operator\">-></span>value<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token operator\">-></span>value<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SET_PRESENT</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>The final call to <code class=\"language-text\">SET_PRESENT</code> is necessary to inform downstream reactors that the struct has a new value. (This is a macro that simply does <code class=\"language-text\">out->is_present = true</code>). Note that in subsequent reactions, the values of the struct persist. Hence, this technique can be very efficient if a large struct is modified only slightly in each of a sequence of reactions.</p>\n<p>A reactor receiving the struct message uses the struct as normal in C:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received: name = %s, value = %d\\n\"</span><span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The preamble should not be repeated in this reactor definition if the two reactors are defined together because this will trigger an error when the compiler thinks that hello_t is being redefined.</p>\n<p>Arrays that have fixed sizes are handled similarly. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayAsType.lf\">ArrayAsType</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> ArrayAsType <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SET_PRESENT</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, the output is declared to have type <code class=\"language-text\">int[3]</code>, an array of three integers. The startup reaction above writes to the array and then calls <code class=\"language-text\">SET_PRESENT</code> to indicate an updated value. Again, the values in the array will persist across reactions.</p>\n<p>A reactor receiving this array is straightforward. It just references the array elements as usual in C, as illustrated by this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received: [\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"dynamically-allocated-arrays\" style=\"position:relative;\"><a href=\"#dynamically-allocated-arrays\" aria-label=\"dynamically allocated arrays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamically Allocated Arrays</h2>\n<p>For arrays where the size is variable, it may be necessary to dynamically allocate memory. But when should that memory be freed? A reactor cannot know when downstream reactors are done with the data. Lingua Franca provides utilities for managing this using reference counting. You can pass a pointer to a dynamically allocated object as illustrated in the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayPrint.lf\">ArrayPrint</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> ArrayPrint <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Dynamically allocate an output array of length 3.</span>\n        <span class=\"token function\">SET_NEW_ARRAY</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Above allocates the array, which then must be populated.</span>\n        out<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This declares the output datatype to be <code class=\"language-text\">int[]</code> (or, equivalently, <code class=\"language-text\">int*</code>), an array of integers of unspecified size. To produce the array in a reaction, it uses the library function <code class=\"language-text\">SET_NEW_ARRAY</code> to allocate an array of length 3 and sets the output to send that array. The reaction then populates the array with data. The deallocation of the memory for the array will occur automatically after the last reactor that receives a pointer to the array has finished using it.</p>\n<p>A reactor receiving the array looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> Print <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received: [\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> in<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the body of the reaction, <code class=\"language-text\">in->value</code> is a pointer to first element of the array, so it can be indexed as usual with arrays in C, <code class=\"language-text\">in->value[i]</code>. Moreover, a variable <code class=\"language-text\">in->length</code> is bound to the length of the array.</p>\n<h2 id=\"mutable-inputs\" style=\"position:relative;\"><a href=\"#mutable-inputs\" aria-label=\"mutable inputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mutable Inputs</h2>\n<p>Although it cannot be enforced in C, the receiving reactor should not modify the values stored in the array. Inputs are logically <em>immutable</em> because there may be several recipients. Any recipient that wishes to modify the array should make a copy of it. Fortunately, a utility is provided for this pattern. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayScale.lf\">ArrayScale</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">ArrayScale</span><span class=\"token punctuation\">(</span>scale<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">mutable</span> <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> in<span class=\"token operator\">-></span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*=</span> self<span class=\"token operator\">-></span>scale<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">SET_TOKEN</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, the input is declared $mutable$, which means that any reaction is free to modify the input. If this reactor is the only recipient of the array or the last recipient of the array, then this will not copy of the array but rather use the original array. Otherwise, it will use a copy.</p>\n<p>The above <code class=\"language-text\">ArrayScale</code> reactor modifies the array and then forwards it to its output port using the <code class=\"language-text\">SET_TOKEN()</code> macro. That macro further delegates to downstream reactors the responsibility for freeing dynamically allocated memory once all readers have completed their work.</p>\n<p>If the above code were not to forward the array, then the dynamically allocated memory will be automatically freed when this reactor is done with it.</p>\n<p>The above three reactors can be combined into a pipeline as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> ArrayScaleTest <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayPrint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayScale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span>out <span class=\"token operator\">-</span><span class=\"token operator\">></span> c<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>out <span class=\"token operator\">-</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this composite, the array is allocated by <code class=\"language-text\">ArrayPrint</code>, modified by <code class=\"language-text\">ArrayScale</code>, and deallocated (freed) after <code class=\"language-text\">Print</code> has reacted. No copy is necessary because <code class=\"language-text\">ArrayScale</code> is the only recipient of the original array.</p>\n<p>Inputs and outputs can also be dynamically allocated structs. In fact, Lingua Franca’s C target will treat any input or output datatype that ends with <code class=\"language-text\">[]</code> or <code class=\"language-text\">*</code> specially by providing utilities for allocating memory and modifying and forwarding. Deallocation of the allocated memory is automatic. The complete set of utilities is given below.</p>\n<h2 id=\"string-types\" style=\"position:relative;\"><a href=\"#string-types\" aria-label=\"string types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Types</h2>\n<p>String types in C are <code class=\"language-text\">char*</code>. But, as explained above, types ending with <code class=\"language-text\">*</code> are interpreted specially to provide automatic memory management, which we generally don’t want with strings (a string that is a compile-time constant must not be freed). You could enclose the type as <code class=\"language-text\">{= char* =}</code>, but to avoid this awkwardness, the header files include a typedef that permits using <code class=\"language-text\">string</code> instead of <code class=\"language-text\">char*</code>. For example (from <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/DelayString.lf\">DelayString.lf</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">DelayString</span><span class=\"token punctuation\">(</span>delay<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> a<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// The following copies the char*, not the string.</span>\n        <span class=\"token function\">schedule_copy</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>delay<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"macros-for-setting-output-values\" style=\"position:relative;\"><a href=\"#macros-for-setting-output-values\" aria-label=\"macros for setting output values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Macros For Setting Output Values</h2>\n<p>In all of the following, <out> is the name of the output and <value> is the value to be sent.</p>\n<blockquote>\n<p><code class=\"language-text\">SET(&lt;out>, &lt;value>);</code></p>\n</blockquote>\n<p>Set the specified output (or input of a contained reactor) to the specified value. This version is used for primitive type such as <code class=\"language-text\">int</code>, <code class=\"language-text\">double</code>, etc. as well as the built-in types <code class=\"language-text\">bool</code> and <code class=\"language-text\">string</code> (but only if the string is a statically allocated constant; otherwise, see <code class=\"language-text\">SET_NEW_ARRAY</code>). It can also be used for structs with a type defined by a <code class=\"language-text\">typedef</code> so that the type designating string does not end in ’*‘. The value is copied and therefore the variable carrying the value can be subsequently modified without changing the output.</p>\n<blockquote>\n<p><code class=\"language-text\">SET_ARRAY(&lt;out>, &lt;value>, &lt;element_size>, &lt;length>);</code></p>\n</blockquote>\n<p>This version is used for outputs with a type declaration ending with <code class=\"language-text\">[]</code> or <code class=\"language-text\">*</code>, such as <code class=\"language-text\">int[]</code>. This version is for use when the <em>value</em> to be sent is in dynamically allocated memory that will need to be freed downstream. The allocated memory will be automatically freed when all recipients of the outputs are done with it. Since C does not encode array sizes as part of the array, the <em>length</em> and <em>element_size</em> must be given (the latter is the size of each element in bytes). See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/SetArray.lf\">SetArray.lf</a>.</p>\n<blockquote>\n<p><code class=\"language-text\">SET_NEW(&lt;out>);</code></p>\n</blockquote>\n<p>This version is used for outputs with a type declaration ending with <code class=\"language-text\">*</code> (see example below). This sets the <code class=\"language-text\">out</code> variable to point to newly allocated memory for storing the specified output type. After calling this function, the reaction should populate that memory with the content it intends to send to downstream reactors. This macro is equivalent to <code class=\"language-text\">SET_NEW_ARRAY(out, 1)</code>. See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/StructPrint.lf\">StructPrint.lf</a></p>\n<blockquote>\n<p><code class=\"language-text\">SET_NEW_ARRAY(&lt;out>, &lt;length>);</code></p>\n</blockquote>\n<p>This version is used for outputs with a type declaration ending with <code class=\"language-text\">[]</code> or <code class=\"language-text\">*</code>. This sets the <em>out</em> variable to point to newly allocated memory sufficient to hold an array of the specified length containing the output type in each element. The caller should subsequently populate the array with the contents that it intends to send to downstream reactors. See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayPrint.lf\">ArrayPrint.lf</a>.</p>\n<p><strong>Dynamically allocated strings:</strong> If an output is to be a dynamically allocated string, as opposed to a static string constant, then you can use <code class=\"language-text\">SET_NEW_ARRAY</code> to allocate the memory, and the memory will be automatically freed downstream after the all users have read the string. To do this, set the output type to <code class=\"language-text\">char[]</code> or <code class=\"language-text\">char*</code> rather than <code class=\"language-text\">string</code> and call <code class=\"language-text\">SET_NEW_ARRAY</code> with the desired length. After this, <em>out</em> will point to a char array of the required length. You can then populate it with your desired string, e.g. using <code class=\"language-text\">snprintf()</code>. See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/federated/DistributedToken.lf\">DistributedToken.lf</a></p>\n<blockquote>\n<p><code class=\"language-text\">SET_PRESENT(&lt;out>);</code></p>\n</blockquote>\n<p>This version just sets the <code class=\"language-text\">&lt;out>->is_present</code> variable corresponding to the specified output to true. This is normally used with array outputs with fixed sizes and statically allocated structs. In these cases, the values in the output are normally written directly to the array or struct. See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ArrayAsType.lf\">ArrayAsType.lf</a></p>\n<blockquote>\n<p><code class=\"language-text\">SET_TOKEN(&lt;out>, &lt;value>);</code></p>\n</blockquote>\n<p>This version is used for outputs with a type declaration ending with <code class=\"language-text\">*</code> (any pointer) or <code class=\"language-text\">[]</code> (any array). The <code class=\"language-text\">&lt;value></code> argument should be a struct of type <code class=\"language-text\">token_t</code>. This can be the trickiest form to use, but it is rarely necessary for the programmer to create their own (dynamically allocated) instance of <code class=\"language-text\">token_t</code>. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/SetToken.lf\">SetToken.lf</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\">    <span class=\"token lf_keywords\">reactor</span> Source <span class=\"token punctuation\">{</span>\n        <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n        <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n        <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n            <span class=\"token function\">schedule_int</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">MSEC</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n        <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n            <span class=\"token function\">SET_TOKEN</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> a<span class=\"token operator\">-></span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, the first reaction schedules an integer-valued action to trigger after 200 microseconds. As explained below, action payloads are carried by tokens. The second reaction grabs the token rather than the value using the syntax <code class=\"language-text\">a->token</code> (the name of the action followed by <code class=\"language-text\">->token</code>). It then forwards the token to the output. The output data type is <code class=\"language-text\">int*</code> not <code class=\"language-text\">int</code> because the token carries a pointer to dynamically allocated memory that contains the value. All inputs and outputs with types ending in <code class=\"language-text\">*</code> or <code class=\"language-text\">[]</code> are carried by tokens.</p>\n<p>All of the <code class=\"language-text\">SET</code> macros will overwrite any output value previously set at the same logical time and will cause the final output value to be sent to all reactors connected to the output. They also all set a local <code class=\"language-text\">&lt;out>->is_present</code> variable to true. This can be used to subsequently test whether the output value has been set.</p>\n<h2 id=\"dynamically-allocated-structs\" style=\"position:relative;\"><a href=\"#dynamically-allocated-structs\" aria-label=\"dynamically allocated structs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamically Allocated Structs</h2>\n<p>The <code class=\"language-text\">SET_NEW</code> and <code class=\"language-text\">SET_TOKEN</code> macros can be used to send <code class=\"language-text\">structs</code> of arbitrary complexity. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> StructPrint <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">hello_t</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token class-name\">hello_t</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token class-name\">hello_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Dynamically allocate an output struct.</span>\n        <span class=\"token function\">SET_NEW</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Above allocates a struct, which then must be populated.</span>\n        out<span class=\"token operator\">-></span>value<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token operator\">-></span>value<span class=\"token operator\">-></span>value <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The $preamble$ declares a struct type <code class=\"language-text\">hello_t</code> with two fields, and the <code class=\"language-text\">SET_NEW</code> macro allocates memory to contain such a struct. The subsequent code populates that memory. A reactor receiving this struct might look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token class-name\">hello_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received: name = %s, value = %d\\n\"</span><span class=\"token punctuation\">,</span>\n            in<span class=\"token operator\">-></span>value<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>value<span class=\"token operator\">-></span>value\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Just as with arrays, an input with a pointer type can be declared $mutable$, in which case it is safe to modify the fields and forward the struct.</p>\n<p>Occasionally, you will want an input or output type to be a pointer, but you don’t want the automatic memory allocation and deallocation. A simple example is a string type, which in C is <code class=\"language-text\">char*</code>. Consider the following (erroneous) reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> Erroneous <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An output data type that ends with <code class=\"language-text\">*</code> signals to Lingua Franca that the message is dynamically allocated and must be freed downstream after all recipients are done with it. But the <code class=\"language-text\">\"Hello World\"</code> string here is statically allocated, so an error will occur when the last downstream reactor to use this message attempts to free the allocated memory. To avoid this for strings, you can use the <code class=\"language-text\">string</code> type, defined in <code class=\"language-text\">reactor.h</code>, as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> Fixed <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">string</code> type is equivalent to <code class=\"language-text\">char*</code>, but since it doesn’t end with <code class=\"language-text\">*</code>, it does not signal to Lingua Franca that the type is dynamically allocated. Lingua Franca only handles allocation and deallocation for types that are specified literally with a final <code class=\"language-text\">*</code> in the type name. The same trick can be used for any type where you don’t want automatic allocation and deallocation. E.g., the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/SendsPointerTest.lf\">SendsPointer</a> example looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> SendsPointer  <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> int_pointer<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span>int_pointer<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> my_constant <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>my_constant<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above technique can be used to abuse the reactor model of computation by communicating pointers to shared variables. This is generally a bad idea unless those shared variables are immutable. The result will likely be nondeterministic. Also, communicating pointers across machines that do not share memory will not work at all.</p>\n<h2 id=\"time\" style=\"position:relative;\"><a href=\"#time\" aria-label=\"time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time</h2>\n<p>In the C target, the value of a time instant or interval is an integer specifying a number of nanoseconds. An instant is the number of nanoseconds that have elapsed since January 1, 1970. An interval is the difference between two instants. When an LF program starts executing, logical time is (normally) set to the instant provided by the operating system. (On some embedded platforms without real-time clocks, it will be set instead to zero.)</p>\n<p>Time in the C target is a <code class=\"language-text\">long long</code>, which is (normally) a 64 bit signed number. Since a 64-bit number has a limited range, this measure of time instants will overflow in approximately the year 2262. For better code clarity, two types are defined in <a href=\"https://github.com/lf-lang/reactor-c/blob/main/core/tag.h\">tag.h</a>, <code class=\"language-text\">instant_t</code> and <code class=\"language-text\">interval_t</code>, which you can use for time instants and intervals respectively. These are both equivalent to <code class=\"language-text\">long long</code>, but using those types will insulate your code against changes and platform-specific customizations.</p>\n<p>Lingua Franca uses a superdense model of time. A reaction is invoked at a logical <strong>tag</strong>, a struct consists of a <code class=\"language-text\">time</code> value (an <code class=\"language-text\">instant_t</code>, which is a <code class=\"language-text\">long long</code>) and a <code class=\"language-text\">microstep</code> value (a <code class=\"language-text\">microstep_t</code>, which is an unsigned <code class=\"language-text\">int</code>). The tag is guaranteed to not increase during the execution of a reaction. Outputs produced by a reaction have the same tag as the inputs, actions, or timers that trigger the reaction, and hence are <strong>logically simultaneous</strong>.</p>\n<p>The time structs and functions for working with time are defined in <a href=\"https://github.com/lf-lang/reactor-c/blob/main/core/tag.h\">tag.h</a>. The most useful functions are:</p>\n<ul>\n<li><code class=\"language-text\">tag_t get_current_tag()</code>: Get the current tag at which this reaction has been invoked.</li>\n<li><code class=\"language-text\">instant_t get_logical_time()</code>: Get the current logical time (the first part of the current tag).</li>\n<li><code class=\"language-text\">microstep_t get_microstep() </code>: Get the current microstep (the second part of the current tag).</li>\n<li><code class=\"language-text\">interval_t get_elapsed_logical_time()</code>: Get the logical time elapsed since program start.</li>\n<li><code class=\"language-text\">int compare_tags(tag_t, tag_t)</code>: Compare two tags, returning -1, 0, or 1 for less than, equal, and greater than.</li>\n</ul>\n<p>There are also some useful functions for accessing physical time:</p>\n<ul>\n<li><code class=\"language-text\">instant_t get_physical_time()</code>: Get the current physical time.</li>\n<li><code class=\"language-text\">instant_t get_elapsed_physical_time()</code>: Get the physical time elapsed since program start.</li>\n<li><code class=\"language-text\">instant_t get_start_time()</code>: Get the starting physical and logical time.</li>\n</ul>\n<p>The last of these is both a physical and logical time because, at the start of execution, the starting logical time is set equal to the current physical time as measured by a local clock.</p>\n<p>A reaction can examine the current logical time (which is constant during the execution of the reaction). For example, consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/GetTime.lf\">GetTime</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> GetTime <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token class-name\">instant_t</span> <span class=\"token lf_keywords\">logical</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logical time is %lld.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token lf_keywords\">logical</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When executed, you will get something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Start execution at time Sun Oct 13 10:18:36 2019\nplus 353609000 nanoseconds.\nLogical time is 1570987116353609000.\nLogical time is 1570987117353609000.\nLogical time is 1570987118353609000.\n...</code></pre></div>\n<p>The first two lines give the current time-of-day provided by the execution platform at the start of execution. This is used to initialize logical time. Subsequent values of logical time are printed out in their raw form, rather than the friendlier form in the first two lines. If you look closely, you will see that each number is one second larger than the previous number, where one second is 1000000000 nanoseconds.</p>\n<p>You can also obtain the <em>elapsed</em> logical time since the start of execution:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> GetTime <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token class-name\">interval_t</span> elapsed <span class=\"token operator\">=</span> <span class=\"token function\">get_elapsed_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elapsed logical time is %lld.\\n\"</span><span class=\"token punctuation\">,</span> elapsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Start execution at time Sun Oct 13 10:25:22 2019\nplus 833273000 nanoseconds.\nElapsed logical time is 0.\nElapsed logical time is 1000000000.\nElapsed logical time is 2000000000.\n...</code></pre></div>\n<p>You can also get physical time, which comes from your platform’s real-time clock:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> GetTime <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token class-name\">instant_t</span> <span class=\"token lf_keywords\">physical</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_physical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Physical time is %lld.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token lf_keywords\">physical</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Start execution at time Sun Oct 13 10:35:59 2019\nplus 984992000 nanoseconds.\nPhysical time is 1570988159986108000.\nPhysical time is 1570988160990219000.\nPhysical time is 1570988161990067000.\n...</code></pre></div>\n<p>Finally, you can get elapsed physical time:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> GetTime <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token class-name\">instant_t</span> elapsed_physical <span class=\"token operator\">=</span> <span class=\"token function\">get_elapsed_physical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elapsed physical time is %lld.\\n\"</span><span class=\"token punctuation\">,</span> elapsed_physical<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Elapsed physical time is 657000.\nElapsed physical time is 1001856000.\nElapsed physical time is 2004761000.\n...</code></pre></div>\n<p>Notice that these numbers are increasing by <em>roughly</em> one second each time. If you set the <code class=\"language-text\">fast</code> target parameter to <code class=\"language-text\">true</code>, then physical time will elapse much faster than logical time.</p>\n<p>Working with nanoseconds in C code can be tedious if you are interested in longer durations. For convenience, a set of macros are available to the C programmer to convert time units into the required nanoseconds. For example, you can specify 200 msec in C code as <code class=\"language-text\">MSEC(200)</code> or two weeks as <code class=\"language-text\">WEEKS(2)</code>. The provided macros are <code class=\"language-text\">NSEC</code>, <code class=\"language-text\">USEC</code> (for microseconds), <code class=\"language-text\">MSEC</code>, <code class=\"language-text\">SEC</code>, <code class=\"language-text\">MINUTE</code>, <code class=\"language-text\">HOUR</code>, <code class=\"language-text\">DAY</code>, and <code class=\"language-text\">WEEK</code>. You may also use the plural of any of these. Examples are given in the next section.</p>\n<h2 id=\"actions-with-values\" style=\"position:relative;\"><a href=\"#actions-with-values\" aria-label=\"actions with values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions With Values</h2>\n<p>Actions are described in the <a href=\"/docs/handbook/actions\">Actions</a>. If an action is declared with a data type, then it can carry a <strong>value</strong>, a data value that becomes available to any reaction triggered by the action. This is particularly useful for physical actions that are externally triggered because it enables the action to convey information to the reactor. This could be, for example, the body of an incoming network message or a numerical reading from a sensor.</p>\n<p>Recall from <a href=\"/docs/handbook/composing-reactors\">Composing Reactors</a> that the $after$ keyword on a connection between ports introduces a logical delay. This is actually implemented using a logical action. We illustrate how this is done using the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/DelayInt.lf\">DelayInt</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">DelayInt</span><span class=\"token punctuation\">(</span>delay<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> d<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> d<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> d <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">schedule_int</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>delay<span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using this reactor as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    source<span class=\"token punctuation\">.</span>out <span class=\"token operator\">-</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span><span class=\"token punctuation\">;</span>\n    d<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> sink<span class=\"token punctuation\">.</span>out</code></pre></div>\n<p>is equivalent to</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    source<span class=\"token punctuation\">.</span>out <span class=\"token operator\">-</span><span class=\"token operator\">></span> sink<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span> <span class=\"token lf_keywords\">after</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span></code></pre></div>\n<p>(except that our <code class=\"language-text\">DelayInt</code> reactor will only work with data type <code class=\"language-text\">int</code>).</p>\n<p>The action <code class=\"language-text\">d</code> is specified with a type <code class=\"language-text\">int</code>. The reaction to the input <code class=\"language-text\">in</code> declares as its effect the action <code class=\"language-text\">d</code>. This declaration makes it possible for the reaction to schedule a future triggering of <code class=\"language-text\">d</code>. The reaction uses one of several variants of the <strong>schedule</strong> function, namely <strong>schedule_int</strong>, a convenience function provided because integer payloads on actions are very common. We will see below, however, that payloads can have any data type.</p>\n<p>The first reaction declares that it is triggered by <code class=\"language-text\">d</code> and has effect <code class=\"language-text\">out</code>. To read the value, it uses the <code class=\"language-text\">d->value</code> variable. Because this reaction is first, the <code class=\"language-text\">out</code> at any logical time can be produced before the input <code class=\"language-text\">in</code> is even known to be present. Hence, this reactor can be used in a feedback loop, where <code class=\"language-text\">out</code> triggers a downstream reactor to send a message back to <code class=\"language-text\">in</code> of this same reactor. If the reactions were given in the opposite order, there would be causality loop and compilation would fail.</p>\n<p>If you are not sure whether an action carries a value, you can test for it as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\">    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>has_value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> d<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is possible to both be triggered by and schedule an action the same reaction. For example, this <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/CountSelf.lf\">CountSelf</a> reactor will produce a counting sequence after it is triggered the first time:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">CountSelf</span><span class=\"token punctuation\">(</span>delay<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a<span class=\"token punctuation\">,</span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">schedule_int</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>delay<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a<span class=\"token punctuation\">,</span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> a<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">schedule_int</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>delay<span class=\"token punctuation\">,</span> a<span class=\"token operator\">-></span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Of course, to produce a counting sequence, it would be more efficient to use a state variable.</p>\n<h2 id=\"schedule-functions\" style=\"position:relative;\"><a href=\"#schedule-functions\" aria-label=\"schedule functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Schedule Functions</h2>\n<p>Actions with values can be rather tricky to use because the value must usually be carried in dynamically allocated memory. It will not work for value to refer to a state variable of the reactor because that state variable will likely have changed value by the time the reactions to the action are invoked. Several variants of the <code class=\"language-text\">schedule</code> function are provided to make it easier to pass values across time in varying circumstances.</p>\n<blockquote>\n<p><code class=\"language-text\">schedule(&lt;action>, &lt;offset>);</code></p>\n</blockquote>\n<p>This is the simplest version as it carries no value. The action need not have a data type.</p>\n<blockquote>\n<p><code class=\"language-text\">schedule_int(&lt;action>, &lt;offset>, &lt;value>);</code></p>\n</blockquote>\n<p>This version carries an <code class=\"language-text\">int</code> value. The datatype of the action is required to be <code class=\"language-text\">int</code>.</p>\n<blockquote>\n<p><code class=\"language-text\">schedule_token(&lt;action>, &lt;offset>, &lt;value>);</code></p>\n</blockquote>\n<p>This version carries a <strong>token</strong>, which has type <code class=\"language-text\">token_t</code> and points to the value, which can have any type. There is a <code class=\"language-text\">create_token()</code> function that can be used to create a token, but programmers will rarely need to use this. Instead, you can use <code class=\"language-text\">schedule_value()</code> (see below), which will automatically create a token. Alternatively, for inputs with types ending in <code class=\"language-text\">*</code> or <code class=\"language-text\">[]</code>, the value is wrapped in a token, and the token can be obtained using the syntax <code class=\"language-text\">inputname->token</code> in a reaction and then forwarded using <code class=\"language-text\">schedule_token()</code> (see <a href=\"#Dynamically-Allocated-Structs\">Dynamically Allocated Structs</a> above). If the input is mutable, the reaction can then even modify the value pointed to by the token and/or use <code class=\"language-text\">schedule_token()</code> to send the token to a future logical time. For example, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/DelayPointer.lf\">DelayPointer</a> reactor realizes a logical delay for any datatype carried by a token:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">DelayPointer</span><span class=\"token punctuation\">(</span>delay<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Using SET_TOKEN delegates responsibility for</span>\n        <span class=\"token comment\">// freeing the allocated memory downstream.</span>\n        <span class=\"token function\">SET_TOKEN</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> a<span class=\"token operator\">-></span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Schedule the actual token from the input rather than</span>\n        <span class=\"token comment\">// a new token with a copy of the input value.</span>\n        <span class=\"token function\">schedule_token</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>delay<span class=\"token punctuation\">,</span> in<span class=\"token operator\">-></span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">schedule_value**(&lt;action>, &lt;offset>, &lt;value>, &lt;length>);</code></p>\n</blockquote>\n<p>This version is used to send into the future a value that has been dynamically allocated malloc. It will be automatically freed when it is no longer needed. The <em>value</em> argument is a pointer to the memory containing the value. The <em>length</em> argument should be 1 if it is a not an array and the array length otherwise. This length will be needed downstream to interpret the data correctly. See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/ScheduleValue.lf\">ScheduleValue.lf</a>.</p>\n<blockquote>\n<p><code class=\"language-text\">schedule_copy(&lt;action>, &lt;offset>, &lt;value>, &lt;length>);</code></p>\n</blockquote>\n<p>This version is for sending a copy of some data pointed to by the <code class=\"language-text\">&lt;value></code> argument. The data is assumed to be a scalar or array of type matching the <code class=\"language-text\">&lt;action></code> type. The <code class=\"language-text\">&lt;length></code> argument should be 1 if it is a not an array and the array length otherwise. This length will be needed downstream to interpret the data correctly.</p>\n<p>Occasionally, an action payload may not be dynamically allocated nor freed. For example, it could be a pointer to a statically allocated string. If you know this to be the case, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/DelayString.lf\">DelayString</a> reactor will realize a logical time delay on such a string:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">DelayString</span><span class=\"token punctuation\">(</span>delay<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token operator\">:</span>string<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> a<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// The following copies the char*, not the string.</span>\n        <span class=\"token function\">schedule_copy</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>delay<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>in<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The datatype <code class=\"language-text\">string</code> is an alias for <code class=\"language-text\">char*</code>, but Lingua Franca does not know this, so it creates a token that contains a copy of the pointer to the string rather than a copy of the string itself.</p>\n<h2 id=\"stopping-execution\" style=\"position:relative;\"><a href=\"#stopping-execution\" aria-label=\"stopping execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stopping Execution</h2>\n<p>A reaction may request that the execution stop after all events with the current timestamp have been processed by calling the built-in function <code class=\"language-text\">request_stop()</code>, which takes no arguments. In a non-federated execution, the returned time is normally the same as the current logical time, and the actual last tag will be one microstep later. In a federated execution, however, the stop time will likely be larger than the current logical time. All federates are assured of stopping at the same logical time.</p>\n<h2 id=\"log-and-debug-information\" style=\"position:relative;\"><a href=\"#log-and-debug-information\" aria-label=\"log and debug information permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Log and Debug Information</h2>\n<p>A suite of useful functions is provided in <a href=\"https://github.com/lf-lang/reactor-c/blob/main/core/utils/util.h\">util.h</a> for producing messages to be made visible when the generated program is run. Of course, you can always use <code class=\"language-text\">printf</code>, but this is not a good choice for logging or debug information, and it is not a good choice when output needs to be redirected to a window or some other user interface (see for example the <a href=\"https://github.com/lf-lang/reactor-c/blob/main/util/sensor_simulator.h\">sensor simulator</a>). Also, in federated execution, these functions identify which federate is producing the message. The functions are listed below. The arguments for all of these are identical to <code class=\"language-text\">printf</code> with the exception that a trailing newline is automatically added and therefore need not be included in the format string.</p>\n<ul>\n<li>\n<p><code class=\"language-text\">DEBUG_PRINT(format, ...)</code>: Use this for verbose messages that are only needed during debugging. Nothing is printed unless the <a href=\"/docs/handbook/target-specification#logging\">target</a> parameter <code class=\"language-text\">logging</code> is set to <code class=\"language-text\">debug</code>. THe overhead is minimized when nothing is to be printed.</p>\n</li>\n<li>\n<p><code class=\"language-text\">LOG_PRINT(format, ...)</code>: Use this for messages that are useful logs of the execution. Nothing is printed unless the <a href=\"/docs/handbook/target-specification#logging\">target parameter <code class=\"language-text\">logging</code></a> is set to <code class=\"language-text\">log</code> or <code class=\"language-text\">debug</code>. This is a macro so that overhead is minimized when nothing is to be printed.</p>\n</li>\n<li>\n<p><code class=\"language-text\">info_print(format, ...)</code>: Use this for messages that should normally be printed but may need to be redirected to a user interface such as a window or terminal (see <code class=\"language-text\">register_print_function</code> below). These messages can be suppressed by setting the <a href=\"/docs/handbook/target-specification#logging\">logging target property</a> to <code class=\"language-text\">warn</code> or <code class=\"language-text\">error</code>.</p>\n</li>\n<li>\n<p><code class=\"language-text\">warning_print(format, ...)</code>: Use this for warning messages. These messages can be suppressed by setting the <a href=\"/docs/handbook/target-specification#logging\">logging target property</a> to <code class=\"language-text\">error</code>.</p>\n</li>\n<li>\n<p><code class=\"language-text\">error_print(format, ...)</code>: Use this for error messages. These messages are not suppressed by any <a href=\"/docs/handbook/target-specification#logging\">logging target property</a>.</p>\n</li>\n<li>\n<p><code class=\"language-text\">error_print_and_exit(format, ...)</code>: Use this for catastrophic errors.</p>\n</li>\n</ul>\n<p>In addition, a utility function is provided to register a function to redirect printed outputs:</p>\n<ul>\n<li><code class=\"language-text\">register_print_function(function)</code>: Register a function that will be used instead of <code class=\"language-text\">printf</code> to print messages generated by any of the above functions. The function should accept the same arguments as <code class=\"language-text\">printf</code>.</li>\n</ul>\n<h2 id=\"c-target-implementation-details\" style=\"position:relative;\"><a href=\"#c-target-implementation-details\" aria-label=\"c target implementation details permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C Target Implementation Details</h2>\n<h3 id=\"included-libraries\" style=\"position:relative;\"><a href=\"#included-libraries\" aria-label=\"included libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Included Libraries</h3>\n<p>The generated code includes the following standard C libraries, so there is no need for a reactor definition to explicitly include them if they are needed:</p>\n<ul>\n<li>stdio.h</li>\n<li>stdlib.h</li>\n<li>string.h</li>\n<li>time.h</li>\n<li>errno.h</li>\n</ul>\n<p>In addition, the multithreaded implementation uses</p>\n<ul>\n<li>pthread.h</li>\n</ul>\n<h3 id=\"single-threaded-implementation\" style=\"position:relative;\"><a href=\"#single-threaded-implementation\" aria-label=\"single threaded implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single Threaded Implementation</h3>\n<p>The runtime library for the single-threaded implementation is in the following files:</p>\n<ul>\n<li>reactor.c</li>\n<li>reactor_common.c (included in the above using #include)</li>\n<li>pqueue.c</li>\n</ul>\n<p>Three header files provide the interfaces:</p>\n<ul>\n<li>reactor.h</li>\n<li>ctarget.h</li>\n<li>pqueue.h</li>\n</ul>\n<p>The strategy is to have two queues of pending accessor invocations, one that is sorted by timestamp (the <strong>event queue</strong>) and one that is sorted by priority (the <strong>reaction queue</strong>). Execution proceeds as follows:</p>\n<ol>\n<li>\n<p>At initialization, an event for each timer is put on the event queue and logical time is initialized to the current time, represented as the number of nanoseconds elapsed since January 1, 1970.</p>\n</li>\n<li>\n<p>At each logical time, pull all events from event queue that have the same earliest time stamp, find the reactions that these events trigger, and put them on the reaction queue. If there are no events on the event queue, then exit the program (unless the <code class=\"language-text\">--keepalive true</code> command-line argument is given).</p>\n</li>\n<li>\n<p>Wait until physical time matches or exceeds that earliest timestamp (unless the <code class=\"language-text\">--fast true</code> command-line argument is given). Then advance logical time to match that earliest timestamp.</p>\n</li>\n<li>\n<p>Execute reactions in order of priority from the reaction queue. These reactions may produce outputs, which results in more events getting put on the reaction queue. Those reactions are assured of having lower priority than the reaction that is executing. If a reaction calls <code class=\"language-text\">schedule()</code>, an event will be put on the event queue, not the reaction queue.</p>\n</li>\n<li>\n<p>When the reaction queue is empty, go to 2.</p>\n</li>\n</ol>\n<h3 id=\"multithreaded-implementation\" style=\"position:relative;\"><a href=\"#multithreaded-implementation\" aria-label=\"multithreaded implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Multithreaded Implementation</h3>\n<p>The runtime library for the multithreaded implementation is in the following files:</p>\n<ul>\n<li>reactor_threaded.c</li>\n<li>reactor_common.c (included in the above using #include)</li>\n<li>pqueue.c</li>\n</ul>\n<p>The same two header files provide the interfaces:</p>\n<ul>\n<li>reactor.h</li>\n<li>pqueue.h</li>\n</ul>\n<p>The default number of worker threads is given by the <code class=\"language-text\">workers</code> argument in the <a href=\"/docs/handbook/target-specification#threading\">target</a> statement.\nThis can be overridden with the <code class=\"language-text\">--workers</code> <a href=\"#command-line-arguments\">command-line argument</a>.\nBy default, the number of workers will match the number of cores on the execution platform.</p>\n<p>Upon initialization, the main thread will create the specified number of worker threads.\nA good choice is for this number to match the number of available cores.\nExecution proceeds in a manner similar to the <a href=\"single-threaded-implementation\">single threaded implementation</a>\nexcept that the worker threads concurrently draw reactions from the reaction queue.\nThe execution algorithm ensures that no reaction executes until all reactions that it depends on that are also\non the reaction queue have executed at the current logical time.</p>\n</div>\n<div class=\"lf-cpp\">\n<p><span class=\"lf-c lf-py lf-ts lf-rs warning\"><strong>WARNING: This page documents only the Cpp target.</strong> Choose the C target language in the left sidebar to see the Cpp code examples.</span></p>\n<p>In the C++ reactor target for Lingua Franca, reactions are written in C++ and the code generator generates a standalone C++ program that can be compiled and run on all major platforms. Our continous integration ensures compatibility with Windows, MacOS and Linux.\nThe C++ target solely depends on a working C++ build system including a recent C++ compiler (supporting C++17) and <a href=\"https://cmake.org/\">CMake</a> (>= 3.5). It relies on the <a href=\"https://github.com/lf-lang/reactor-cpp\">reactor-cpp</a> runtime, which is automatically fetched and compiled in the background by the Lingua Franca compiler.</p>\n<p>Note that C++ is not a safe language. There are many ways that a programmer can circumvent the semantics of Lingua Franca and introduce nondeterminism and illegal memory accesses. For example, it is easy for a programmer to mistakenly send a message that is a pointer to data on the stack. The destination reactors will very likely read invalid data. It is also easy to create memory leaks, where memory is allocated and never freed. Note, however, that the C++ reactor library is designed to prevent common errors and to encourage a safe modern C++ style. Here, we introduce the specifics of writing Reactor programs in C++ and present some guidelines for a style that will be safe.</p>\n<h2 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p>The following tools are required in order to compile the generated C++ source code:</p>\n<ul>\n<li>A recent C++ compiler supporting C++17</li>\n<li>A recent version of cmake (At least 3.5)</li>\n</ul>\n<h2 id=\"the-c-target-specification-1\" style=\"position:relative;\"><a href=\"#the-c-target-specification-1\" aria-label=\"the c target specification 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The C++ Target Specification</h2>\n<p>To have Lingua Franca generate C++ code, start your <code class=\"language-text\">.lf</code> file with the following target specification:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that for all LF statements, the final semicolon is optional, but if you are writing your code in C++, you may want to include the final semicolon for uniformity.</p>\n<p>For options to the target specification, see <a href=\"/docs/handbook/target-specification\">detailed documentation of the target options</a>.</p>\n<h2 id=\"inputs-and-outputs-1\" style=\"position:relative;\"><a href=\"#inputs-and-outputs-1\" aria-label=\"inputs and outputs 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inputs and Outputs</h2>\n<p>In the body of a reaction in the C++ target, the value of an input is obtained using the syntax <code class=\"language-text\">*name.get()</code>, where <code class=\"language-text\">name</code> is the name of the input port. Note that <code class=\"language-text\">get()</code> always returns a pointer to the actual value. Thus the pointer needs to be dereferenced with <code class=\"language-text\">*</code> to obtain the value. (See <a href=\"#sending-and-receiving-large-data-types\">Sending and Receiving Large Data Types</a> for an explanation of the exact mechanisms behind this pointer access).\nTo determine whether an input is present, <code class=\"language-text\">name.is_present()</code> can be used. Since <code class=\"language-text\">get()</code> returns a <code class=\"language-text\">nullptr</code> if no value is present, <code class=\"language-text\">name.get() != nullptr</code> can be used alternatively for checking presence.</p>\n<p>For example, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/Determinism.lf\">Determinism.lf</a> test case in the <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/test/Cpp\">test directory</a> includes the following reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> Destination <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">input</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Received \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The reaction refers to the inputs <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> and tests for the presence of values using <code class=\"language-text\">x.is_present()</code> and <code class=\"language-text\">y.is_present()</code>. If a reaction is triggered by just one input, then normally it is not necessary to test for its presence; it will always be present. But in the above example, there are two triggers, so the reaction has no assurance that both will be present.</p>\n<p>Inputs declared in the <strong>uses</strong> part of the reaction do not trigger the reaction. Consider this modification of the above reaction:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Received: \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Inputs declared in the <strong>uses</strong> part of the reaction do not trigger the reaction. Consider this modification of the above reaction:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Received: \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is no longer necessary to test for the presence of <code class=\"language-text\">x</code> because that is the only trigger. The input <code class=\"language-text\">y</code>, however, may or may not be present at the logical time that this reaction is triggered. Hence, the code must test for its presence.</p>\n<p>The <strong>effects</strong> portion of the reaction specification can include outputs and actions. Actions will be described below. Outputs are set using a <code class=\"language-text\">set()</code> method on an output port. For example, we can further modify the above example as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">output</span> z<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> y <span class=\"token operator\">-></span> z <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n    <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    z<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>If an output gets set more than once at any logical time, downstream reactors will see only the <em>final</em> value that is set. Since the order in which reactions of a reactor are invoked at a logical time is deterministic, and whether inputs are present depends only on their timestamps, the final value set for an output will also be deterministic.</p>\n<p>An output may even be set in different reactions of the same reactor at the same logical time. In this case, one reaction may wish to test whether the previously invoked reaction has set the output. It can check <code class=\"language-text\">name.is_present()</code> to determine whether the output has been set. For example, the following reactor (see <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/TestForPreviousOutput.lf\">TestForPreviousOutput.lf</a>) will always produce the output 42:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> Source <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Set a seed for random number generation based on the current time.</span>\n        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">srand</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Randomly produce an output or not.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> previous_output <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> previous_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first reaction may or may not set the output to 21. The second reaction doubles the output if it has been previously produced and otherwise produces 42.</p>\n<h2 id=\"state-variables\" style=\"position:relative;\"><a href=\"#state-variables\" aria-label=\"state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Variables</h2>\n<p>A reactor may declare state variables, which become properties of each instance of the reactor. For example, the following reactor (see <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/lib/Count.lf\">Count.lf</a> and <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/CountTest.lf\">CountTest.lf</a>) will produce the output sequence 1, 2, 3, … :</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> Count <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> i<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> c<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> c <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The declaration on the second line gives the variable the name <code class=\"language-text\">count</code>, declares its type to be <code class=\"language-text\">int</code>, and initializes its value to 0. The type and initial value can be enclosed in the C++-code delimiters <code class=\"language-text\">{= ... =}</code> if they are not simple identifiers, but in this case, that is not necessary.</p>\n<p>In the body of the reaction, the state variable is automatically in scope and can be referenced directly by its name. Since all reactions, state variables and also parameters of a reactor are members of the same class, reactions can also reference state variables (or parameters) using the this pointer: <code class=\"language-text\">this->name</code>.</p>\n<p>A state variable may be a time value, declared as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">state</span> time_value<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The type of the generated <code class=\"language-text\">time_value</code> variable will be <code class=\"language-text\">reactor::Duration</code>, which is an alias for <a href=\"https://en.cppreference.com/w/cpp/chrono/duration\"><code class=\"language-text\">std::chrono::nanoseconds</code></a>.</p>\n<p>For the C++ target, Lingua Franca provides two alternative styles for initializing state variables. We can write <code class=\"language-text\">state foo:int(42)</code> or <code class=\"language-text\">state foo:int{42}</code>. This allows to distinguish between the different initialization styles in C++. <code class=\"language-text\">foo:int(42)</code> will be translated to <code class=\"language-text\">int foo(42)</code> and <code class=\"language-text\"> foo:int{42}</code> will be translated to <code class=\"language-text\">int foo{42}</code> in the generated code. Generally speaking, the <code class=\"language-text\">{...}</code> style should be preffered in C++, but it is not always applicable. Hence we allow the LF programmer to choose the style. Due to the peculiarities of C++, this is particularly important for more complex data types. For instance, <code class=\"language-text\">state foo:std::vector&lt;int>(4,2)</code> would be initialized to the list <code class=\"language-text\">[2,2,2,2]</code> whereas <code class=\"language-text\">state foo:std::vector&lt;int>{4,2}</code> would be initialized to the list <code class=\"language-text\">[4,2]</code>.</p>\n<p>State variables can have array values. For example, the [MovingAverage] (<a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/MovingAverage.lf\">https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/MovingAverage.lf</a>) reactor computes the <strong>moving average</strong> of the last four inputs each time it receives an input:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> MovingAverageImpl <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> delay_line<span class=\"token operator\">:</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> index<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Calculate the output.</span>\n        <span class=\"token keyword\">double</span> sum <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> delay_line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">/</span><span class=\"token number\">4.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Insert the input in the delay line.</span>\n        delay_line<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Update the index for the next input.</span>\n        index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The second line declares that the type of the state variable is an fixed-size array of 3 <code class=\"language-text\">double</code>s with the initial value of the being filled with zeros (note the curly braces). If the size is given in the type specification, then the code generator will declare the type of the state variable using <a href=\"https://en.cppreference.com/w/cpp/container/array\"><code class=\"language-text\">std::array</code></a>. In the example above, the type of <code class=\"language-text\">delay_line</code> is <code class=\"language-text\">std::array&lt;3, double></code>. If the size specifier is omitted (e.g. <code class=\"language-text\">state x:double[]</code>). The code generator will produce a variable-sized array using <a href=\"https://en.cppreference.com/w/cpp/container/vector\"><code class=\"language-text\">std::vector</code></a>.</p>\n<p>State variables with more complex types such as classes or structs can be similiarly initialized. See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/StructAsState.lf\">StructAsState.lf</a>.</p>\n<h2 id=\"parameters\" style=\"position:relative;\"><a href=\"#parameters\" aria-label=\"parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameters</h2>\n<p>Reactor parameters work similar to state variables in C++. However, they are always declared as <code class=\"language-text\">const</code> and initialized during reactor instantiation. Thus, the value of a parameter may not be changed. For example, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/Stride.lf\">Stride</a> reactor modifies the above <code class=\"language-text\">Count</code> reactor so that its stride is a parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>stride<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        y<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        count <span class=\"token operator\">+=</span> stride<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">reactor</span> Display <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n    \tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Received \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Stride <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-></span> d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first line defines the <code class=\"language-text\">stride</code> parameter, gives its type, and gives its initial value. As with state variables, the type and initial value can be enclosed in <code class=\"language-text\">{= ... =}</code> if necessary.</p>\n<p>When the reactor is instantiated, the default parameter value can be overridden. This is done in the above example near the bottom with the line:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If there is more than one parameter, use a comma separated list of assignments.</p>\n<p>Also parameters can have fixed- or variable-sized array values. The <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/ArrayAsParameter.lf\">ArrayAsParameter</a> example outputs the elements of an array as a sequence of individual messages:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Source</span><span class=\"token punctuation\">(</span>sequence<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> next<span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out<span class=\"token punctuation\">,</span> next <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> sequence<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            next<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <strong>logical action</strong> named <code class=\"language-text\">next</code> and the <code class=\"language-text\">schedule</code> method are explained below in <a href=\"#Scheduling-Delayed-Reactions\">Scheduling Delayed Reactions</a>; here they are used simply to repeat the reaction until all elements of the array have been sent. Note that similiar aas for state variables, curly braces <code class=\"language-text\">{...}</code> can optionally be used for initialization.</p>\n<p>Note that also the main reactor can be parameterized:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span>msg<span class=\"token operator\">:</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">&lt;&lt;</span> msg <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"!\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This program will print “Hello World!” by default. However, since <code class=\"language-text\">msg</code> is a main reactor parameter, the C++ code generator will extend the CLI argument parser and allow to overwrite <code class=\"language-text\">msg</code> when invoking the program. For instance,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">bin/Hello --msg Earth</code></pre></div>\n<p>will result in “Hello Earth!” being printed.</p>\n<h2 id=\"sending-and-receiving-large-data-types\" style=\"position:relative;\"><a href=\"#sending-and-receiving-large-data-types\" aria-label=\"sending and receiving large data types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sending and Receiving Large Data Types</h2>\n<p>You can define your own datatypes in C++ or use types defined in a library and send and receive those. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/StructAsType.lf\">StructAsType</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> StructAsType <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n            std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span>Hello<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        Hello hello<span class=\"token punctuation\">{</span>\"Earth<span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <strong>preamble</strong> code defines a struct datatype. In the reaction to <strong>startup</strong>, the reactor creates an instance of this struct on the stack (as a local variable named <code class=\"language-text\">hello</code>) and then copies that instance to the output using the <code class=\"language-text\">set()</code> method. For this reason, the C++ reactor runtime provides more sophisticated ways to allocate objects and send them via ports.</p>\n<p>The C++ library defines two types of smart pointers that the runtime uses internally to implement the exchange of data between ports. These are <code class=\"language-text\">reactor::MutableValuePtr&lt;T></code> and <code class=\"language-text\">reactor::ImmutableValuePtr&lt;T></code>. <code class=\"language-text\">reactor::MutableValuePtr&lt;T></code> is a wrapper around <a href=\"https://en.cppreference.com/w/cpp/memory/unique_ptr\"><code class=\"language-text\">std::unique_ptr</code></a> and provides read and write access to the value hold, while ensuring that the value has a unique owner. In contrast, <code class=\"language-text\">reactor::ImmutableValuePtr&lt;T></code> is a wrapper around <a href=\"https://en.cppreference.com/w/cpp/memory/shared_ptr\"><code class=\"language-text\">std::shared_pointer</code></a> and provides read only (const) access to the value it holds. This allows data to be shared between reactions of various reactors, while guarantee data consistency. Similar to <code class=\"language-text\">std::make_unique</code> and <code class=\"language-text\">std::make_shared</code>, the reactor library provides convenient function for creating mutable and immutable values pointers: <code class=\"language-text\">reactor::make_mutable_value&lt;T>(...)</code> and <code class=\"language-text\">reactor::make_immutable_value&lt;T>(...)</code>.</p>\n<p>In fact this code from the example above:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">Hello hello<span class=\"token punctuation\">{</span>\"Earth<span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nout<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>implicitly invokes <code class=\"language-text\">reactor::make_immutable_value&lt;Hello>(hello)</code> and could be rewritten as</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">Hello hello<span class=\"token punctuation\">{</span>\"Earth<span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nout<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">reactor</span><span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_immutable_value</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Hello<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will invoke the copy constructor of <code class=\"language-text\">Hello</code>, copying its content from the <code class=\"language-text\">hello</code> instance to the newly created <code class=\"language-text\">reactor::ImmutableValuePtr&lt;Hello></code>.</p>\n<p>Since copying large objects is inefficient, the move semantics of C++ can be used to move the ownership of object instead of copying it. This can be done in the following two ways. First, by directly creating a mutable or immutable value pointer, where a mutable pointer allows modification of the object after it has been created:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token keyword\">auto</span> hello <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">reactor</span><span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_mutable_value</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Hello<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhello<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Mars\"</span><span class=\"token punctuation\">;</span>\nout<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>An example of this can be found in <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/StructPrint.lf\">StructPrint.lf</a>. Not that after the call to <code class=\"language-text\">std::move</code>, hello is <code class=\"language-text\">nullptr</code> and the reaction cannot modify the object anymore. Alternatively, if no modification is requires, the object can be instantiated directly in the call to <code class=\"language-text\">set()</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>An example of this can be found in <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/StructAsTypeDirect.lf\">StructAsTypeDirect</a>.</p>\n<p>Getting a value from an input port of type <code class=\"language-text\">T</code> via <code class=\"language-text\">get()</code> always returns an <code class=\"language-text\">reactor::ImmutableValuePtr&lt;T></code>. This ensures that the value cannot be modified by multiple reactors receiving the same value, as this could lead to an inconsistent state and nondeterminism in a multi-threaded execution. An immutable value pointer can be converted to a mutable pointer by calling <code class=\"language-text\">get_mutable_copy</code>. For instance, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/ArrayScale.lf\">ArrayScale</a> reactor modifies elements of the array it receives before sending it to the next reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Scale</span><span class=\"token punctuation\">(</span>scale<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">auto</span> array <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_mutable_copy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Currently <code class=\"language-text\">get_mutable_copy()</code> always copies the contained value to safely create a mutable pointer. However, a future implementation could optimize this by checking if any other reaction is accessing the same value. If not, the value can simply be moved from the immutable pointer to a mutable one.</p>\n<h2 id=\"time-1\" style=\"position:relative;\"><a href=\"#time-1\" aria-label=\"time 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time</h2>\n<p>Timers are specified exactly as in the <a href=\"/docs/handbook/time-and-timers\">Time and Timers</a>. When working with time in the C++ code body of a reaction, however, you will need to know a bit about its internal representation.</p>\n<p>The reactor-cpp library uses <a href=\"https://en.cppreference.com/w/cpp/chrono\"><code class=\"language-text\">std::chrono</code></a> for representing time. Specifically, the library defines two types for representing durations and timepoints: <code class=\"language-text\">reactor::Duration</code> and <code class=\"language-text\">reactor::TimePoint</code>. <code class=\"language-text\">reactor::Duration</code> is an alias for <a href=\"https://en.cppreference.com/w/cpp/chrono/duration\"><code class=\"language-text\">std::chrono::nanosecods</code></a>. <code class=\"language-text\">reactor::TimePoint</code> is alias for <a href=\"https://en.cppreference.com/w/cpp/chrono/time_point\"><code class=\"language-text\">std::chrono::time_point&lt;std::chrono::system_clock, std::chrono::nanoseconds></code></a>. As you can see from these definitions, the smallest time step that can be represented is one nanosecond. Note that <code class=\"language-text\">reactor::TimePoint</code> describes a specific point in time and is associated with a specific clock, whereas <code class=\"language-text\">reactor::Duration</code> defines a time interval between two time points.</p>\n<p>Lingua Franca uses a superdense model of logical time. A reaction is invoked at a logical <strong>tag</strong>. In the C++ library, a tag is represented by the class <code class=\"language-text\">reactor::Tag</code>. In essence, this class is a tuple of a <code class=\"language-text\">reactor::TimePoint</code> representing a specific point in logical time and a microstep value (of type <code class=\"language-text\">reactor::mstep_t</code>, which is an alias for <code class=\"language-text\">unsigned long</code>). <code class=\"language-text\">reactor::Tag</code> provides two methods for getting the time point or the microstep:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token keyword\">const</span> TimePoint<span class=\"token operator\">&amp;</span> <span class=\"token function\">time_point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mstep_t<span class=\"token operator\">&amp;</span> <span class=\"token function\">micro_step</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The C++ code in reaction bodies has access to library functions that allow to retrieve the current logical or physical time:</p>\n<ul>\n<li><code class=\"language-text\">TimePoint get_physical_time()</code>: Get the current physical time.</li>\n<li><code class=\"language-text\">TimePoint get_logcial_time()</code>: Get the current logical time.</li>\n<li><code class=\"language-text\">Duration get_elapsed_physical_time()</code>: Get the physical time elapsed since program start.</li>\n<li><code class=\"language-text\">Duration get_elapsed_logical_time()</code>: Get the logical time elapsed since program start.</li>\n</ul>\n<p>A reaction can examine the current logical time (which is constant during the execution of the reaction). For example, consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/GetTime.lf\">GetTime</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">auto</span> <span class=\"token lf_keywords\">logical</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Logical time is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token lf_keywords\">logical</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that the <code class=\"language-text\">&lt;&lt;</code> operator is overloaded for both <code class=\"language-text\">reactor::TimePoint</code> and <code class=\"language-text\">reactor::Duration</code> and will print the time information accordingly.</p>\n<p>When executing the above program, you will see something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[INFO]  Starting the execution\nLogical time is 2021-05-19 14:06:09.496828396\nLogical time is 2021-05-19 14:06:10.496828396\nLogical time is 2021-05-19 14:06:11.496828396\nLogical time is 2021-05-19 14:06:11.496828396\n...</code></pre></div>\n<p>If you look closely, you will see that each printed logical time is one second larger than the previous one.</p>\n<p>You can also obtain the <em>elapsed</em> logical time since the start of execution:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">auto</span> elapsed <span class=\"token operator\">=</span> <span class=\"token function\">get_elapsed_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Elapsed logical time is \"</span> <span class=\"token operator\">&lt;&lt;</span> elapsed <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"In seconds: \"</span> <span class=\"token operator\">&lt;&lt;</span>  std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">duration_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>seconds<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>elapsed<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using <code class=\"language-text\">std::chrono</code> it is also possible to convert between time units and directly print the number of elapsed seconds as seen above. The resulting output of this program will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[INFO]  Starting the execution\nElapsed logical time is 0 nsecs\nIn seconds: 0 secs\nElapsed logical time is 1000000000 nsecs\nIn seconds: 1 secs\nElapsed logical time is 2000000000 nsecs\nIn seconds: 2 secs\n...</code></pre></div>\n<p>You can also get physical and elapsed physical time:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">auto</span> <span class=\"token lf_keywords\">logical</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">auto</span> <span class=\"token lf_keywords\">physical</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_physical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> elapsed <span class=\"token operator\">=</span> <span class=\"token function\">get_elapsed_physical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Physical time is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token lf_keywords\">physical</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Elapsed physical time is \"</span> <span class=\"token operator\">&lt;&lt;</span> elapsed <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Time lag is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token lf_keywords\">physical</span> <span class=\"token operator\">-</span> <span class=\"token lf_keywords\">logical</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n   <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that the physical times are increasing by <em>roughly</em> one second in each reaction. The output also shows the lag between physical and logical time. If you set the <code class=\"language-text\">fast</code> target parameter to <code class=\"language-text\">true</code>, then physical time will elapse much faster than logical time. The above program will produce something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[INFO]  Starting the execution\nPhysical time is 2021-05-19 14:25:18.070523014\nElapsed physical time is 2601601 nsecs\nTime lag is 2598229 nsecs\nPhysical time is 2021-05-19 14:25:19.068038275\nElapsed physical time is 1000113888 nsecs\nTime lag is 113490 nsecs\n[INFO]  Physical time is Terminating the execution\n2021-05-19 14:25:20.068153026\nElapsed physical time is 2000228689 nsecs\nTime lag is 228241 nsecs</code></pre></div>\n<p>For specifying time durations in code <a href=\"https://en.cppreference.com/w/cpp/header/chrono\">chrono</a> provides convenient literal operators in <code class=\"language-text\">std::chrono_literals</code>. This namespace is automatically included for all reaction bodies. Thus, we can simply write:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">42u</span>s <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span>ms <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span>s <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></code></pre></div>\n<p>which prints:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">42 usecs\n1 msecs\n3 secs</code></pre></div>\n<h2 id=\"scheduling-delayed-reactions\" style=\"position:relative;\"><a href=\"#scheduling-delayed-reactions\" aria-label=\"scheduling delayed reactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduling Delayed Reactions</h2>\n<p>The C++ provides a simple interface for scheduling actions via a <code class=\"language-text\">schedule()</code> method. Actions are described in the <a href=\"language-specification#action-declaration\">Language Specification</a> document. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/Schedule.lf\">Schedule</a> reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> Schedule <span class=\"token punctuation\">{</span>\n\t<span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n         <span class=\"token keyword\">auto</span> elapsed_time <span class=\"token operator\">=</span> <span class=\"token function\">get_elapsed_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Action triggered at logical time \"</span> <span class=\"token operator\">&lt;&lt;</span> elapsed_time<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" after start\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> elapsed_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When this reactor receives an input <code class=\"language-text\">x</code>, it calls <code class=\"language-text\">schedule()</code> on the action <code class=\"language-text\">a</code>, specifying a logical time offset of 200 milliseconds. The action <code class=\"language-text\">a</code> will be triggered at a logical time 200 milliseconds after the arrival of input <code class=\"language-text\">x</code>. At that logical time, the second reaction will trigger and will use the <code class=\"language-text\">get_elapsed_logical_time()</code> function to determine how much logical time has elapsed since the start of execution.</p>\n<p>Notice that after the logical time offset of 200 msec, there may be another input <code class=\"language-text\">x</code> simultaneous with the action <code class=\"language-text\">a</code>. Because the reaction to <code class=\"language-text\">a</code> is given first, it will execute first. This becomes important when such a reactor is put into a feedback loop (see below).</p>\n<p><strong>TODO: Explain physical actions as well!</strong></p>\n<h2 id=\"zero-delay-actions\" style=\"position:relative;\"><a href=\"#zero-delay-actions\" aria-label=\"zero delay actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Zero-Delay Actions</h2>\n<p>If the specified delay in a <code class=\"language-text\">schedule()</code> is omitted or is zero, then the action <code class=\"language-text\">a</code> will be triggered one <strong>microstep</strong> later in <strong>superdense time</strong> (see <a href=\"language-specification#superdense-time\">Superdense Time</a>). Hence, if the input <code class=\"language-text\">x</code> arrives at metric logical time <em>t</em>, and you call <code class=\"language-text\">schedule()</code> in one of the following ways:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">reactor</span><span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Duration</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">zero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>then when the reaction to <code class=\"language-text\">a</code> is triggered, the input <code class=\"language-text\">x</code> will be absent (it was present at the <em>previous</em> microstep). The reaction to <code class=\"language-text\">x</code> and the reaction to <code class=\"language-text\">a</code> occur at the same metric time <em>t</em>, but separated by one microstep, so these two reactions are <em>not</em> logically simultaneous.</p>\n<p>As discussed above the he metric time is visible to the rogrammer and can be obtained in a reaction using either <code class=\"language-text\">get_elapsed_logical_time()</code> or <code class=\"language-text\">get_logical_time()</code>.</p>\n<p>As described in the <a href=\"language-specification#action-declaration\">Language Specification</a> document, action declarations can have a <em>min_delay</em> parameter. This modifies the timestamp further. Also, the action declaration may be <strong>physical</strong> rather than <strong>logical</strong>, in which case, the assigned timestamp will depend on the physical clock of the executing platform.</p>\n<h2 id=\"actions-with-values-1\" style=\"position:relative;\"><a href=\"#actions-with-values-1\" aria-label=\"actions with values 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions With Values</h2>\n<p>If an action is declared with a data type, then it can carry a <strong>value</strong>, a data value that becomes available to any reaction triggered by the action. This is particularly useful for physical actions that are externally triggered because it enables the action to convey information to the reactor. This could be, for example, the body of an incoming network message or a numerical reading from a sensor.</p>\n<p>Recall from the <a href=\"language-specification#Contained-Reactors\">Contained Reactors</a> section in the Language Specification document that the <strong>after</strong> keyword on a connection between ports introduces a logical delay. This is actually implemented using a logical action. We illustrate how this is done using the <a href=\"https://github.com/tud-ccc/reactor-cpp/blob/master/include/reactor-cpp/logical_time.hh\">DelayInt</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span>delay<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> d<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> d <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        d<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using this reactor as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsource<span class=\"token punctuation\">.</span>out <span class=\"token operator\">-></span> d<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">;</span>\nd<span class=\"token punctuation\">.</span>in <span class=\"token operator\">-></span> sink<span class=\"token punctuation\">.</span>out</code></pre></div>\n<p>is equivalent to</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">source<span class=\"token punctuation\">.</span>out <span class=\"token operator\">-></span> sink<span class=\"token punctuation\">.</span>in <span class=\"token lf_keywords\">after</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span></code></pre></div>\n<p>(except that our <code class=\"language-text\">Delay</code> reactor will only work with data type <code class=\"language-text\">int</code>).</p>\n<p>The action <code class=\"language-text\">d</code> is specified with a type <code class=\"language-text\">int</code>. The reaction to the input <code class=\"language-text\">in</code> declares as its effect the action <code class=\"language-text\">d</code>. This declaration makes it possible for the reaction to schedule a future triggering of <code class=\"language-text\">d</code>. In the C++ target, actions use the same mechanism for passing data via value pointers as do ports. In the example above, the <code class=\"language-text\">reactor::ImmutablValuePtr&lt;int></code> derived by the call to <code class=\"language-text\">in.get()</code> is passed directly to <code class=\"language-text\">schedule()</code>. Similarly, the value can later be retrieved from the action with <code class=\"language-text\">d.get()</code> and passed to the output port.</p>\n<p>The first reaction declares that it is triggered by <code class=\"language-text\">d</code> and has effect <code class=\"language-text\">out</code>. Because this reaction is first, the <code class=\"language-text\">out</code> at any logical time can be produced before the input <code class=\"language-text\">in</code> is even known to be present. Hence, this reactor can be used in a feedback loop, where <code class=\"language-text\">out</code> triggers a downstream reactor to send a message back to <code class=\"language-text\">in</code> of this same reactor. If the reactions were given in the opposite order, there would be causality loop and compilation would fail.</p>\n<p>If you are not sure whether an action carries a value, you can test for it using <code class=\"language-text\">is_present()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is possible to both be triggered by and schedule an action the same reaction. For example, this reactor will produce a counting sequence after it is triggered the first time:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">CountSelf</span><span class=\"token punctuation\">(</span>delay<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a<span class=\"token punctuation\">,</span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule_int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a<span class=\"token punctuation\">,</span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule_int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Of course, to produce a counting sequence, it would be more efficient to use a state variable.</p>\n<h2 id=\"stopping-execution-1\" style=\"position:relative;\"><a href=\"#stopping-execution-1\" aria-label=\"stopping execution 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stopping Execution</h2>\n<p>A reaction may request that the execution stops after all events with the current timestamp have been processed by calling <code class=\"language-text\">environment()->sync_shutdown()</code>. There is also a method <code class=\"language-text\">environment()->async_shutdown()</code>\nwhich may be invoked from outside an reaction, like an external thread.</p>\n<h2 id=\"log-and-debug-information-1\" style=\"position:relative;\"><a href=\"#log-and-debug-information-1\" aria-label=\"log and debug information 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Log and Debug Information</h2>\n<p>The reactor-cpp library provides logging utilities in <a href=\"https://github.com/tud-ccc/reactor-cpp/blob/master/include/reactor-cpp/logging.hh\">logging.hh</a> for producing messages to be made visible when the generated program is run. Of course <code class=\"language-text\">std::cout</code> or <code class=\"language-text\">printf</code> can be used for the same purpose, but the logging mechanism provided by reactor-cpp is thread-safe ensuring that messages produced in parallel reactions are not interleaved with each other and provides common way for turning messages of a certain severity on and off.</p>\n<p>In particular, reactor-cpp provides the following logging interfaces:</p>\n<ul>\n<li><code class=\"language-text\">reactor::Debug()</code>: for verbose debug messages</li>\n<li><code class=\"language-text\">reactor::Info()</code>: for info messages of general interest, info is the default severity level</li>\n<li><code class=\"language-text\">reactor::Warning()</code>: for warning messages</li>\n<li><code class=\"language-text\">reactor::Error()</code>: for errors</li>\n</ul>\n<p>These utilities can be used analogues to <code class=\"language-text\">std::cout</code>. For instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World! It is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">get_physical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that unlike <code class=\"language-text\">std::cout</code> the new line delimiter is automatically added to the end of the message.</p>\n<p>Which type of messages are actually produced by the compiled program can be controlled with the <code class=\"language-text\">log-level</code> target property.</p>\n</div>\n<div class=\"lf-py\">\n<p><span class=\"lf-cpp lf-c lf-ts lf-rs warning\"><strong>WARNING: This page documents only the Python target.</strong> Choose the Python target language in the left sidebar to see the Python code examples.</span></p>\n<p>In the Python reactor target for Lingua Franca, reactions are written in Python. The user-written reactors are then generated into a Python 3 script that can be executed on several platforms. The Python target has been tested on Linux, MacOS, and Windows. To facilitate efficient and fast execution of Python code, the generated program relies on a C extension to facilitate Lingua Franca APIs such as <code class=\"language-text\">set</code> and <code class=\"language-text\">schedule</code>. To learn more about the structure of the generated Python program, see <a href=\"#python-target-implementation-details\">Implementation Details</a>.</p>\n<p>Python reactors can bring the vast library of scientific modules that exist for Python into a Lingua Franca program. Moreover, since the Python reactor target is based on a fast and efficient C runtime library, Lingua Franca programs can execute much faster than native equivalent Python programs in many cases. Finally, interoperability with C reactors is planned for the future.</p>\n<p>In comparison to the C target, the Python target can be up to an order of magnitude slower. However, depending on the type of application and the implementation optimizations in Python, you can achieve an on-par performance to the C target in many applications.</p>\n<h2 id=\"setup-1\" style=\"position:relative;\"><a href=\"#setup-1\" aria-label=\"setup 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p>First, install Python 3 on your machine. See <a href=\"https://wiki.python.org/moin/BeginnersGuide/Download\">downloading Python</a>.</p>\n<p><strong>NOTE:</strong> The Python target requires a C implementation of Python (nicknamed CPython). This is what you will get if you use the above link, or with most of the alternative Python installations such as Anaconda. See <a href=\"https://www.python.org/download/alternatives/\">this</a> for more details.</p>\n<p>The Python reactor target relies on <code class=\"language-text\">pip</code> and <code class=\"language-text\">setuptools</code> to be able to compile and install a <a href=\"https://docs.python.org/3/extending/extending.html\">Python C extension</a> for each LF program. To install <code class=\"language-text\">pip3</code>, you can follow instructions <a href=\"https://pip.pypa.io/en/stable/installation/\">here</a>.\n<code class=\"language-text\">setuptools</code> can be installed using <code class=\"language-text\">pip3</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> setuptools</code></pre></div>\n<p><strong>NOTE:</strong> A <a href=\"https://docs.python.org/3/extending/extending.html\">Python C extension</a> is currently generated for each Lingua Franca program. To ensure cross-compatibility across multiple platforms, this extension is installed in the user space once code generation is finished (see <a href=\"#python-target-implementation-details\">Implementation Details</a>). This extension module will have the name LinguaFranca[your_LF_program_name]. There is a handy script <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/uninstallAllLinguaFrancaTestPackages.sh\">uninstallAllLinguaFrancaTestPackages.sh</a> that can uninstall all extension modules that are installed automatically by Lingua Franca tools (such as <code class=\"language-text\">lfc</code>).</p>\n<h2 id=\"examples\" style=\"position:relative;\"><a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h2>\n<p>To see a few interactive examples written using the Python target, see <a href=\"https://github.com/lf-lang/examples-lingua-franca/tree/main/Python/src\">the examples-lingua-franca repository</a>.</p>\n<p>The <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/test/Python\">Python CI tests</a> might also act as a reference in some cases for the capabilities of the Python target.</p>\n<h2 id=\"key-limitations\" style=\"position:relative;\"><a href=\"#key-limitations\" aria-label=\"key limitations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key Limitations</h2>\n<ul>\n<li>\n<p>On some platforms (Mac, in particular), if you generate code from within the Epoch IDE, the code will not run. It fails to find the needed libraries. As a workaround, please compile the code using the <a href=\"/docs/handbook/command-line-tools\">command-line tool, lfc</a>.</p>\n</li>\n<li>\n<p>The Lingua Franca lexer does not support single-quoted strings in Python. This limitation also applies to target property values. You must use double quotes.</p>\n</li>\n</ul>\n<h2 id=\"the-python-target-specification\" style=\"position:relative;\"><a href=\"#the-python-target-specification\" aria-label=\"the python target specification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Python Target Specification</h2>\n<p>To have Lingua Franca generate Python code, start your <code class=\"language-text\">.lf</code> file with the following target specification:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target Python</code></pre></div>\n<p>Note that for all LF statements, a final semicolon is optional, but if you are writing your code in Python, you may want to omit the final semicolon for uniformity.</p>\n<p>For options to the target specification, see <a href=\"/docs/handbook/target-specification\">detailed documentation of the target options</a>.</p>\n<p>For example, for the Python target, in a source file named <code class=\"language-text\">Foo.lf</code>, you might specify:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target Python {\n    fast: true,\n    timeout: 10 secs\n};</code></pre></div>\n<p>The <code class=\"language-text\">fast</code> option given above specifies to execute the file as fast as possible, ignoring timing delays. This is achieved by not waiting for physical time to match logical time. The <code class=\"language-text\">timeout</code> option specifies to stop after 10 seconds of logical time have elapsed.</p>\n<p>These specify the <em>default</em> behavior of the generated code, the behavior it will exhibit if you give no command-line option.</p>\n<h2 id=\"inputs-and-outputs-2\" style=\"position:relative;\"><a href=\"#inputs-and-outputs-2\" aria-label=\"inputs and outputs 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inputs and Outputs</h2>\n<p>In the body of a reaction in the Python target, the value of an in put is obtained using the syntax <code class=\"language-text\">name.value</code>, where <code class=\"language-text\">name</code> is the name of the input port. To determine whether an input is present, use <code class=\"language-text\">name.is_present</code>. For example, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/Determinism.lf\">Determinism.lf</a> test case in the <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/test/Python\">test directory</a> includes the following reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">reactor</span> Destination <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">input</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        sm <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span>is_present<span class=\"token punctuation\">:</span>\n            sm <span class=\"token operator\">+=</span> x<span class=\"token punctuation\">.</span>value\n        <span class=\"token keyword\">if</span> y<span class=\"token punctuation\">.</span>is_present<span class=\"token punctuation\">:</span>\n            sm <span class=\"token operator\">+=</span> y<span class=\"token punctuation\">.</span>value\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received \"</span><span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> sm <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"FAILURE: Expected 2.\\n\"</span><span class=\"token punctuation\">)</span>\n            exit<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The reaction refers to the input values <code class=\"language-text\">x.value</code> and <code class=\"language-text\">y.value</code> and tests for their presence by referring to the variables <code class=\"language-text\">x.is_present</code> and <code class=\"language-text\">y.is_present</code>. If a reaction is triggered by just one input, then normally it is not necessary to test for its presence; it will always be present. But in the above example, there are two triggers, so the reaction has no assurance that both will be present.</p>\n<p>Notice that in the Python target, reactor elements like inputs, outputs, actions, parameters, and state variables are not typed. This effectively allows for any valid Python object to be passed on these elements. For more details and examples on using various Python object types, see <a href=\"#sending-and-receiving-objects\">Sending and Receiving Objects</a>.</p>\n<p>Inputs declared in the <strong>uses</strong> part of the reaction do not trigger the reaction. Consider the following modification to the above reaction:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n    sm <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">if</span> y<span class=\"token punctuation\">.</span>is_present<span class=\"token punctuation\">:</span>\n        sm <span class=\"token operator\">+=</span> y<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received \"</span><span class=\"token punctuation\">,</span> sm<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is no longer necessary to test for the presence of <code class=\"language-text\">x</code> because that is the only trigger. The input <code class=\"language-text\">y</code>, however, may or may not be present at the logical time that this reaction is triggered. Hence, the code must test for its presence.</p>\n<p>The <strong>effects</strong> portion of the reaction specification can include outputs and actions. Actions will be described below. Outputs are set using a <code class=\"language-text\">SET</code> macro. For example, we can further modify the above example as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">output</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> y <span class=\"token operator\">-</span><span class=\"token operator\">></span> z <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n    sm <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>value\n    <span class=\"token keyword\">if</span> y<span class=\"token punctuation\">.</span>is_present<span class=\"token punctuation\">:</span>\n        sm <span class=\"token operator\">+=</span> y<span class=\"token punctuation\">.</span>value\n    z<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>sm<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">set</code> function on an output port will perform the following operation:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\">z<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> sm\nz<span class=\"token punctuation\">.</span>is_present <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></code></pre></div>\n<p>The <code class=\"language-text\">set</code> function can be used to set any valid Python object. For more information, see <a href=\"#sending-and-receiving-objects\">Sending and Receiving Objects</a>.</p>\n<p>If an output gets set more than once at any logical time, downstream reactors will see only the <em>final</em> value that is set. Since the order in which reactions of a reactor are invoked at a logical time is deterministic, and whether inputs are present depends only on their timestamp, the final value set for an output will also be deterministic.</p>\n<p>An output may even be set in different reactions of the same reactor at the same logical time. In this case, one reaction may wish to test whether the previously invoked reaction has set the output. It can check <code class=\"language-text\">name.is_present</code> to determine whether the output has been set. For example, the following reactor (see <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/TestForPreviousOutput.lf\">TestForPreviousOutput.lf</a>) will always produce the output 42:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">reactor</span> Source <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token lf_keywords\">import</span> random\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\"># Set a seed for random number generation based on the current time.</span>\n        self<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># Randomly produce an output or not.</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> out<span class=\"token punctuation\">.</span>is_present<span class=\"token punctuation\">:</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> out<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first reaction may or may not set the output to 21. The second reaction doubles the output if it has been previously produced and otherwise produces 42.</p>\n<h2 id=\"state-variables-1\" style=\"position:relative;\"><a href=\"#state-variables-1\" aria-label=\"state variables 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Variables</h2>\n<p>A reactor may declare state variables, which become properties of each instance of the reactor. For example, the following reactor (see <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/lib/Count.lf\">Count.lf</a>) will produce the output sequence 1, 2, 3, … :</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">reactor</span> Count <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> t<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The declaration on the second line gives the variable the name “count”, and initializes its value to 1.</p>\n<p>The initial value is the expression enclosed within the parentheses. It may be any <a href=\"Language-Specification.md#appendix-lf-expressions\">LF expression</a>, including an integer like seen above. LF supports only simple expression forms, if you need an arbitrary Python expression, you can enclose it within the Python-code delimiters <code class=\"language-text\">{= ... =}</code> (see example below).</p>\n<p>In the body of the reaction, the state variable is referenced using the syntax <code class=\"language-text\">self.count</code>. Here, <code class=\"language-text\">self</code> is a keyword that refers to the generated reactor class in Python and contains all the instance-specific data associated with an instance of the reactor. For more information regarding the implementation details of the Python target, see <a href=\"#python-target-implementation-details\">Implementation Details</a>. Since each instance of a reactor has its own state variables, these variables are carried in the self object.</p>\n<p>In certain cases, such as when more control is needed for initialization of certain class objects, this method might be preferable. Nonetheless, the code delimiters <code class=\"language-text\">{= ... =}</code> can also also be used. The following example, taken from <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/StructAsState.lf\">StructAsState.lf</a> demonstrates this usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> StructAsState <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">class</span> <span class=\"token class-name\">hello</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n                self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">state</span> s <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>hello<span class=\"token punctuation\">(</span><span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State s.name='{:s}', value={:d}.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">:</span>\n            sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"FAILED: Expected 42.\\n\"</span><span class=\"token punctuation\">)</span>\n            exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that a class <code class=\"language-text\">hello</code> is defined in the preamble. The state variable <code class=\"language-text\">s</code> is then initialized to an instance of <code class=\"language-text\">hello</code> constructed within the <code class=\"language-text\">{= ... =}</code> delimiters.</p>\n<p>State variables may be initialized to lists or tuples without requiring <code class=\"language-text\">{= ... =}</code> delimiters. The following illustrates the difference:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Foo <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> a_tuple<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> a_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\"># will print \"&lt;class 'tuple'> != &lt;class 'list'>\"</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0} != {1}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>a_tuple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>a_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In Python, tuples are immutable, while lists can be modified. Be aware also that the syntax for declaring tuples in the Python target is the same syntax as to declare an array in the C target, so the immutability might be a surprise.</p>\n<h2 id=\"parameters-1\" style=\"position:relative;\"><a href=\"#parameters-1\" aria-label=\"parameters 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameters</h2>\n<p>Reactor parameters are also referenced in the Python code using the <code class=\"language-text\">self</code> object. The <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/Stride.lf\">Stride.lf</a> example modifies the above <code class=\"language-text\">Count</code> reactor so that its stride is a parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Count<span class=\"token punctuation\">(</span>stride<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> t<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        y<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>stride\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">reactor</span> Display <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> expected<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> <span class=\"token keyword\">for</span> testing<span class=\"token punctuation\">.</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received: \"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!=</span> self<span class=\"token punctuation\">.</span>expected<span class=\"token punctuation\">:</span>\n            sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"ERROR: Expected {:d}.\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>expected <span class=\"token operator\">+=</span> <span class=\"token number\">2</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Stride <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> Count<span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    d <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> Display<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The second line defines the <code class=\"language-text\">stride</code> parameter and gives its initial value. As with state variables, types are not allowed. The initial value can be alternatively put in <code class=\"language-text\">{= ... =}</code> if necessary. The parameter is referenced in the reaction with the syntax <code class=\"language-text\">self.stride</code>.</p>\n<p>When the reactor is instantiated, the default parameter value can be overridden. This is done in the above example near the bottom with the line:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Count</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If there is more than one parameter, use a comma-separated list of assignments.</p>\n<p>Like state variables, parameters can have list or tuple values. In the following example, the parameter <code class=\"language-text\">sequence</code> has as default value the list <code class=\"language-text\">[0, 1, 2]</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">reactor</span> Source<span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> out<span class=\"token punctuation\">,</span> <span class=\"token builtin\">next</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sequence<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>count<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sequence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That default value can be overridden when instantiating the reactor using a similar syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Source</span><span class=\"token punctuation\">(</span>sequence <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that as any ordinary Python list, <code class=\"language-text\">len(self.sequence)</code> has been used in the code to deduce the length of the list.</p>\n<p>In the above example, the <a href=\"https://github.com/lf-lang/lingua-franca/wiki/Language-Specification#action-declaration\"><strong>logical action</strong></a> named <code class=\"language-text\">next</code> and the <code class=\"language-text\">schedule</code> function are explained below in <a href=\"#scheduling-delayed-reactions\">Scheduling Delayed Reactions</a>; here, they are used simply to repeat the reaction until all elements of the array have been sent.</p>\n<h2 id=\"sending-and-receiving-objects\" style=\"position:relative;\"><a href=\"#sending-and-receiving-objects\" aria-label=\"sending and receiving objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sending and Receiving Objects</h2>\n<p>You can define your own data types in Python and send and receive those. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/StructAsType.lf\">StructAsType</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python <span class=\"token punctuation\">{</span>files<span class=\"token punctuation\">:</span> include<span class=\"token operator\">/</span>hello<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n<span class=\"token lf_keywords\">import</span> hello\n<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token lf_keywords\">reactor</span> Source <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token punctuation\">;</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        temp <span class=\"token operator\">=</span> hello<span class=\"token punctuation\">.</span>hello<span class=\"token punctuation\">(</span><span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The top-level preamble has imported the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/include/hello.py\">hello</a> module, which contains the following class:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value</code></pre></div>\n<p>In the reaction to <strong>startup</strong>, the reactor has created an instance object of this class (as local variable named <code class=\"language-text\">temp</code>) and passed it downstream using the <code class=\"language-text\">set</code> method on output port <code class=\"language-text\">out</code>.</p>\n<p>Alternatively, you can forego the variable and pass an instance object of the class directly to the port value, as is used in the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/StructAsTypeDirect.lf\">StructAsTypeDirect</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">reactor</span> Source <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> hello<span class=\"token punctuation\">.</span>hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        out<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Earth\"</span>\n        out<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The call to the <code class=\"language-text\">set</code> function is necessary to inform downstream reactors that the class object has a new value. In short, the <code class=\"language-text\">set</code> method is defined as follows:</p>\n<blockquote>\n<p><code class=\"language-text\">&lt;port>.set(&lt;value>)</code>: Set the specified output port (or input of a contained reactor) to the specified value. This value can be any Python object (including <code class=\"language-text\">None</code> and objects of type <code class=\"language-text\">Any</code>). The value is copied and therefore the variable carrying the value can be subsequently modified without changing the output.</p>\n</blockquote>\n<p>A reactor receiving the class object message can take advantage of Python’s duck typing and directly access the object:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">reactor</span> Print<span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> _in<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>_in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received: name = {:s}, value = {:d}\\n\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>_in<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n                                                             _in<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Note:</strong> The <code class=\"language-text\">hello</code> module has been imported using a top-level preamble, therefore, the contents of the module are available to all reactors defined in the current Lingua Franca file (similar situation arises if the <code class=\"language-text\">hello</code> class itself was in the top-level preamble).</p>\n<h2 id=\"timed-behavior\" style=\"position:relative;\"><a href=\"#timed-behavior\" aria-label=\"timed behavior permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Timed Behavior</h2>\n<p>Timers are specified exactly as in the <a href=\"/docs/handbook/time-and-timers\">Time and Timers</a>. When working with time in the Python code body of a reaction, however, you will need to know a bit about its internal representation.</p>\n<p>In the Python target, similar to the C target, the value of a time instant or interval is an integer specifying a number of nanoseconds. An instant is the number of nanoseconds that have elapsed since January 1, 1970. An interval is the difference between two instants. When an LF program starts executing, logical time is (normally) set to the instant provided by the operating system (on some embedded platforms without real-time clocks, it will be set to zero instead).</p>\n<p>The functions for working with time and tags are defined in <a href=\"https://github.com/lf-lang/reactor-c-py/blob/main/lib/pythontarget.c#L961\">pythontarget.c</a>. The most useful functions are:</p>\n<ul>\n<li><code class=\"language-text\">get_current_tag() -> Tag</code>: Returns a Tag instance of the current tag at which this reaction has been invoked.</li>\n<li><code class=\"language-text\">get_logical_time() -> int</code>: Get the current logical time (the first part of the current tag).</li>\n<li><code class=\"language-text\">get_microstep() -> unsigned int</code>: Get the current microstep (the second part of the current tag).</li>\n<li><code class=\"language-text\">get_elapsed_logical_time() -> int</code>: Get the logical time elapsed since program start.</li>\n<li><code class=\"language-text\">compare_tags(Tag, Tag) -> int</code>: Compare two <code class=\"language-text\">Tag</code> instances, returning -1, 0, or 1 for less than, equal, and greater than. <code class=\"language-text\">Tag</code>s can also be compared using rich comparators (ex. <code class=\"language-text\">&lt;</code>, <code class=\"language-text\">></code>, <code class=\"language-text\">==</code>), which returns <code class=\"language-text\">True</code> or <code class=\"language-text\">False</code>.</li>\n</ul>\n<p><code class=\"language-text\">Tag</code>s can be initialized using <code class=\"language-text\">Tag(time=some_number, microstep=some_other_number)</code>.</p>\n<p>There are also some useful functions for accessing physical time:</p>\n<ul>\n<li><code class=\"language-text\">get_physical_time() -> int</code>: Get the current physical time.</li>\n<li><code class=\"language-text\">get_elapsed_physical_time() -> int</code>: Get the physical time elapsed since program start.</li>\n<li><code class=\"language-text\">get_start_time() -> int</code>: Get the starting physical and logical time.</li>\n</ul>\n<p>The last of these is both a physical and logical time because, at the start of execution, the starting logical time is set equal to the current physical time as measured by a local clock.</p>\n<p>A reaction can examine the current logical time (which is constant during the execution of the reaction). For example, consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/GetTime.lf\">GetTime.lf</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> GetTime <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> t<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token lf_keywords\">logical</span> <span class=\"token operator\">=</span> get_logical_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logical time is \"</span><span class=\"token punctuation\">,</span> <span class=\"token lf_keywords\">logical</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When executed, you will get something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">---- Start execution at <span class=\"token function\">time</span> Thu Nov  <span class=\"token number\">5</span> 08:51:02 <span class=\"token number\">2020</span>\n---- plus <span class=\"token number\">864237900</span> nanoseconds.\nLogical <span class=\"token function\">time</span> is  <span class=\"token number\">1604587862864237900</span>\nLogical <span class=\"token function\">time</span> is  <span class=\"token number\">1604587863864237900</span>\nLogical <span class=\"token function\">time</span> is  <span class=\"token number\">1604587864864237900</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>The first two lines give the current time-of-day provided by the execution platform at the start of execution. This is used to initialize logical time. Subsequent values of logical time are printed out in their raw form, rather than the friendlier form in the first two lines. If you look closely, you will see that each number is one second larger than the previous number, where one second is 1000000000 nanoseconds.</p>\n<p>You can also obtain the <em>elapsed</em> logical time since the start of execution:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> GetTime <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> t<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        elapsed <span class=\"token operator\">=</span> get_elapsed_logical_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elapsed logical time is \"</span><span class=\"token punctuation\">,</span> elapsed<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">---- Start execution at <span class=\"token function\">time</span> Thu Nov  <span class=\"token number\">5</span> 08:51:02 <span class=\"token number\">2020</span>\n---- plus <span class=\"token number\">864237900</span> nanoseconds.\nElapsed logical <span class=\"token function\">time</span> is  <span class=\"token number\">0</span>\nElapsed logical <span class=\"token function\">time</span> is  <span class=\"token number\">1000000000</span>\nElapsed logical <span class=\"token function\">time</span> is  <span class=\"token number\">2000000000</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>You can also get physical time, which comes from your platform’s real-time clock:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> GetTime <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> t<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token lf_keywords\">physical</span> <span class=\"token operator\">=</span> get_physical_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Physical time is \"</span><span class=\"token punctuation\">,</span> <span class=\"token lf_keywords\">physical</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">---- Start execution at <span class=\"token function\">time</span> Thu Nov  <span class=\"token number\">5</span> 08:51:02 <span class=\"token number\">2020</span>\n---- plus <span class=\"token number\">864237900</span> nanoseconds.\nPhysical <span class=\"token function\">time</span> is  <span class=\"token number\">1604587862864343500</span>\nPhysical <span class=\"token function\">time</span> is  <span class=\"token number\">1604587863864401900</span>\nPhysical <span class=\"token function\">time</span> is  <span class=\"token number\">1604587864864395200</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>Finally, you can get elapsed physical time:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> GetTime <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> t<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        elapsed_physical <span class=\"token operator\">=</span> get_elapsed_physical_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elapsed physical time is \"</span><span class=\"token punctuation\">,</span> elapsed_physical<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will produce something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">---- Start execution at <span class=\"token function\">time</span> Thu Nov  <span class=\"token number\">5</span> 08:51:02 <span class=\"token number\">2020</span>\n---- plus <span class=\"token number\">864237900</span> nanoseconds.\nElapsed physical <span class=\"token function\">time</span> is  <span class=\"token number\">110200</span>\nElapsed physical <span class=\"token function\">time</span> is  <span class=\"token number\">1000185400</span>\nElapsed physical <span class=\"token function\">time</span> is  <span class=\"token number\">2000178600</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>Notice that these numbers are increasing by roughly one second each time. If you set the <code class=\"language-text\">fast</code> target parameter to <code class=\"language-text\">true</code>, then physical time will elapse much faster than logical time.</p>\n<p>Working with nanoseconds in the Python code can be tedious if you are interested in longer durations. For convenience, a set of functions are available to the Python programmer to convert time units into the required nanoseconds. For example, you can specify 200 msec in Python code as <code class=\"language-text\">MSEC(200)</code> or two weeks as <code class=\"language-text\">WEEKS(2)</code>. The provided functions are <code class=\"language-text\">NSEC</code>, <code class=\"language-text\">USEC</code> (for microseconds), <code class=\"language-text\">MSEC</code>, <code class=\"language-text\">SEC</code>, <code class=\"language-text\">MINUTE</code>, <code class=\"language-text\">HOUR</code>, <code class=\"language-text\">DAY</code>, and <code class=\"language-text\">WEEK</code>. You may also use the plural of any of these. Examples are given in the next section.</p>\n<h3 id=\"scheduling-delayed-reactions-1\" style=\"position:relative;\"><a href=\"#scheduling-delayed-reactions-1\" aria-label=\"scheduling delayed reactions 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduling Delayed Reactions</h3>\n<p>The Python target provides a <code class=\"language-text\">.schedule()</code> method to trigger an action at a future logical time. Actions are described in the <a href=\"language-specification#action-declaration\">Language Specification</a> document. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/Schedule.lf\">Schedule</a> reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Schedule <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        elapsed_time <span class=\"token operator\">=</span> get_elapsed_logical_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Action triggered at logical time {:d} nsec after start.\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>elapsed_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        a<span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">(</span>MSEC<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When this reactor receives an input <code class=\"language-text\">x</code>, it calls <code class=\"language-text\">a.schedule()</code>, specifying the action <code class=\"language-text\">a</code> to be triggered and the logical time offset (200 msec). The action <code class=\"language-text\">a</code> will be triggered at a logical time 200 milliseconds after the arrival of input <code class=\"language-text\">x</code>. At that logical time, the second reaction will trigger and will use the <code class=\"language-text\">get_elapsed_logical_time()</code> function to determine how much logical time has elapsed since the start of execution.</p>\n<p>Notice that after the logical time offset of 200 msec, there may be another input <code class=\"language-text\">x</code> simultaneous with the action <code class=\"language-text\">a</code>. Because the reaction to <code class=\"language-text\">a</code> is given first, it will execute first. This becomes important when such a reactor is put into a feedback loop (see below).</p>\n<h3 id=\"zero-delay-actions-1\" style=\"position:relative;\"><a href=\"#zero-delay-actions-1\" aria-label=\"zero delay actions 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Zero-Delay actions</h3>\n<p>If the specified delay in a <code class=\"language-text\">.schedule()</code> call is zero, then the action <code class=\"language-text\">a</code> will be triggered one <strong>microstep</strong> later in <strong>superdense time</strong> (see <a href=\"https://github.com/lf-lang/lingua-franca/wiki/language-specification#superdense-time\">Superdense Time</a>). Hence, if the input <code class=\"language-text\">x</code> arrives at metric logical time t, and you call <code class=\"language-text\">.schedule()</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a.schedule(0)</code></pre></div>\n<p>then when a reaction to <code class=\"language-text\">a</code> is triggered, the input <code class=\"language-text\">x</code> will be absent (it was present at the <em>previous</em> microstep). The reaction to <code class=\"language-text\">x</code> and the reaction to <code class=\"language-text\">a</code> occur at the same metric time <em>t</em>, but separated by one microstep, so these two reactions are <em>not</em> logically simultaneous.</p>\n<p>The metric time is visible to the Python programmer and can be obtained in a reaction using either <code class=\"language-text\">get_elapsed_logical_time()</code>, as above or <code class=\"language-text\">get_logical_time()</code>. The latter function also returns an <code class=\"language-text\">int</code> (aka <code class=\"language-text\">instant_t</code>), but its meaning is now the time elapsed since January 1, 1970 in nanoseconds.</p>\n<p>As described in the <a href=\"https://github.com/lf-lang/lingua-franca/wiki/language-specification#action-declaration\">Language Specification</a> document, action declarations can have a <em>min_delay</em> parameter. This modifies the timestamp further. Also, the action declaration may be <strong>physical</strong> rather than <strong>logical</strong>, in which case the assigned timestap will depend on the physical clock of the executing platform.</p>\n<h2 id=\"actions-with-values-2\" style=\"position:relative;\"><a href=\"#actions-with-values-2\" aria-label=\"actions with values 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions With Values</h2>\n<p>Actions can also carry a <strong>value</strong>, a Python object that becomes available to any reaction triggered by the action. This is particularly useful for physical actions that are externally triggered because it enables the action to convey information to the reactor. This could be, for example, the body of an incoming network message or a numerical reading from a sensor.</p>\n<p>Recall from the <a href=\"https://github.com/lf-lang/lingua-franca/wiki/language-specification#Contained-Reactors\">Contained Reactors</a> section in the Language Specification document that the <strong>after</strong> keyword on a connection between ports introduces a logical delay. This is actually implemented using a logical action. We illustrate how this is done using the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Python/src/DelayInt.lf\">DelayInt</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">reactor</span> Delay<span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> _in<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> a<span class=\"token punctuation\">.</span>is_present<span class=\"token punctuation\">:</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>_in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        a<span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>delay<span class=\"token punctuation\">,</span> _in<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using this reactor as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsource<span class=\"token punctuation\">.</span>out <span class=\"token operator\">-</span><span class=\"token operator\">></span> d<span class=\"token punctuation\">.</span>_in<span class=\"token punctuation\">;</span>\nd<span class=\"token punctuation\">.</span>_in <span class=\"token operator\">-</span><span class=\"token operator\">></span> sink<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">;</span></code></pre></div>\n<p>is equivalent to:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">source<span class=\"token punctuation\">.</span>out <span class=\"token operator\">-</span><span class=\"token operator\">></span> sink<span class=\"token punctuation\">.</span><span class=\"token keyword\">in</span> <span class=\"token lf_keywords\">after</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The reaction to the input <code class=\"language-text\">in</code> declares as its effect the action <code class=\"language-text\">a</code>. This declaration makes it possible for the reaction to schedule a future triggering of <code class=\"language-text\">a</code>. As with other constructs in the Python reactor target, types are avoided.</p>\n<p>The first reaction declares that it is triggered by <code class=\"language-text\">a</code> and has effect <code class=\"language-text\">out</code>. To read the value, it uses the <code class=\"language-text\">a.value</code> class variable. Because this reaction is first, the <code class=\"language-text\">out</code> at any logical time can be produced before the input <code class=\"language-text\">_in</code> is even known to be present. Hence, this reactor can be used in a feedback loop, where <code class=\"language-text\">out</code> triggers a downstream reactor to send a message back to <code class=\"language-text\">_in</code> of this same reactor. If the reactions were given in the opposite order, there would be causality loop and compilation would fail.</p>\n<h2 id=\"stopping-execution-2\" style=\"position:relative;\"><a href=\"#stopping-execution-2\" aria-label=\"stopping execution 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stopping Execution</h2>\n<p>A reaction may request that the execution stop after all events with the current timestamp have been processed by calling the built-in function <code class=\"language-text\">request_stop()</code>, which takes no arguments. In a non-federated execution, the actual last tag of the program will be one microstep later than the tag at which <code class=\"language-text\">request_stop()</code> was called. For example, if the current tag is <code class=\"language-text\">(2 seconds, 0)</code>, the last (stop) tag will be <code class=\"language-text\">(2 seconds, 1)</code>.</p>\n<p><strong>Note:</strong> The [[timeout | Target-Specification#timeout]] target specification will take precedence over this function. For example, if a program has a timeout of <code class=\"language-text\">2 seconds</code> and <code class=\"language-text\">request_stop()</code> is called at the <code class=\"language-text\">(2 seconds, 0)</code> tag, the last tag will still be <code class=\"language-text\">(2 seconds, 0)</code>.</p>\n<h2 id=\"log-and-debug-information-2\" style=\"position:relative;\"><a href=\"#log-and-debug-information-2\" aria-label=\"log and debug information 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Log and Debug Information</h2>\n<p>The Python supports the [[logging | Target-Specification#logging]] target specification. This will cause the runtime to produce more or less information about the execution. However, user-facing functions for different logging levels are not yet implemented (see issue <a href=\"https://github.com/lf-lang/lingua-franca/issues/619\">#619</a>).</p>\n<h2 id=\"python-target-ximplementation-details\" style=\"position:relative;\"><a href=\"#python-target-ximplementation-details\" aria-label=\"python target ximplementation details permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python Target xImplementation Details</h2>\n<p>The Python target is built on top of the C runtime to enable maximum efficiency where possible. The Python target uses the single threaded C runtime by default but will switch to the multithreaded C runtime if a physical action is detected. The <a href=\"/docs/handbook/target-specification#threading\">threading</a> target property can be used to override this behavior.</p>\n<p>Running <a href=\"/docs/handbook/command-line-tools\">lfc</a> on a <code class=\"language-text\">XXX.lf</code> program that uses the Python target specification will create the following files:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── src\n│   └── XXX.lf\n└── src-gen\n    └── XXX\n        ├── core\n        │   ...             # C runtime files\n        ├── ctarget.c       # C target API implementations\n        ├── ctarget.h       # C target API definitions\n        ├── pythontarget.c  # Python target API implementations\n        ├── pythontarget.h  # Python target API definitions\n        ├── setup.py        # Setup file used to install the Python C extension\n        ├── XXX.c           # Source code of the Python C extension\n        └── XXX.py          # Actual Python code containing reactors and reaction code</code></pre></div>\n<p>There are two major components in the <code class=\"language-text\">src-gen/XXX</code> directory that together enable the execution of a Python target application:</p>\n<ul>\n<li>A <a href=\"#the-xxxpy-file-containing-user-code\">XXX.py</a> file containing the user code (e.g., reactor definitions and reactions) and</li>\n<li>the source code for a <a href=\"#the-generated-linguafrancaxxx-python-module-a-c-extension-module\">Python C extension module</a> called <code class=\"language-text\">LinguaFrancaXXX</code> containing the C runtime, as well as hooks to execute the user-defined reactions.</li>\n</ul>\n<p>The interactions between the <code class=\"language-text\">src-gen/XXX/XXX.py</code> file and the <code class=\"language-text\">LinguaFrancaXXX</code> module are explained <a href=\"#interactions-between-xxxpy-and-linguafrancaxxx\">below</a>.</p>\n<h3 id=\"the-code-classlanguage-textxxxpycode-file-containing-user-code\" style=\"position:relative;\"><a href=\"#the-code-classlanguage-textxxxpycode-file-containing-user-code\" aria-label=\"the code classlanguage textxxxpycode file containing user code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code class=\"language-text\">XXX.py</code> file containing user code</h3>\n<p>The <code class=\"language-text\">XXX.py</code> file contains all the reactor definitions in the form of Python classes. The contents of a reactor are converted as follows:</p>\n<ul>\n<li>Each <strong>Reaction</strong> in a reactor definition will be converted to a class method.</li>\n<li>Each <strong>Parameter</strong> will be converted to a class <a href=\"https://docs.python.org/3/library/functions.html?highlight=property#property\">property</a> to make it read-only.</li>\n<li>Each <strong>State</strong> variable will be converted to an <a href=\"https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables\">instance variable</a>.</li>\n<li>Each trigger and effect will be converted to an object passed as a method function argument to reaction methods, allowing the body of the reaction to access them.</li>\n<li>Each reactor <strong>Preamble</strong> will be put in the class definition verbatim.</li>\n</ul>\n<p>Finally, each reactor class instantiation will be converted to a Python object class instantiation.</p>\n<p>For example, imagine the following program:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token comment\"># src/XXX.lf</span>\n<span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Foo<span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token lf_keywords\">import</span> random\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">state</span> baz\n    <span class=\"token lf_keywords\">input</span> _in\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> act\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>_in<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\"># Body of the reaction</span>\n        self<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Note the use of self</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    foo <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Th reactor <code class=\"language-text\">Foo</code> and its instance, <code class=\"language-text\">foo</code>, will be converted to</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token comment\"># src-gen/XXX/XXX.py</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\"># Python class for reactor Foo</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">_Foo</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># From the preamble, verbatim:</span>\n    <span class=\"token lf_keywords\">import</span> random\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#Define parameters and their default values</span>\n        self<span class=\"token punctuation\">.</span>_bar <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token comment\"># Handle parameters that are set in instantiation</span>\n        self<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>kwargs<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Define state variables</span>\n        self<span class=\"token punctuation\">.</span>baz <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token decorator annotation punctuation\">@property</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_bar\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reaction_function_0</span><span class=\"token punctuation\">(</span>self <span class=\"token punctuation\">,</span> _in<span class=\"token punctuation\">,</span> act<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Body of the reaction</span>\n        self<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Note the use of self</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n\n<span class=\"token comment\"># Instantiate classes</span>\nxxx_foo_lf <span class=\"token operator\">=</span> \\\n    <span class=\"token punctuation\">[</span>_Foo<span class=\"token punctuation\">(</span>bank_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> \\\n        _bar<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h3 id=\"the-generated-linguafrancaxxx-python-module-a-c-extension-module\" style=\"position:relative;\"><a href=\"#the-generated-linguafrancaxxx-python-module-a-c-extension-module\" aria-label=\"the generated linguafrancaxxx python module a c extension module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The generated LinguaFrancaXXX Python module (a C extension module)</h3>\n<p>The rest of the files in <code class=\"language-text\">src-gen/XXX</code> form a <a href=\"https://docs.python.org/3/extending/building.html#building-c-and-c-extensions\">Python C extension module</a> called <code class=\"language-text\">LinguaFrancaXXX</code> that can be installed by executing <code class=\"language-text\">python3 -m pip install .</code> in the <code class=\"language-text\">src-gen/XXX/</code> folder. In this case, <code class=\"language-text\">pip</code> will read the instructions in the <code class=\"language-text\">src-gen/XXX/setup.py</code> file and install a <code class=\"language-text\">LinguaFrancaXXX</code> module in your local Python module installation directory.</p>\n<p><strong>Note:</strong> LinguaFrancaXXX does not necessarily have to be installed if you are using the “traditional” Python implementation (CPython) directly. You could simply use <code class=\"language-text\">python3 setup.py build</code> to build the module in the <code class=\"language-text\">src-gen/XXX</code> folder. However, we have found that <a href=\"https://www.python.org/download/alternatives/\">other C Python implementations</a> such as Anaconda will not work with this kind of local module.</p>\n<p>As mentioned before, the LinguaFrancaXXX module is separate from <code class=\"language-text\">src-gen/XXX/XXX.py</code> but interacts with it. Next, we explain this interaction.</p>\n<h3 id=\"interactions-between-xxxpy-and-linguafrancaxxx\" style=\"position:relative;\"><a href=\"#interactions-between-xxxpy-and-linguafrancaxxx\" aria-label=\"interactions between xxxpy and linguafrancaxxx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interactions between XXX.py and LinguaFrancaXXX</h3>\n<p>The LinguaFrancaXXX module is imported in <code class=\"language-text\">src-gen/XXX/XXX.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from LinguaFrancaXXX import *</code></pre></div>\n<p>This is done to enable the main function in <code class=\"language-text\">src-gen/XXX/XXX.py</code> to make a call to the <code class=\"language-text\">start()</code> function, which is part of the generated (and installed) <code class=\"language-text\">LinguaFrancaXXX</code> module. This function will start the main event handling loop of the C runtime.</p>\n<p>From then on, <code class=\"language-text\">LinguaFrancaXXX</code> will call reactions that are defined in <code class=\"language-text\">src-gen/XXX/XXX.py</code> when needed.</p>\n<h3 id=\"the-linguafrancabase-package\" style=\"position:relative;\"><a href=\"#the-linguafrancabase-package\" aria-label=\"the linguafrancabase package permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The LinguaFrancaBase package</h3>\n<p><a href=\"https://pypi.org/project/LinguaFrancaBase/\">LinguaFrancaBase</a> is a package that contains several helper methods and definitions that are necessary for the Python target to work. This module is installable via <code class=\"language-text\">python3 -m pip install LinguaFrancaBase</code> but is automatically installed if needed during the installation of <code class=\"language-text\">LinguaFrancaXXX</code>. The source code of this package can be found <a href=\"https://github.com/lf-lang/reactor-c-py\">on GitHub</a>.</p>\n<p>This package’s modules are imported in the <code class=\"language-text\">XXX.py</code> program:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from LinguaFrancaBase.constants import * #Useful constants\nfrom LinguaFrancaBase.functions import * #Useful helper functions\nfrom LinguaFrancaBase.classes import * #Useful classes</code></pre></div>\n<h3 id=\"already-imported-python-modules\" style=\"position:relative;\"><a href=\"#already-imported-python-modules\" aria-label=\"already imported python modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Already imported Python modules</h3>\n<p>The following packages are already imported and thus do not need to be re-imported by the user:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import sys\nimport copy</code></pre></div>\n</div>\n<p><span class=\"warning\">This needs updating!</span></p>\n<blockquote>\n<p>⚠ <strong>Important:</strong> The Rust target is still quite preliminary. This is early WIP documentation to let you try it out if you’re curious</p>\n</blockquote>\n<p>In the Rust reactor target for Lingua Franca, reactions are written in Rust and the code generator generates a standalone Rust program that can be compiled and run on platforms supported by rustc. The program depends on a runtime library distributed as the crate <a href=\"https://github.com/lf-lang/reactor-rust\">reactor_rt</a>, and depends on the Rust standard library.</p>\n<p>Documentation for the runtime API is available here: <a href=\"https://lf-lang.org/reactor-rust/\">https://lf-lang.org/reactor-rust/</a></p>\n<!-- Note that C++ is not a safe language. There are many ways that a programmer can circumvent the semantics of Lingua Franca and introduce nondeterminism and illegal memory accesses. For example, it is easy for a programmer to mistakenly send a message that is a pointer to data on the stack. The destination reactors will very likely read invalid data. It is also easy to create memory leaks, where memory is allocated and never freed. Note, however, that the C++ reactor library is designed to prevent common errors and to encourage a safe modern C++ style. Here, we introduce the specifics of writing Reactor programs in C++ and present some guidelines for a style that will be safe. -->\n<h2 id=\"setup-2\" style=\"position:relative;\"><a href=\"#setup-2\" aria-label=\"setup 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p>In order to compile the generated Rust source code, you need a recent version of <a href=\"https://doc.rust-lang.org/cargo/\">Cargo</a>, the Rust package manager. See <a href=\"https://doc.rust-lang.org/cargo/getting-started/installation.html\">How to Install Rust and Cargo</a> if you don’t have them on your system.</p>\n<p>You can use a development version of the runtime library by setting the LFC option <code class=\"language-text\">--external-runtime-path</code> to the root directory of the runtime library crate sources. If this variable is mentioned, LFC will ask Cargo to fetch the runtime library from there.</p>\n<h2 id=\"a-minimal-example\" style=\"position:relative;\"><a href=\"#a-minimal-example\" aria-label=\"a minimal example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A Minimal Example</h2>\n<p>A “hello world” reactor for the Rust target looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">target <span class=\"token class-name\">Rust</span><span class=\"token punctuation\">;</span>\n\nmain reactor <span class=\"token class-name\">Minimal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reaction</span><span class=\"token punctuation\">(</span>startup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, reactors!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">startup</code> action is a special <a href=\"https://github.com/lf-lang/lingua-franca/wiki/Language-Specification#Action-Declaration\">action</a> that triggers at the start of the program execution causing the <a href=\"https://github.com/lf-lang/lingua-franca/wiki/Language-Specification#Reaction-Declaration\">reaction</a> to execute. This program can be found in a file called <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Rust/src/Minimal.lf\">Minimal.lf</a> in the <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/test/Rust\">test directory</a>, where you can also find quite a few more interesting examples. If you compile this using the <a href=\"downloading-and-building#Command-Line-Tools\"><code class=\"language-text\">lfc</code> command-line compiler</a> or the <a href=\"downloading-and-building#Download-the-Integrated-Development-Environment\">Eclipse-based IDE</a>, then generated source files will be put into a subdirectory called <code class=\"language-text\">src-gen/Minimal</code>. In addition, an executable binary will be compiled using Cargo. The resulting executable will be called <code class=\"language-text\">minimal</code> (note and be put in a subdirectory called <code class=\"language-text\">bin</code>. If you are in the Rust test directory, you can execute it in a shell as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> bin/minimal</code></pre></div>\n<p>The resulting output should look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[INFO]  Starting the execution\nHello World!\n[INFO]  Terminating the execution</code></pre></div>\n<h2 id=\"the-rust-target-specification\" style=\"position:relative;\"><a href=\"#the-rust-target-specification\" aria-label=\"the rust target specification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Rust Target Specification</h2>\n<p>To have Lingua Franca generate Rust code, start your .lf file with the following target specification:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">target <span class=\"token class-name\">Rust</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>LF-Rust generates a Cargo project per compiled main reactor. This specification assumes in some places that the user is somewhat familiar with how Cargo works.\nIf you’re not, here’s a primer:</p>\n<ul>\n<li>a Rust project (and its library artifact) are called a <em>crate</em>.</li>\n<li>Cargo is the Rust package manager and build tool. LF/Rust uses Cargo to build the generated project.</li>\n<li>Rust has extensive support for conditional compilation. Cargo <em>features</em> are commonly used to enable or disable the compilation of parts of a crate. A feature may also pull in additional dependencies. Cargo features only influence the compilation process; if you don’t mention the correct feature flags at compilation time, those features cannot be made available at runtime. The Rust reactor runtime crate uses Cargo features to conditionally enable some features, eg, command-line argument parsing.</li>\n</ul>\n<h3 id=\"target-properties-summary\" style=\"position:relative;\"><a href=\"#target-properties-summary\" aria-label=\"target properties summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Target properties summary</h3>\n<p>Target properties may be mentioned like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">target <span class=\"token class-name\">Rust</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// enables single-file project layout</span>\n    single<span class=\"token operator\">-</span>file<span class=\"token operator\">-</span>project<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// timeout for the execution. The program will shutdown at most after the specified duration.</span>\n    timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> sec<span class=\"token punctuation\">,</span>\n\n    cargo<span class=\"token operator\">-</span>features<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cli\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The full list of supported target properties:</p>\n<ul>\n<li><code class=\"language-text\">build-type: [Debug | Release | RelWithDebInfo | RelMinSize]</code> - profile to use for the cargo build command. This property uses the CMake names: <code class=\"language-text\">Debug</code> corresponds to Cargo’s <code class=\"language-text\">dev</code> profile, and <code class=\"language-text\">Release</code> is self-explanatory. The other two profiles are mapped to custom Cargo profiles, and are special cases of <code class=\"language-text\">Release</code>.</li>\n<li><code class=\"language-text\">cargo-features: &lt;string array></code> - list of features of the generated crate. Supported are:\n<ul>\n<li>“cli” - enable <a href=\"#cli\">command-line argument parsing</a></li>\n</ul>\n</li>\n<li><code class=\"language-text\">cargo-dependencies: { ... }</code> - list of dependencies to include in the generated Cargo.toml file. The value of this parameter is a map of package name to <em>dependency-spec</em> (see <a href=\"#specifying-dependencies\">Specifying dependencies</a>).</li>\n<li><code class=\"language-text\">export-dependency-graph: [true|false]</code> - dump the dependency graph to a file in DOT format before starting the execution. If a <a href=\"#cli\">CLI</a> is generated, the target property is ignored, and the user should instead use the <code class=\"language-text\">--export-graph</code> flag of the generated program.</li>\n<li><code class=\"language-text\">rust-include: &lt;string array></code> - includes a set of Rust modules in the generated project. See <a href=\"#linking-support-files\">Linking support files</a>.</li>\n<li><code class=\"language-text\">single-file-project: [true|false]</code> - enables <a href=\"#single-file-layout\">single-file project layout</a></li>\n<li><code class=\"language-text\">timeout: &lt;time value></code> - timeout for the execution. The program will shutdown the specified amount of (logical) time after the start of its execution.</li>\n<li><code class=\"language-text\">keepalive: [true|false]</code> - supported for compatiblity with standard parameters but is ignored in the Rust target. The runtime framework is smart enough to stay put when some threads may push asynchronous events, and only shutdown when we know the event queue will remain empty forever.</li>\n</ul>\n<p>Note that the <code class=\"language-text\">logging</code> target property is ignored by the Rust target, as the levels used are incompatible with the Rust standard levels. See <a href=\"#logging-levels\">Logging levels</a>.</p>\n<h3 id=\"the-executable\" style=\"position:relative;\"><a href=\"#the-executable\" aria-label=\"the executable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The executable</h3>\n<p>The executable name is the name of the main reactor <em>transformed to snake_case</em>: <code class=\"language-text\">main reactor RustProgram</code> will generate <code class=\"language-text\">rust_program</code>.</p>\n<h4 id=\"cli\" style=\"position:relative;\"><a href=\"#cli\" aria-label=\"cli permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CLI</h4>\n<p>The generated executable may feature a command-line interface (CLI), if it uses the <code class=\"language-text\">cargo-features: [\"cli\"]</code> target property. When that feature is enabled:</p>\n<ul>\n<li>some target properties become settable at runtime:\n<ul>\n<li><code class=\"language-text\">--timeout &lt;time value></code>: override the default timeout mentioned as a target property. The syntax for times is just like the LF one (eg <code class=\"language-text\">1msec</code>, <code class=\"language-text\">\"2 seconds\"</code>).</li>\n<li><code class=\"language-text\">--threads &lt;number></code>: override the default thread count mentioned as a target property. This option is <strong>ignored</strong> unless the runtime crate has been built with the feature <code class=\"language-text\">parallel-runtime</code>.</li>\n<li><code class=\"language-text\">--export-graph</code>: export the dependency graph (corresponds to <code class=\"language-text\">export-dependency-graph</code> target property). This is a flag, ie, absent means false, present means true. This means the value of the target property is ignored and not used as default.</li>\n<li><code class=\"language-text\">--log-level</code>: corresponds to the <code class=\"language-text\">logging</code> target property, but note that the levels have different meanings, and the target property is ignored. See <a href=\"#logging-levels\">Logging levels</a>.</li>\n</ul>\n</li>\n<li>parameters of the main reactor are translated to CLI parameters.\n<ul>\n<li>Each LF parameter named <code class=\"language-text\">param</code> corresponds to a CLI parameter named <code class=\"language-text\">--main-param</code>. Underscores in the LF parameter name are replaced by hyphens.</li>\n<li>The type of each parameters must implement the trait <a href=\"https://doc.rust-lang.org/std/str/trait.FromStr.html\"><code class=\"language-text\">FromStr</code></a>.</li>\n</ul>\n</li>\n</ul>\n<p>When the <code class=\"language-text\">cli</code> feature is disabled, the parameters of the main reactor will each assume their default value.</p>\n<h4 id=\"logging-levels\" style=\"position:relative;\"><a href=\"#logging-levels\" aria-label=\"logging levels permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logging levels</h4>\n<p>The executable reacts to the environment variable <code class=\"language-text\">RUST_LOG</code>, which sets the logging level of the application. Possible values are\n<code class=\"language-text\">off</code>, <code class=\"language-text\">error</code>, <code class=\"language-text\">warn</code>, <code class=\"language-text\">info</code>, <code class=\"language-text\">debug</code>, <code class=\"language-text\">trace</code></p>\n<p>Error and warning logs are on by default. Enabling a level enables all greater levels (ie, <code class=\"language-text\">RUST_LOG=info</code> also enables <code class=\"language-text\">warn</code> and <code class=\"language-text\">error</code>, but not <code class=\"language-text\">trace</code> or <code class=\"language-text\">debug</code>).</p>\n<p>Logging can also be turned on with the <code class=\"language-text\">--log-level</code> CLI option, if the application features a <a href=\"#cli\">CLI</a>.</p>\n<p>Note that the <code class=\"language-text\">logging</code> target property is ignored, as its levels do not match the Rust standard levels we use (those of the <a href=\"https://docs.rs/log/\"><code class=\"language-text\">log</code> crate</a>).</p>\n<p>Note that when building with a release profile (i.e., target property <code class=\"language-text\">build-type</code> is not <code class=\"language-text\">Debug</code>), all log statements with level <code class=\"language-text\">debug</code> and <code class=\"language-text\">trace</code> are removed from the executable, and cannot be turned on at runtime. A warning is produced by the executable if you try to use these levels explicitly.</p>\n<h3 id=\"file-layout\" style=\"position:relative;\"><a href=\"#file-layout\" aria-label=\"file layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File layout</h3>\n<p>The Rust code generator generates a Cargo project with a classical layout:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── Cargo.lock\n├── Cargo.toml\n├── src\n│   ├── main.rs\n│   └── reactors\n│       ├── mod.rs\n|       ├── ...\n|\n└── target\n    ├── ...</code></pre></div>\n<p>The module structure is as follows:</p>\n<ul>\n<li>the crate has a module <code class=\"language-text\">reactors</code></li>\n<li>each LF reactor has its own submodule of <code class=\"language-text\">reactors</code>. For instance, <code class=\"language-text\">Minimal.lf</code> will generate <code class=\"language-text\">minimal.rs</code>. The name is transformed to snake_case.</li>\n</ul>\n<p>This means that to refer to the contents of another reactor module, e.g. that of <code class=\"language-text\">Other.lf</code>, you have to write <code class=\"language-text\">super::other::Foo</code>. This is relevant to access <code class=\"language-text\">preamble</code> items.</p>\n<h4 id=\"single-file-layout\" style=\"position:relative;\"><a href=\"#single-file-layout\" aria-label=\"single file layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single-file layout</h4>\n<p>The Rust target supports an alternative file layout, where all reactors are generated into the <code class=\"language-text\">main.rs</code> file, making the project fit in a single file (excluding <code class=\"language-text\">Cargo.toml</code>). <em>The module structure is unchanged:</em> the file still contains a <code class=\"language-text\">mod reactors { ... }</code> within which each reactor has its <code class=\"language-text\">mod foo { ... }</code>. You can thus change the layout without having to update any LF code.</p>\n<p>Set the target property <code class=\"language-text\">single-file-project: true</code> to use this layout.</p>\n<p>Note: this alternative layout is provided for the purposes of making self-contained benchmark files. Generating actual runnable benchmarks from an LF file may be explored in the future.</p>\n<h3 id=\"specifying-dependencies\" style=\"position:relative;\"><a href=\"#specifying-dependencies\" aria-label=\"specifying dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Specifying dependencies</h3>\n<p>The Rust code generator leverages Cargo to allow LF programs to profit from Rust’s large package ecosystem. The code generator may also link support files written in pure Rust into the generated crate. Target properties are used to achieve all this.</p>\n<h4 id=\"adding-cargo-dependencies\" style=\"position:relative;\"><a href=\"#adding-cargo-dependencies\" aria-label=\"adding cargo dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding cargo dependencies</h4>\n<p>The <code class=\"language-text\">cargo-dependencies</code> target property may be used to specify dependencies on crates coming from <code class=\"language-text\">crates.io</code>. Here’s an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">target Rust <span class=\"token punctuation\">{</span>\n   cargo<span class=\"token operator\">-</span>dependencies<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token symbol\">termcolor</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"0.8\"</span></span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The value of the <em>cargo-dependencies</em> property is a map of crate identifiers to a <em>dependency-spec</em>. An informal example follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cargo<span class=\"token operator\">-</span>dependencies<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// Name-of-the-crate: \"version\"</span>\n   <span class=\"token literal-property property\">rand</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.8\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token comment\">// Equivalent to using an explicit map:</span>\n   <span class=\"token literal-property property\">rand</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.8\"</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token comment\">// The map allows specifying more details</span>\n   <span class=\"token literal-property property\">rand</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// A path to a local unpublished crate.</span>\n     <span class=\"token comment\">// Note 'path' is mutually exclusive with 'git'.</span>\n     <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/home/me/Git/local-rand-clone\"</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">rand</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// A URL to a git repo</span>\n     <span class=\"token literal-property property\">git</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/me/rand\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token comment\">// Specify an explicit Git revision number</span>\n     <span class=\"token literal-property property\">rev</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abcdef1234\"</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">rand</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.8\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token comment\">// you can specify cargo features</span>\n     <span class=\"token literal-property property\">features</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"some-cargo-feature\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When a <em>dependency-spec</em> is specified as an object, its key-value pairs correspond directly to those of a <a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories\">Cargo dependency specification</a>. For instance for the following dependency spec:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">   <span class=\"token literal-property property\">rand</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.8\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token comment\">// you can specify cargo features</span>\n     <span class=\"token literal-property property\">features</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"some-cargo-feature\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">}</span></code></pre></div>\n<p>we add the following to the generated <code class=\"language-text\">Cargo.toml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies.rand</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.8\"</span>\n<span class=\"token key property\">features</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"some-cargo-feature\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Not all keys are necessarily supported though, eg the <code class=\"language-text\">registry</code> key is not supported (yet).</p>\n<h4 id=\"configuring-the-runtime\" style=\"position:relative;\"><a href=\"#configuring-the-runtime\" aria-label=\"configuring the runtime permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring the runtime</h4>\n<p>The runtime crate can be configured just like other crates, using the <code class=\"language-text\">cargo-dependencies</code> target property, eg:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cargo<span class=\"token operator\">-</span>dependencies<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">reactor_rt</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">features</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"parallel-runtime\"</span><span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The dependency is always included, with defaults picked by LFC. The location information (<em>path</em>/<em>git</em>/<em>version</em> key) is optional.\nSee <a href=\"https://lf-lang.org/reactor-rust/reactor_rt/index.html\">reactor_rt</a> for the supported features.</p>\n<h4 id=\"linking-support-files\" style=\"position:relative;\"><a href=\"#linking-support-files\" aria-label=\"linking support files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linking support files</h4>\n<p>You can link-in additional rust modules using the <code class=\"language-text\">rust-include</code> target property:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">target Rust <span class=\"token punctuation\">{</span>\n  rust<span class=\"token operator\">-</span><span class=\"token keyword\">include</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"foo.rs\"</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The property is a list of paths (relative to the directory containing the <code class=\"language-text\">.lf</code> file). Each path should either point to a Rust file (<code class=\"language-text\">.rs</code>), or a directory that contains a <code class=\"language-text\">mod.rs</code> file. Each of those will be copied to the <code class=\"language-text\">src</code> directory of the generated Cargo project, and linked in to the <code class=\"language-text\">main.rs</code> file.</p>\n<p>To refer to the included module, you can use e.g. <code class=\"language-text\">crate::foo</code> if your module is named <code class=\"language-text\">foo</code>.</p>\n<h3 id=\"generation-scheme\" style=\"position:relative;\"><a href=\"#generation-scheme\" aria-label=\"generation scheme permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generation scheme</h3>\n<p>Each reactor generates its own <code class=\"language-text\">struct</code> which contains state variables. For instance,</p>\n<table>\n<thead>\n<tr>\n<th>LF</th>\n<th>Generated Rust</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">reactor <span class=\"token class-name\">SomeReactor</span> <span class=\"token punctuation\">{</span>\n  state field<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</td>\n<td>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">SomeReactor</span> <span class=\"token punctuation\">{</span>\n  field<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In the following we refer to that struct as the <em>state struct</em>.</p>\n<h4 id=\"reactions\" style=\"position:relative;\"><a href=\"#reactions\" aria-label=\"reactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reactions</h4>\n<p>Reactions are each generated in a separate method of the reactor struct. Reaction names are unspecified and may be mangled to prevent explicit calling. The parameters of that method are</p>\n<ul>\n<li><code class=\"language-text\">&amp;mut self</code>: the state struct described above,</li>\n<li><code class=\"language-text\">ctx: &amp;mut ReactionCtx</code>: the context object for the reaction execution,</li>\n<li>For each dependency, a parameter is generated.\n<ul>\n<li>If the dependency is a component of this reactor, the name of the parameter is just the name of the component</li>\n<li>If the dependency is a port of a child reactor, the name of the parameter is <code class=\"language-text\">&lt;name of the child instance>__&lt;name of the port></code>, e.g. <code class=\"language-text\">child__out</code> for <code class=\"language-text\">child.out</code>.</li>\n<li>The type of the parameter depends on the kind of dependency and of component:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Use/trigger dependency</th>\n<th>Effect dependency</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n</li>\n</ul>\n<p>Port of type <code class=\"language-text\">T</code></p>\n</td>\n<td>\n<p><code class=\"language-text\">&amp;ReadablePort&lt;T></code></p>\n</td>\n<td>\n<p><code class=\"language-text\">WritablePort&lt;T></code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Logical action of type <code class=\"language-text\">T</code></p>\n</td>\n<td>\n<p><code class=\"language-text\">&amp;LogicalAction&lt;T></code></p>\n</td>\n<td>\n<p><code class=\"language-text\">&amp;mut LogicalAction&lt;T></code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Physical action of type <code class=\"language-text\">T</code></p>\n</td>\n<td>\n<p><code class=\"language-text\">&amp;PhysicalActionRef&lt;T></code></p>\n</td>\n<td>\n<p><code class=\"language-text\">&amp;mut PhysicalActionRef&lt;T></code></p>\n</td>\n</tr>\n<tr>\n<td>Timer</td>\n<td>\n<p><code class=\"language-text\">&amp;Timer</code></p>\n</td>\n<td>\n<p>n/a</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Port bank of type <code class=\"language-text\">T</code></p>\n</td>\n<td>\n<p><code class=\"language-text\">&amp;ReadablePortBank&lt;T></code></p>\n</td>\n<td>\n<p><code class=\"language-text\">WritablePortBank&lt;T></code></p>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Undeclared dependencies, and dependencies on timers and <code class=\"language-text\">startup</code> or <code class=\"language-text\">shutdown</code>, do not generate a parameter.</p>\n<p>The <a href=\"https://lf-lang.org/reactor-rust/reactor_rt/struct.ReactionCtx.html\"><code class=\"language-text\">ReactionCtx</code></a> object is a mediator to manipulate all those dependency objects. It has methods to set ports, schedule actions, retrieve the current logical time, etc.</p>\n<p>For instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">reactor <span class=\"token class-name\">Source</span> <span class=\"token punctuation\">{</span>\n    output out<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">reaction</span><span class=\"token punctuation\">(</span>startup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token number\">76600</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, the context object <code class=\"language-text\">ctx</code> is used to set a port to a value. The port is in scope as <code class=\"language-text\">out</code>.</p>\n<blockquote>\n<p>⚠ TODO when the runtime crate is public link to the docs, they should be the most exhaustive documentation.</p>\n</blockquote>\n<h4 id=\"actions\" style=\"position:relative;\"><a href=\"#actions\" aria-label=\"actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions</h4>\n<p>Within a reaction, actions may be scheduled using the <a href=\"https://lf-lang.org/reactor-rust/reactor_rt/struct.ReactionCtx.html#method.schedule\"><code class=\"language-text\">schedule</code></a> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// schedule without additional delay</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Asap</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// schedule with an additional delay</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">,</span> <span class=\"token macro property\">after!</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// that's shorthand for</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">,</span> <span class=\"token class-name\">After</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">of_millis</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Actions may carry values if they mention a data type, for instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">logical action act<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Within a reaction, you can schedule that action with a value like so</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">ctx<span class=\"token punctuation\">.</span><span class=\"token function\">schedule_with_v</span><span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Asap</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>you can get the value from another reaction like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get_action</span><span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// a value is present at this tag</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// value was not specified</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If an action does not mention a data type, the type is defaulted to <code class=\"language-text\">()</code>.</p>\n<h4 id=\"time-2\" style=\"position:relative;\"><a href=\"#time-2\" aria-label=\"time 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time</h4>\n<blockquote>\n<p>⚠ todo</p>\n</blockquote>\n<p><span class=\"warning\">This needs updating!</span></p>\n<p>In the TypeScript reactor target for Lingua Franca, reactions are written in <a href=\"https://www.typescriptlang.org/\">TypeScript</a> and the code generator generates a standalone TypeScript program that can be compiled to JavaScript and run on <a href=\"https://nodejs.org\">Node.js</a>.</p>\n<p>TypeScript reactors bring the strengths of TypeScript and Node.js to Lingua Franca programming. The TypeScript language and its associated tools enable static type checking for both reaction code and Lingua Franca elements like ports and actions. The Node.js JavaScript runtime provides an execution environment for asynchronous network applications. With Node.js comes Node Package Manager (<a href=\"https://www.npmjs.com/\">npm</a>) and its large library of supporting modules.</p>\n<p>In terms of raw performance on CPU intensive operations, TypeScript reactors are about two orders of magnitude slower than C reactors. But excelling at CPU intensive operations isn’t really the point of Node.js (or by extension TypeScript reactors). Node.js is about achieving high throughput on network applications by efficiently handling asynchronous I/O operations. Keep this in mind when choosing the right Lingua Franca target for your application.</p>\n<h2 id=\"setup-3\" style=\"position:relative;\"><a href=\"#setup-3\" aria-label=\"setup 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p>First, make sure Node.js is installed on your machine. You can <a href=\"https://nodejs.org/en/download/\">download Node.js here</a>. The npm package manager comes along with Node.</p>\n<p>After installing Node, you may optionally install the TypeScript compiler.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g typescript</code></pre></div>\n<p>TypeScript reactor projects are created with a local copy of the TypeScript compiler, but having the TypeScript compiler globally installed can be useful for <a href=\"#debugging-type-errors\">debugging type errors</a> and type checking on the command line.</p>\n<h2 id=\"a-minimal-example-1\" style=\"position:relative;\"><a href=\"#a-minimal-example-1\" aria-label=\"a minimal example 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A Minimal Example</h2>\n<p>A “hello world” reactor for the TypeScript target looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor Minimal {\n    timer t;\n    reaction(t) {=\n        console.log(\"Hello World.\");\n    =}\n}</code></pre></div>\n<p>The timer triggers at the start time of the execution causing the reaction to execute. This program can be found in a file called <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/xtext/org.icyphy.linguafranca/src/test/TS/Minimal.lf\"><code class=\"language-text\">Minimal.lf</code></a> in the <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/xtext/org.icyphy.linguafranca/src/test/TS\">test directory</a>, where you can also find quite a few more interesting examples. If you compile this using the <a href=\"downloading-and-building#Command-Line-Tools\"><code class=\"language-text\">lfc</code> command-line compiler</a> or the <a href=\"downloading-and-building#Download-the-Integrated-Development-Environment\">Eclipse-based IDE</a>, a number of files and directories will be generated. You can run the compiled JavaScript program (from <code class=\"language-text\">Minimal.lf</code>’s directory) with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node Minimal/dist/Minimal.js</code></pre></div>\n<p>The resulting output should look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hello World.</code></pre></div>\n<p>Notice the compiler generates a project directory with the name of the .lf file. In this example the .lf file’s name is “Minimal” but more generally, for <code class=\"language-text\">&lt;LF_file_name>.lf</code> the command to run the program is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node &lt;LF_file_name>/dist/&lt;LF_file_name>.js</code></pre></div>\n<p>Refer to the <a href=\"#typescript-target-implementation-details\">TypeScript Project Structure</a> section to learn why the command looks like this.</p>\n<h2 id=\"the-typescript-target-specification\" style=\"position:relative;\"><a href=\"#the-typescript-target-specification\" aria-label=\"the typescript target specification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The TypeScript Target Specification</h2>\n<p>To have Lingua Franca generate TypeScript code, start your <code class=\"language-text\">.lf</code> file with the following target specification:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;</code></pre></div>\n<p>A TypeScript target specification may optionally include the following parameters:</p>\n<ul>\n<li><code class=\"language-text\">fast [true|false]</code>: Whether to execute as fast as possible ignoring real time. This defaults to false.</li>\n<li><code class=\"language-text\">keepalive [true|false]</code>: Whether to continue executing even when there are no events on the event queue. The default is false. Usually, you will want to set this to true when you have <strong>physical action</strong>s.</li>\n<li><code class=\"language-text\">logging [ERROR|WARN|INFO|LOG|DEBUG]</code>: The level of diagnostic messages about execution to print to the console. A message will print if this parameter is greater than or equal to the level of the message (<code class=\"language-text\">ERROR</code> &#x3C; <code class=\"language-text\">WARN</code> &#x3C; <code class=\"language-text\">INFO</code> &#x3C; <code class=\"language-text\">LOG</code> &#x3C; <code class=\"language-text\">DEBUG</code>). Internally this is handled by the <a href=\"https://www.npmjs.com/package/ulog\">ulog module</a>.</li>\n<li><code class=\"language-text\">timeout &lt;n> &lt;units></code>: The amount of logical time to run before exiting. By default, the program will run forever or until forcibly stopped, with control-C, for example.</li>\n</ul>\n<p>For example, for the TypeScript target, in a source file named <code class=\"language-text\">Foo.lf</code>, you might specify:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript {\n    fast: true,\n    timeout: 10 secs,\n    logging: INFO,\n\n};</code></pre></div>\n<p>The <code class=\"language-text\">fast</code> option given above specifies to execute the file as fast as possible, ignoring timing delays.</p>\n<p>The <code class=\"language-text\">logging</code> option indicates diagnostic messages tagged as <code class=\"language-text\">ERROR</code>, <code class=\"language-text\">WARN</code>, and <code class=\"language-text\">INFO</code> should print to the console. Messages tagged <code class=\"language-text\">LOG</code> or <code class=\"language-text\">DEBUG</code> will not print.</p>\n<p>The <code class=\"language-text\">timeout</code> option specifies to stop after 10 seconds of logical time have elapsed.</p>\n<h2 id=\"command-line-arguments\" style=\"position:relative;\"><a href=\"#command-line-arguments\" aria-label=\"command line arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Command-Line Arguments</h2>\n<p>The generated JavaScript program understands the following command-line arguments, each of which has a short form (one character) and a long form:</p>\n<ul>\n<li><code class=\"language-text\">-f, --fast [true | false]</code>: Specifies whether to wait for physical time to match logical time. The default is <code class=\"language-text\">false</code>. If this is <code class=\"language-text\">true</code>, then the program will execute as fast as possible, letting logical time advance faster than physical time.</li>\n<li><code class=\"language-text\">-o, --timeout '&lt;duration> &lt;units>'</code>: Stop execution when logical time has advanced by the specified <em>duration</em>. The units can be any of nsec, usec, msec, sec, minute, hour, day, week, or the plurals of those. For the duration and units of a timeout argument to be parsed correctly as a single value, these should be specified in quotes with no leading or trailing space (eg ‘5 sec’).</li>\n<li><code class=\"language-text\">-k, --keepalive [true | false]</code>: Specifies whether to stop execution if there are no events to process. This defaults to <code class=\"language-text\">false</code>, meaning that the program will stop executing when there are no more events on the event queue. If you set this to <code class=\"language-text\">true</code>, then the program will keep executing until either the <code class=\"language-text\">timeout</code> logical time is reached or the program is externally killed. If you have <code class=\"language-text\">physical action</code>s, it usually makes sense to set this to <code class=\"language-text\">true</code>.</li>\n<li><code class=\"language-text\">-l, --logging [ERROR | WARN | INFO | LOG | DEBUG]</code>: The level of logging messages from the reactor-ts runtime to to print to the console. Messages tagged with a given type (error, warn, etc.) will print if this argument is greater than or equal to the level of the message (<code class=\"language-text\">ERROR</code> &#x3C; <code class=\"language-text\">WARN</code> &#x3C; <code class=\"language-text\">INFO</code> &#x3C; <code class=\"language-text\">LOG</code> &#x3C; <code class=\"language-text\">DEBUG</code>).</li>\n<li><code class=\"language-text\">-h, --help</code>: Print this usage guide. The program will not execute if this flag is present.</li>\n</ul>\n<p>If provided, a command line argument will override whatever value the corresponding target property had specified in the source .lf file.</p>\n<p>Command line options are parsed by the <a href=\"https://github.com/75lb/command-line-args\">command-line-arguments</a> module with <a href=\"https://github.com/75lb/command-line-args/wiki/Notation-rules\">these rules</a>. For example</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node &lt;LF_file_name>/dist/&lt;LF_file_name>.js -f false --keepalive=true -o '4 sec' -l INFO</code></pre></div>\n<p>is a valid setting.</p>\n<p>Any errors in command-line arguments result in printing the above information. The program will not execute if there is a parsing error for command-line arguments.</p>\n<h3 id=\"custom-command-line-arguments\" style=\"position:relative;\"><a href=\"#custom-command-line-arguments\" aria-label=\"custom command line arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Command-Line Arguments</h3>\n<p>User-defined command-line arguments may be created by giving the main reactor <a href=\"#using-parameters\">parameters</a>. Assigning the main reactor a parameter of type <code class=\"language-text\">string</code>, <code class=\"language-text\">number</code>, <code class=\"language-text\">boolean</code>, or <code class=\"language-text\">time</code> will add an argument with corresponding name and type to the generated program’s command-line-interface. Custom arguments will also appear in the generated program’s usage guide (from the <code class=\"language-text\">--help</code> option). If the generated program is executed with a value specified for a custom command-line argument, that value will override the default value for the corresponding parameter. Arguments typed <code class=\"language-text\">string</code>, <code class=\"language-text\">number</code>, and <code class=\"language-text\">boolean</code> are parsed in the expected way, but <code class=\"language-text\">time</code> arguments must be specified on the command line like the <code class=\"language-text\">--timeout</code> property as <code class=\"language-text\">'&lt;duration> &lt;units>'</code> (in quotes).</p>\n<p>Note: Custom arguments may not have the same names as standard arguments like <code class=\"language-text\">timeout</code> or <code class=\"language-text\">keepalive</code>.</p>\n<p>For example this reactor has a custom command line argument named <code class=\"language-text\">customArg</code> of type <code class=\"language-text\">number</code> and default value <code class=\"language-text\">2</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor clArg(customArg:number(2)) {\n    reaction (startup) {=\n        console.log(customArg);\n    =}\n}</code></pre></div>\n<p>If this reactor is compiled from the file <code class=\"language-text\">simpleCLArgs.lf</code>, executing</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node simpleCLArgs/dist/simpleCLArgs.js</code></pre></div>\n<p>outputs the default value <code class=\"language-text\">2</code>. But running</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node simpleCLArgs/dist/simpleCLArgs.js --customArg=42</code></pre></div>\n<p>outputs <code class=\"language-text\">42</code>. Additionally, we can view documentation for the custom command line argument with the <code class=\"language-text\">--help</code> command.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node simpleCLArgs/dist/simpleCLArgs.js -h</code></pre></div>\n<p>The program will generate the standard usage guide, but also</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">--customArg '&lt;duration> &lt;units>'                    Custom argument. Refer to\n                                                      &lt;path>/simpleCLArgs.lf\n                                                      for documentation.</code></pre></div>\n<h3 id=\"additional-types-for-custom-command-line-arguments\" style=\"position:relative;\"><a href=\"#additional-types-for-custom-command-line-arguments\" aria-label=\"additional types for custom command line arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Additional types for Custom Command-Line Arguments</h3>\n<p>Main reactor parameters that are not typed <code class=\"language-text\">string</code>, <code class=\"language-text\">number</code>, <code class=\"language-text\">boolean</code>, or <code class=\"language-text\">time</code> will not create custom command-line arguments. However, that doesn’t mean it is impossible to obtain other types from the command line, just use a <code class=\"language-text\">string</code> and specify how the parsing is done yourself. See below for an example of a reactor that parses a custom command-line argument of type <code class=\"language-text\">string</code> into a state variable of type <code class=\"language-text\">Array&lt;number></code> using <code class=\"language-text\">JSON.parse</code> and a <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\">user-defined type guard</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor customType(arrayArg:string(\"\")) {\n    preamble {=\n        function isArrayOfNumbers(x: any): x is Array&lt;number> {\n            for (let item of x) {\n                if (typeof item !== \"number\") {\n                    return false;\n                }\n            }\n            return true;\n        }\n    =}\n    state foo:{=Array&lt;number>=}({=[]=});\n    reaction (startup) {=\n        let parsedArgument = JSON.parse(customType);\n        if (isArrayOfNumbers(parsedArgument)) {\n            foo = parsedArgument;\n            }\n        else {\n            throw new Error(\"Custom command line argument is not an array of numbers.\");\n        }\n        console.log(foo);\n    =}\n}</code></pre></div>\n<h2 id=\"imports\" style=\"position:relative;\"><a href=\"#imports\" aria-label=\"imports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Imports</h2>\n<p>The <a href=\"Language-Specification#import-statement\">import statement</a> can be used to share reactor definitions across several applications. Suppose for example that we modify the above <code class=\"language-text\">Minimal.lf</code> program as follows and store this in a file called <code class=\"language-text\">HelloWorld.lf</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nreactor HelloWorldInside {\n    timer t;\n    reaction(t) {=\n        console.log(\"Hello World.\");\n    =}\n}\nmain reactor HelloWorld {\n    a = new HelloWorldInside();\n}</code></pre></div>\n<p>This can be compiled and run, and its behavior will be identical to the version above.\nBut now, this can be imported into another reactor definition as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nimport HelloWorld.lf;\nmain reactor TwoHelloWorlds {\n    a = new HelloWorldInside();\n    b = new HelloWorldInside();\n}</code></pre></div>\n<p>This will create two instances of the HelloWorld reactor, and when executed, will print “Hello World” twice.</p>\n<p>A more interesting illustration of imports can be found in the <code class=\"language-text\">Import.lf</code> test case in the <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/xtext/org.icyphy.linguafranca/src/test/TS\">test directory</a>.</p>\n<h2 id=\"preamble\" style=\"position:relative;\"><a href=\"#preamble\" aria-label=\"preamble permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preamble</h2>\n<p>Reactions may contain arbitrary TypeScript code, but often it is convenient for that code to invoke node modules or to share function/type/class definitions. For these purposes, a reactor may include a <strong>preamble</strong> section. For example, the following reactor uses Node’s built-in path module to extract the base name from a path:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor Preamble {\n    preamble {=\n        import * as path from 'path';\n    =}\n    reaction (startup) {=\n        var filename = path.basename('/Users/Refsnes/demo_path.js');\n        console.log(filename);\n    =}\n}</code></pre></div>\n<p>This will print:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">demo_path.js</code></pre></div>\n<p>By putting the <code class=\"language-text\">import</code> in the <strong>preamble</strong>, the library becomes available in all reactions of this reactor. Oddly, it also becomes available in all subsequently defined reactors in the same file. It’s a bit more complicated to <a href=\"#using-node-modules\">set up node.js modules from npm</a> that aren’t built-in, but the reaction code to <code class=\"language-text\">import</code> them is the same as what you see here.</p>\n<p>You can also use the preamble to define functions that are shared across reactions and reactors:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main reactor Preamble {\n    preamble {=\n        function add42( i:number) {\n            return i + 42;\n        }\n    =}\n    timer t;\n    reaction(t) {=\n        let s = \"42\";\n        let radix = 10;\n        let i = parseInt(s, radix);\n        console.log(\"Converted string \" + s + \" to number \" + i);\n        console.log(\"42 plus 42 is \" + add42(42));\n    =}\n}</code></pre></div>\n<p>Not surprisingly, this will print:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Converted string 42 to number 42\n42 plus 42 is 84</code></pre></div>\n<h3 id=\"using-node-modules\" style=\"position:relative;\"><a href=\"#using-node-modules\" aria-label=\"using node modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Node Modules</h3>\n<p>Installing Node.js modules for TypeScript reactors with <code class=\"language-text\">npm</code> is essentially the same as installing modules for an ordinary Node.js program. First, write a Lingua Franca program (<code class=\"language-text\">Foo.lf</code>) and compile it. It may not type check if if you’re <a href=\"#preamble\">importing modules in the preamble</a> and you haven’t installed the modules yet, but compiling your program will cause the TypeScript code generator to <a href=\"#typescript-target-implementation-details\">produce a project</a> for your program. There should now be a package.json file in the same directory as your .lf file. Open a terminal and navigate to that directory. You can use the standard <a href=\"https://docs.npmjs.com/cli/install\"><code class=\"language-text\">npm install</code></a> command to install modules for your TypeScript reactors.</p>\n<p>The important takeaway here is with the package.json file and the compiled JavaScript in the Foo/dist/ directory, you have a standard Node.js program that executes as such. You can modify and debug it just as you would a Node.js program.</p>\n<h2 id=\"reactions-1\" style=\"position:relative;\"><a href=\"#reactions-1\" aria-label=\"reactions 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reactions</h2>\n<p>Recall that a reaction is defined within a reactor using the following syntax:</p>\n<blockquote>\n<p><strong>reaction</strong>(<em>triggers</em>) <em>uses</em> -> <em>effects</em> {=<br/> >    … target language code … <br/>\n=}</p>\n</blockquote>\n<p>In this section, we explain how <strong>triggers</strong>, <strong>uses</strong>, and <strong>effects</strong> variables work in the TypeScript target.</p>\n<h3 id=\"types\" style=\"position:relative;\"><a href=\"#types\" aria-label=\"types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types</h3>\n<p>In Lingua Franca, reactor elements like inputs, outputs, actions, parameters, and state are typed using target language types. For the TypeScript target, <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html\">TypeScript types</a> are generally acceptable with two notable exceptions:</p>\n<ul>\n<li>Custom types (and classes) must be defined in the <a href=\"#preamble\">preamble</a> before they may be used.</li>\n<li><code class=\"language-text\">undefined</code> is not a valid type for an input, output, or action. This is because <code class=\"language-text\">undefined</code> is used to designate the absence of an input, output, or action during a reaction.</li>\n</ul>\n<p><strong>To benefit from type checking, you should declare types for your reactor elements.</strong> If a type isn’t declared for a state variable, it is assigned the type <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type\"><code class=\"language-text\">unknown</code></a>. If a type isn’t declared for an input, output, or action, it is assigned the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> type <code class=\"language-text\">Present</code> which is defined as</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export type Present = (number | string | boolean | symbol | object | null);</code></pre></div>\n<h3 id=\"inputs-and-outputs-3\" style=\"position:relative;\"><a href=\"#inputs-and-outputs-3\" aria-label=\"inputs and outputs 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inputs and Outputs</h3>\n<p>In the body of a reaction in the TypeScript target, inputs are simply referred to by name. An input of type <code class=\"language-text\">t</code> is available within the body of a reaction as a local variable of type <code class=\"language-text\">t | undefined</code>. To determine whether an input is present, test the value of the input against <code class=\"language-text\">undefined</code>. An <code class=\"language-text\">undefined</code> input is not present.</p>\n<p><strong>WARNING</strong> Be sure to use the <code class=\"language-text\">===</code> or <code class=\"language-text\">!==</code> operator and not <code class=\"language-text\">==</code> or <code class=\"language-text\">!=</code> to test against <code class=\"language-text\">undefined</code>. In JavaScript/TypeScript the comparison <code class=\"language-text\">undefined == null</code> yields the value <code class=\"language-text\">true</code>. It may also be tempting to rely upon the falsy evaluation of <code class=\"language-text\">undefined</code> within an <code class=\"language-text\">if</code> statement, but this may introduce bugs. For example a reaction that tests the presence of input <code class=\"language-text\">x</code> with <code class=\"language-text\">if (x) { ... }</code> will not correctly identify potentially valid present values such as <code class=\"language-text\">0</code>, <code class=\"language-text\">false</code>, or <code class=\"language-text\">\"\"</code>.</p>\n<p>For example, the <code class=\"language-text\">Determinism.lf</code> test case in the <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/xtext/org.icyphy.linguafranca/src/test/TS\">test directory</a> includes the following reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Destination {\n    input x:number;\n    input y:number;\n    reaction(x, y) {=\n        let sum = 0;\n        if (x !== undefined) {\n            sum += x;\n        }\n        if (y !== undefined) {\n            sum += y;\n        }\n        console.log(\"Received \" + sum);\n        if (sum != 2) {\n            console.log(\"FAILURE: Expected 2.\");\n            util.failure();\n        }\n    =}\n}</code></pre></div>\n<p>The reaction refers to the inputs <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> by name and tests for their presence by testing <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> against <code class=\"language-text\">undefined</code>. If a reaction is triggered by just one input, then normally it is not necessary to test for its presence. It will always be present. However TypeScript’s type system is not smart enough to know such an input will never have type <code class=\"language-text\">undefined</code> if there’s no test against <code class=\"language-text\">undefined</code> within the reaction. An explicit type annotation (for example <code class=\"language-text\">x = x as t;</code> where <code class=\"language-text\">t</code> is the type of the input) may be necessary to avoid type errors from the compiler. In the above example, there are two triggers, so the reaction has no assurance that both will be present.</p>\n<p>Inputs declared in the <strong>uses</strong> part of the reaction do not trigger the reaction. Consider this modification of the above reaction:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reaction(x) y {=\n    let sum = x as number;\n    if (y !== undefined) {\n        sum += y;\n    }\n    console.log(\"Received \" + sum + \".\");\n=}</code></pre></div>\n<p>It is no longer necessary to test for the presence of <code class=\"language-text\">x</code> because that is the only trigger. The input <code class=\"language-text\">y</code>, however, may or may not be present at the logical time that this reaction is triggered. Hence, the code must test for its presence.</p>\n<p>The <strong>effects</strong> portion of the reaction specification can include outputs and actions. Actions will be described below. Like inputs, an output of type <code class=\"language-text\">t</code> is available within the body of a reaction as a local variable of type <code class=\"language-text\">t | undefined</code>. The local variable for each output is initialized to the output’s current value. Outputs are set by assigning a (non-<code class=\"language-text\">undefined</code>) value to its local variable (no changes will be made to an output if it has the value <code class=\"language-text\">undefined</code> at the end of a reaction). Whatever value an output’s local variable has at the end of the reaction will be set to that output. If an output’s local variable has the value <code class=\"language-text\">undefined</code> at the end of the reaction, that output will not be set and connected downstream inputs will be absent. For example, we can further modify the above example as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">output z:number;\nreaction(x) y -> z {=\n    let sum = x as number;\n    if (y !== undefined) {\n        sum += y;\n    }\n    z = sum;\n=}</code></pre></div>\n<p>If an output gets set more than once at any logical time, downstream reactors will see only the <em>final</em> value that is set. Since the order in which reactions of a reactor are invoked at a logical time is deterministic, and whether inputs are present depends only on their timestamps, the final value set for an output will also be deterministic.</p>\n<p>An output may even be set in different reactions of the same reactor at the same logical time. In this case, one reaction may wish to test whether the previously invoked reaction has set the output. It can do that using a <code class=\"language-text\">!== undefined</code> test for that output. For example, the following reactor will always produce the output 42:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor TestForPreviousOutput {\n    output out:number;\n    reaction(startup) -> out {=\n        if (Math.random() > 0.5) {\n            out = 21;\n        }\n    =}\n    reaction(startup) -> out {=\n        let previous_output = out;\n        if (previous_output) {\n            out = 2 * previous_output;\n        } else {\n            out = 42;\n        }\n    =}\n}</code></pre></div>\n<p>The first reaction may or may not set the output to 21. The second reaction doubles the output if it has been previously produced and otherwise produces 42.</p>\n<h3 id=\"using-state-variables\" style=\"position:relative;\"><a href=\"#using-state-variables\" aria-label=\"using state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using State Variables</h3>\n<p>A reactor may declare state variables, which become properties of each instance of the reactor. For example, the following reactor will produce the output sequence 0, 1, 2, 3, … :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Count {\n    state count:number(0);\n    output y:number;\n    timer t(0, 100 msec);\n    reaction(t) -> y {=\n        count++;\n        y = count;\n    =}\n}</code></pre></div>\n<p>The declaration on the second line gives the variable the name “count”, declares its type to be <code class=\"language-text\">number</code>, and initializes its value to 0. The type and initial value can be enclosed in the Typescript-code delimitters <code class=\"language-text\">{= ... =}</code> if they are not simple identifiers, but in this case, that is not necessary.</p>\n<p>In the body of the reaction, the reactor’s state variable is referenced by way of a local variable of the same name. The local variable will contain the current value of the state at the beginning of the reaction. The final value of the local variable will be used to update the state at the end of the reaction.</p>\n<p>It may be tempting to declare state variables in the <strong>preamble</strong>, as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor FlawedCount {\n    preamble {=\n        let count = 0;\n    =}\n    output y:number;\n    timer t(0, 100 msec);\n    reaction(t) -> y {=\n        count++;\n        y = count;\n    =}\n}</code></pre></div>\n<p>This will produce a sequence of integers, but if there is more than one instance of the reactor, those instances will share the same variable count. Hence, <strong>don’t do this</strong>! Sharing variables across instances of reactors violates a basic principle, which is that reactors communicate only by sending messages to one another. Sharing variables will make your program nondeterministic. If you have multiple instances of the above FlawedCount reactor, the outputs produced by each instance will not be predictable, and in an asynchronous implementation, will also not be repeatable.</p>\n<p>A state variable may be a time value, declared as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    state time_value:time(100 msec);</code></pre></div>\n<p>The <code class=\"language-text\">time_value</code> variable will be of type <code class=\"language-text\">TimeValue</code>, which is an object used to represent a time in the TypeScript Target. Refer to the section on <a href=\"#timed-behavior\">timed behavior</a> for more information.</p>\n<p>A state variable can have an array or object value. For example, the following reactor computes the <strong>moving average</strong> of the last four inputs each time it receives an input:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor MovingAverage {\n    state delay_line:{=Array&lt;number>=}({= [0.0, 0.0, 0.0] =});\n    state index:number(0);\n    input x:number;\n    output out:number;\n    reaction(x) -> out {=\n        x = x as number;\n        // Calculate the output.\n        let sum = x;\n        for (let i = 0; i &lt; 3; i++) {\n            sum += delay_line[i];\n        }\n        out = sum/4.0;\n\n        // Insert the input in the delay line.\n        delay_line[index] = x;\n\n        // Update the index for the next input.\n        index++;\n        if (index >= 3) {\n            index = 0;\n        }\n    =}\n}</code></pre></div>\n<p>The second line declares that the type of the state variable is an array of <code class=\"language-text\">number</code>s with the initial value of the array being a three-element array filled with zeros.</p>\n<p>States whose type are objects can similarly be initialized. Declarations can take an object literal as the initial value:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">state myLiteral:{= {foo: number, bar: string} =}({= {foo: 42, bar: \"baz\"} =});</code></pre></div>\n<p>or use <code class=\"language-text\">new</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">state mySet:{=Set&lt;number>=}({= new Set&lt;number>() =});</code></pre></div>\n<h3 id=\"using-parameters\" style=\"position:relative;\"><a href=\"#using-parameters\" aria-label=\"using parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Parameters</h3>\n<p>Reactor parameters are also referenced in the TypeScript code as local variables. The example below modifies the above <code class=\"language-text\">Count</code> reactor so that its stride is a parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nreactor Count(stride:number(1)) {\n    state count:number(0);\n    output y:number;\n    timer t(0, 100 msec);\n    reaction(t) -> y {=\n        y = count;\n        count += stride;\n    =}\n}\nreactor Display {\n    input x:number;\n    reaction(x) {=\n        console.log(\"Received: \" + x + \".\");\n    =}\n}\nmain reactor Stride {\n    c = new Count(stride = 2);\n    d = new Display();\n    c.y -> d.x;\n}</code></pre></div>\n<p>The second line defines the <code class=\"language-text\">stride</code> parameter, gives its type, and gives its initial value. As with state variables, the type and initial value can be enclosed in <code class=\"language-text\">{= ... =}</code> if necessary. The parameter is referenced in the reaction by referring to the local variable <code class=\"language-text\">stride</code>.</p>\n<p>When the reactor is instantiated, the default parameter value can be overridden. This is done in the above example near the bottom with the line:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    c = new Count(stride = 2);</code></pre></div>\n<p>If there is more than one parameter, use a comma separated list of assignments.</p>\n<p>Parameters in Lingua Franca are immutable. To encourage correct usage, parameter variables within a reaction are local <code class=\"language-text\">const</code> variables. If you feel tempted to use a mutable parameter, instead try using the parameter to initialize state and modify the state variable instead. This is illustrated below by a further modification to the Stride example where it takes an initial “start” value for count as a second parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nreactor Count(stride:number(1), start:number(5)) {\n    state count:number(start);\n    output y:number;\n    timer t(0, 100 msec);\n    reaction(t) -> y {=\n        y = count;\n        count += stride;\n    =}\n}\nreactor Display {\n    input x:number;\n    reaction(x) {=\n        console.log(\"Received: \" + x + \".\");\n    =}\n}\nmain reactor Stride {\n    c = new Count(stride = 2, start = 10);\n    d = new Display();\n    c.y -> d.x;\n}</code></pre></div>\n<p>Parameters can have array or object values. Here is an example that outputs the elements of an array as a sequence of individual messages:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Source(sequence:{=Array&lt;number>=}({= [0, 1, 2] =})) {\n    output out:number;\n    state count:number(0);\n    logical action next;\n    reaction(startup, next) -> out, next {=\n        out = sequence[count];\n        count++;\n        if (count &lt; sequence.length) {\n            actions.next.schedule(0, null);\n        }\n    =}\n}</code></pre></div>\n<p>The <strong>logical action</strong> named <code class=\"language-text\">next</code> and the <code class=\"language-text\">schedule</code> function are explained below in <a href=\"#Scheduling-Delayed-Reactions\">Scheduling Delayed Reactions</a>, but here they are used simply to repeat the reaction until all elements of the array have been sent.</p>\n<p>Above, the parameter default value is an array with three elements, <code class=\"language-text\">[0, 1, 2]</code>. The syntax for giving this default value is a TypeScript array literal. Since this is TypeScript syntax, not Lingua Franca syntax, the initial value needs to be surrounded with the target code delimiters, <code class=\"language-text\">{= ... =}</code>. The default value can be overridden when instantiating the reactor using a similar syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">s = new Source(sequence={= [1, 2, 3, 4] =});</code></pre></div>\n<p>Both default and overridden values for parameters can also be created with the <code class=\"language-text\">new</code> keyword:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Source(sequence:{=Array&lt;number>=}({= new Array&lt;number>() =})) {</code></pre></div>\n<p>and</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">s = new Source(sequence={= new Array&lt;number() =});</code></pre></div>\n<h3 id=\"sending-and-receiving-custom-types\" style=\"position:relative;\"><a href=\"#sending-and-receiving-custom-types\" aria-label=\"sending and receiving custom types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sending and Receiving Custom Types</h3>\n<p>You can define your own datatypes in TypeScript and send and receive those. Consider the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor CustomType {\n    preamble {=\n        type custom = string | null;\n    =}\n    output out:custom;\n    reaction(startup) -> out {=\n        out = null;\n    =}\n}</code></pre></div>\n<p>The <strong>preamble</strong> code defines a custom union type of <code class=\"language-text\">string</code> and <code class=\"language-text\">null</code>.</p>\n<h2 id=\"timed-behavior-1\" style=\"position:relative;\"><a href=\"#timed-behavior-1\" aria-label=\"timed behavior 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Timed Behavior</h2>\n<p>See <a href=\"#summary-of-time-functions\">Summary of Time Functions</a> and <a href=\"#utility-function-reference\">Utility Function Reference</a> for a quick API reference.</p>\n<p>Timers are specified exactly as in the <a href=\"Language-Specification#timer-declaration\">Lingua Franca language specification</a>. When working with time in the TypeScript code body of a reaction, however, you will need to know a bit about its internal representation.</p>\n<p>A <code class=\"language-text\">TimeValue</code> is an class defined in the TypeScript target library file <code class=\"language-text\">time.ts</code> to represent a time instant or interval. For your convenience <code class=\"language-text\">TimeValue</code> and other classes from the <code class=\"language-text\">time.ts</code> library mentioned in these instructions are automatically imported into scope of your reactions. An instant is the number of nanoseconds that have elapsed since January 1, 1970. An interval is the difference between two instants. When an LF program starts executing, logical time is (normally) set to the instant provided by the operating system. (On some embedded platforms without real-time clocks, it will be set instead to zero.)</p>\n<p>Internally a <code class=\"language-text\">TimeValue</code> uses two numbers to represent the time. To prevent overflow (which would occur for time intervals spanning more than 0.29 years if a single JavaScript number, which has 2^53 bits of precision, were to be used), we use <em>two</em> numbers to store a time value. The first number denotes the number of whole seconds in the interval or instant; the second number denotes the remaining number of nanoseconds in the interval or instant. The first number represents the number of seconds, the second number represents the number of nanoseconds. These fields are not accessible to the programmer, instead <code class=\"language-text\">TimeValue</code>s may be manipulated by an <a href=\"#summary-of-time-functions\">API</a> with functions for addition, subtraction, and comparison.</p>\n<p>A reaction can examine the current logical time (which is constant during the execution of the reaction). For example, consider:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor GetTime {\n    timer t(0, 1 sec);\n    reaction(t) {=\n        let logical:TimeValue = util.getCurrentLogicalTime()\n        console.log(\"Logical time is \" + logical + \".\");\n    =}\n}</code></pre></div>\n<p>When executed, you will get something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Logical time is (1584666585 secs; 805146880 nsecs).\nLogical time is (1584666586 secs; 805146880 nsecs).\nLogical time is (1584666587 secs; 805146880 nsecs).\n...</code></pre></div>\n<p>Subsequent values of logical time are printed out in their raw form, of seconds and nanoseconds. If you look closely, you will see that each number is one second larger than the previous number.</p>\n<p>You can also obtain the <em>elapsed</em> logical time since the start of execution, rather than exact logical time:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main reactor GetTime {\n    timer t(0, 1 sec);\n    reaction(t) {=\n        let logical:TimeValue = util.getElapsedLogicalTime()\n        console.log(\"Logical time is \" + logical + \".\");\n    =}\n}</code></pre></div>\n<p>This will produce:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Logical time is (0 secs; 0 nsecs).\nLogical time is (1 secs; 0 nsecs).\nLogical time is (2 secs; 0 nsecs).\n...</code></pre></div>\n<p>You can get physical time, which comes from your platform’s real-time clock:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main reactor GetTime {\n    timer t(0, 1 sec);\n    reaction(t) {=\n        let physical:TimeValue = util.getCurrentPhysicalTime()\n        console.log(\"Physical time is \" + physical + \".\");\n    =}\n}</code></pre></div>\n<p>This will produce something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Physical time is (1584666801 secs; 644171008 nsecs).\nPhysical time is (1584666802 secs; 642269952 nsecs).\nPhysical time is (1584666803 secs; 642278912 nsecs).\n...</code></pre></div>\n<p>Notice that these numbers are increasing by <em>roughly</em> one second each time.</p>\n<p>You can also get <em>elapsed</em> physical time from the start of execution:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main reactor GetTime {\n    timer t(0, 1 sec);\n    reaction(t) {=\n        let physical:TimeValue = util.getElapsedPhysicalTime()\n        console.log(\"Physical time is \" + physical + \".\");\n    =}\n}</code></pre></div>\n<p>This will produce something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Physical time is (0 secs; 2260992 nsecs).\nPhysical time is (1 secs; 166912 nsecs).\nPhysical time is (2 secs; 136960 nsecs).\n...</code></pre></div>\n<p>You can create a <code class=\"language-text\">TimeValue</code> yourself with the <code class=\"language-text\">UnitBasedTimeValue</code> class. <code class=\"language-text\">UnitBasedTimeValue</code> is a subclass of <code class=\"language-text\">TimeValue</code> and can be used wherever you could also use a <code class=\"language-text\">TimeValue</code> directly obtained from one of the <code class=\"language-text\">util</code> functions. A <code class=\"language-text\">UnitBasedTimeValue</code> is constructed with a whole number and a <code class=\"language-text\">TimeUnit</code>. A <code class=\"language-text\">TimeUnit</code> is an enum from the <code class=\"language-text\">time.ts</code> library with convenient labels for common time units. These are nsec, usec, msec, sec (or secs), minute (or minutes), hour (or hours), day (or days), and week (or weeks).</p>\n<p>This reactor has an example of a UnitBasedTimeValue.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main reactor GetTime {\n    timer t(0, 1 sec);\n    reaction(t) {=\n        let myTimeValue:TimeValue = new UnitBasedTimeValue(200, TimeUnit.msec);\n        let logical:TimeValue = util.getCurrentLogicalTime()\n        console.log(\"My custom time value is \" + myTimeValue + \".\");\n    =}</code></pre></div>\n<p>This will produce:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">My custom time value is 200 msec.\nMy custom time value is 200 msec.\nMy custom time value is 200 msec.\n...</code></pre></div>\n<h3 id=\"tags\" style=\"position:relative;\"><a href=\"#tags\" aria-label=\"tags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tags</h3>\n<p>The TypeScript target provides a utility to get the current <code class=\"language-text\">Tag</code> of a reaction. Recall that time in Lingua Franca is superdense and each <code class=\"language-text\">TimeValue </code>is paired with an integer “microstep” index to track the number of iterations at a particular <code class=\"language-text\">TimeValue</code>. A <code class=\"language-text\">Tag</code> is this combination of a TimeValue and a “microstep”. The <code class=\"language-text\">time.ts</code> library provides functions for adding, subtracting, and comparing <code class=\"language-text\">Tag</code>s.</p>\n<p>You can get the current <code class=\"language-text\">Tag</code> in your reactions. This example illustrates tags with a <a href=\"#zero-delay-actions\">Zero-Delay Action</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor GetTime {\n    timer t(0, 1 sec);\n    logical action a;\n    reaction(t) -> a {=\n        let superdense:Tag = util.getCurrentTag();\n        console.log(\"First iteration - the tag is: \" + superdense + \".\");\n        actions.a.schedule(0, null);\n    =}\n    reaction(a) {=\n        let superdense:Tag = util.getCurrentTag();\n        let timePart:TimeValue = superdense.time;\n        let microstepPart:number = superdense.microstep;\n        console.log(\"Second iteration - the time part of the tag is:  \" + timePart + \".\");\n        console.log(\"Second iteration - the microstep part of the tag is:  \" + microstepPart + \".\");\n    =}\n}</code></pre></div>\n<p>This will produce:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">First iteration - the tag is: ((1584669987 secs; 740464896 nsecs), 0).\nSecond iteration - the time part of the tag is:  (1584669987 secs; 740464896 nsecs).\nSecond iteration - the microstep part of the tag is:  1.\nFirst iteration - the tag is: ((1584669988 secs; 740464896 nsecs), 0).\nSecond iteration - the time part of the tag is:  (1584669988 secs; 740464896 nsecs).\nSecond iteration - the microstep part of the tag is:  1.\nFirst iteration - the tag is: ((1584669989 secs; 740464896 nsecs), 0).\nSecond iteration - the time part of the tag is:  (1584669989 secs; 740464896 nsecs).\nSecond iteration - the microstep part of the tag is:  1.\n...</code></pre></div>\n<p>The first reaction prints the “First iteration” part of the output at microstep 0. The second reaction occurs one microstep later (explained in <a href=\"#scheduling-delayed-reactions\">Scheduling Delayed Reactions</a>) and illustrates how to split a <code class=\"language-text\">Tag</code> into its constituent <code class=\"language-text\">TimeValue</code> and microstep.</p>\n<h3 id=\"scheduling-delayed-reactions-2\" style=\"position:relative;\"><a href=\"#scheduling-delayed-reactions-2\" aria-label=\"scheduling delayed reactions 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduling Delayed Reactions</h3>\n<p>Each action listed as an <strong>effect</strong> for a reaction is available as a schedulable object in the reaction body via the <code class=\"language-text\">actions</code> object. The TypeScript target provides a special <code class=\"language-text\">actions</code> object with a property for each schedulable action. Schedulable actions (of type <code class=\"language-text\">t</code>) have the object method:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">schedule: (extraDelay: TimeValue | 0, value?: T) => void;</code></pre></div>\n<p>The first argument can either be the literal 0 (shorthand for 0 seconds) or a <code class=\"language-text\">TimeValue</code>/<code class=\"language-text\">UnitBasedTimeValue</code>. The second argument is the value for the action. Consider the following reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nreactor Schedule {\n    input x:number;\n    logical action a;\n    reaction(x) -> a {=\n        actions.a.schedule(new UnitBasedTimeValue(200, TimeUnit.msec), null);\n    =}\n    reaction(a) {=\n        let elapsedTime = util.getElapsedLogicalTime();\n        console.log(\"Action triggered at logical time \" + elapsedTime + \" after start.\");\n    =}\n}</code></pre></div>\n<p>When this reactor receives an input <code class=\"language-text\">x</code>, it calls <code class=\"language-text\">schedule()</code> on the action <code class=\"language-text\">a</code>, so it will be triggered at the logical time offset (200 msec) with a null value. The action <code class=\"language-text\">a</code> will be triggered at a logical time 200 milliseconds after the arrival of input <code class=\"language-text\">x</code>. This will trigger the second reaction, which will use the <code class=\"language-text\">util.getElapsedLogicalTime()</code> function to determine how much logical time has elapsed since the start of execution. The third argument to the <code class=\"language-text\">schedule()</code> function is a <strong>value</strong>, data that can be carried by the action, which is explained below. In the above example, there is no value.</p>\n<h3 id=\"zero-delay-actions-2\" style=\"position:relative;\"><a href=\"#zero-delay-actions-2\" aria-label=\"zero delay actions 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Zero-Delay Actions</h3>\n<p>If the specified delay in a <code class=\"language-text\">schedule()</code> call is zero, then the action <code class=\"language-text\">a</code> will be triggered one <strong>microstep</strong> later in <strong>superdense time</strong> (see <a href=\"language-specification#superdense-time\">Superdense Time</a>). Hence, if the input <code class=\"language-text\">x</code> arrives at metric logical time <em>t</em>, and you call <code class=\"language-text\">schedule()</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">actions.a.schedule(0);</code></pre></div>\n<p>then when a reaction to <code class=\"language-text\">a</code> is triggered, the input <code class=\"language-text\">x</code> will be absent (it was present at the <em>previous</em> microstep). The reaction to <code class=\"language-text\">x</code> and the reaction to <code class=\"language-text\">a</code> occur at the same metric time <em>t</em>, but separated by one microstep, so these two reactions are <em>not</em> logically simultaneous. These reactions execute with different <a href=\"#tags\">Tags</a>.</p>\n<h2 id=\"actions-with-values-3\" style=\"position:relative;\"><a href=\"#actions-with-values-3\" aria-label=\"actions with values 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions With Values</h2>\n<p>If an action is declared with a data type, then it can carry a <strong>value</strong>, a data value that becomes available to any reaction triggered by the action. The most common use of this is to implement a logical delay, where a value provided at an input is produced on an output with a larger logical timestamp. To accomplish that, it is much easier to use the <strong>after</strong> keyword on a connection between reactors. Nevertheless, in this section, we explain how to directly use actions with value. In fact, the <strong>after</strong> keyword is implemented as described below.</p>\n<p>If you are familiar with other targets (like C) you may notice it is much easier to schedule actions with values in TypeScript because of TypeScript/JavaScript’s garbage collected memory management. The following example implements a logical delay using an action with a value.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Delay(delay:time(100 msec)) {\n    input x:number;\n    output out:number;\n    logical action a:number;\n    reaction(x) -> a {=\n        actions.a.schedule(delay, x as number);\n    =}\n    reaction(a) -> out {=\n        if (a !== null){\n            out = a as number\n        }\n    =}\n}</code></pre></div>\n<p>The action <code class=\"language-text\">a</code> is specified with a type <code class=\"language-text\">number</code>. The first reaction declares <code class=\"language-text\">a</code> as its effect. This declaration makes it possible for the reaction to schedule a future triggering of <code class=\"language-text\">a</code>. It’s necessary to explicitly annotate the type of <code class=\"language-text\">x</code> as a number in the schedule function because TypeScript doesn’t know the only trigger of a reaction must be present in that reaction.</p>\n<p>The second reaction declares that it is triggered by <code class=\"language-text\">a</code> and has effect <code class=\"language-text\">out</code>. When a reaction triggers or uses an action the value of that action is made available within the reaction as a local variable with the name of the action. This variable will take on the value of the action and it will have the value <code class=\"language-text\">undefined</code> if that action is absent because it was not scheduled for this reaction.</p>\n<p>The local variable cannot be used directly to schedule an action. As described above, an action <code class=\"language-text\">a</code> can only be scheduled in a reaction when it is 1) declared as an effect and 2) referenced through a property of the <code class=\"language-text\">actions</code> object. The reason for this implementation is that <code class=\"language-text\">actions.a</code> refers to the <strong>action</strong>, not its value, and it is possible to use both the action and the value in the same reaction. For example, the following reaction will produce a counting sequence after it is triggered the first time:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reaction(a) -> out, a {=\n    if (a !== null) {\n        a = a as number;\n        out = a;\n        let newValue = a++;\n        actions.a.schedule(delay, newValue);\n    }\n=}</code></pre></div>\n<h2 id=\"stopping-execution-3\" style=\"position:relative;\"><a href=\"#stopping-execution-3\" aria-label=\"stopping execution 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stopping Execution</h2>\n<p>A reaction may request that the execution stop by calling the function <code class=\"language-text\">util.requestShutdown()</code> which takes no arguments. Execution will not stop immediately when this function is called; all events with the current tag will finish processing and execution will continue for one more microstep to give shutdown triggers a chance to execute. After this additional step, execution will terminate.</p>\n<h2 id=\"typescript-target-implementation-details\" style=\"position:relative;\"><a href=\"#typescript-target-implementation-details\" aria-label=\"typescript target implementation details permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript Target Implementation Details</h2>\n<p>When a TypeScript reactor is compiled, the generated code is placed inside a project directory. This is because there are two steps of compilation. First, the Lingua Franca compiler generates a TypeScript project from the TypeScript reactor code. Second, the Lingua Franca compiler runs a TypeScript compiler on the generated TypeScript project to produce executable JavaScript. This is illustrated below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Lingua Franca (.lf) ==> TypeScript (.ts) ==> JavaScript (.js)</code></pre></div>\n<p>Assuming the directory containing our Lingua Franca file <code class=\"language-text\">Foo.lf</code> is named <code class=\"language-text\">TS</code>, the compiler will generate the following:</p>\n<ol>\n<li>TS/package.json</li>\n<li>TS/node_modules</li>\n<li>TS/Foo/tsconfig.json</li>\n<li>TS/Foo/babel.config.js</li>\n<li>TS/Foo/src/</li>\n<li>TS/Foo/dist/</li>\n</ol>\n<p>Items 1, 3, and 4 are configuration files for the generated project. Item 2 is a node_modules directory with contents specified by item 1. Item 5 is the directory for generated TypeScript code. Item 6 is the directory for compiled JavaScript code. In addition to the generated code for your Lingua Franca program, items 5 and 6 include libraries from the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> submodule.</p>\n<p>The Lingua Franca compiler automatically invokes other programs as it compiles a Lingua Franca (.lf) file to a Node.js executable JavaScript (.js) file. The files package.json, babel.config.js, and tsconfig.json are used to configure the behavior of those other programs. Whenever you compile a .lf file for the first time, the Lingua Franca compiler will copy default versions of these configuration files into the new project so the other programs can run. <strong>The Lingua Franca compiler will only copy a default configuration file into a project if that file is not already present in the generated project.</strong> This means you, the reactor programmer, may safely modify these configuration files to control the finer points of compilation. Beware, other generated files in the project’s src and dist directories may be overwritten by the compiler.</p>\n<h3 id=\"packagejson\" style=\"position:relative;\"><a href=\"#packagejson\" aria-label=\"packagejson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>package.json</h3>\n<p>Node.js uses a <a href=\"https://nodejs.org/en/knowledge/getting-started/npm/what-is-the-file-package-json/\">package.json</a> file to describe metadata relevant to a Node project. This includes a list of project dependencies (i.e. modules) used by the project. When the Lingua Franca compiler copies a default package.json file into a Lingua Franca project that doesn’t already have a package.json, the compiler runs the command <code class=\"language-text\">npm install</code> to create a node_modules directory. The default package.json only lists dependencies for the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> submodule. <a href=\"#using-node-modules\">Follow these instructions</a> to modify package.json if you want to use other Node modules in your reactors.</p>\n<h3 id=\"tsconfigjson\" style=\"position:relative;\"><a href=\"#tsconfigjson\" aria-label=\"tsconfigjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tsconfig.json</h3>\n<p>After generating a TypeScript program from a .lf file, the Lingua Franca compiler uses the TypeScript compiler <code class=\"language-text\">tsc</code> to run a type check. The behavior of <code class=\"language-text\">tsc</code> is configured by the <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">tsconfig.json</a> file. You probably won’t need to modify tsconfig.json, but you can if you know what you’re doing.</p>\n<h3 id=\"babelconfigjs\" style=\"position:relative;\"><a href=\"#babelconfigjs\" aria-label=\"babelconfigjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>babel.config.js</h3>\n<p>If the <code class=\"language-text\">tsc</code> type check was successful, the Lingua Franca compiler uses <code class=\"language-text\">babel</code> to compile the generated TypeScript code into JavaScript. (This <a href=\"https://iamturns.com/typescript-babel/\">blog post</a> articulates the advantages of using <code class=\"language-text\">babel</code> over <code class=\"language-text\">tsc</code> to generate JavaScript.) There are many different flavors of JavaScript and the <a href=\"https://babeljs.io/docs/en/configuration\">babel.config.js</a> file specifies exactly what <code class=\"language-text\">babel</code> should generate. This is the file to edit if you want the Lingua Franca compiler to produce a different version of JavaScript as its final output.</p>\n<h2 id=\"debugging-type-errors\" style=\"position:relative;\"><a href=\"#debugging-type-errors\" aria-label=\"debugging type errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debugging Type Errors</h2>\n<p>Let’s take the <a href=\"#a-minimal-example\">minimal reactor example</a>, and intentionally break it by adding a type error into the reaction.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor ReactionTypeError {\n    timer t;\n    reaction(t) {=\n        let foo:number = \"THIS IS NOT A NUMBER\";\n        console.log(\"Hello World.\");\n    =}\n}</code></pre></div>\n<p>This reactor will not compile, and should you attempt to compile it you will get an output from the compiler which looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">--- Standard output from command:\nsrc/ReactionTypeError.ts(23,25): error TS2322: Type '\"THIS IS NOT A NUMBER\"' is not assignable to type 'number'.\n\n--- End of standard output.</code></pre></div>\n<p>In particular the output</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/ReactionTypeError.ts(23,25): error TS2322: Type '\"THIS IS NOT A NUMBER\"' is not assignable to type 'number'.</code></pre></div>\n<p>identifies the problem: surprisingly, the string <code class=\"language-text\">\"THIS IS NOT A NUMBER\"</code> is not a number. However the line information <code class=\"language-text\">(23,25)</code> is a little confusing because it points to the location of the type error <strong>in the generated</strong> .ts file <code class=\"language-text\">ReactionTypeError/src/ReactionTypeError.ts</code> not in the original .lf file <code class=\"language-text\">ReactionTypeError.lf</code>. The .ts files produced by the TypeScript code generator are quite readable if you are familiar with the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> submodule, but even if you aren’t familiar it is not too difficult to track down the problem. Just open <code class=\"language-text\">ReactionTypeError/src/ReactionTypeError.ts</code> in your favorite text editor (we recommend <a href=\"https://code.visualstudio.com/docs/languages/typescript\">Visual Studio</a> for its excellent TypeScript integration) and look at line 23.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">14        this.addReaction(\n15            new Triggers(this.t),\n16            new Args(this.t),\n17            function (this, __t: Readable&lt;Tag>) {\n18                // =============== START react prologue\n19                const util = this.util;\n20                let t = __t.get();\n21                // =============== END react prologue\n22                try {\n23                    let foo:number = \"THIS IS NOT A NUMBER\";\n24                    console.log(\"Hello World.\");\n25                } finally {\n26                    // =============== START react epilogue\n27\n28                    // =============== END react epilogue\n29                }\n30            }\n31        );</code></pre></div>\n<p>There (inside the try block) we can find the problematic reaction code. <em>Reaction code is copied verbatim into generated .ts files</em>.</p>\n<p>It can be a bit harder to interpret type errors outside of reaction code, but most type error messages are still relatively clear. For example if you attempt to connect a reactor output to an incompatibly typed input like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor ConnectionError {\n    s = new Sender();\n    r = new Receiver();\n    s.foo -> r.bar;\n}\nreactor Sender {\n    output foo:number;\n}\nreactor Receiver {\n    input bar:string;\n}</code></pre></div>\n<p>you should get an error like</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">--- Standard output from command:\nsrc/InputTypeError.ts(36,23): error TS2345: Argument of type 'OutPort&lt;number>' is not assignable to parameter of type 'Port&lt;string>'.\n  Types of property 'value' are incompatible.\n    Type 'number | undefined' is not assignable to type 'string | undefined'.\n      Type 'number' is not assignable to type 'string | undefined'.\n\n--- End of standard output.</code></pre></div>\n<p>The key message being <code class=\"language-text\">Argument of type 'OutPort&lt;number>' is not assignable to parameter of type 'Port&lt;string>'</code>.</p>\n<p>One last tip: if you attempt to reference a port, action, timer etc. named <code class=\"language-text\">foo</code> that isn’t declared in the triggers, uses, or effects declaration of the reaction, you will get the error <code class=\"language-text\">Cannot find name 'foo'</code> in the reaction body.</p>\n<h2 id=\"utility-function-reference\" style=\"position:relative;\"><a href=\"#utility-function-reference\" aria-label=\"utility function reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Utility Function Reference</h2>\n<p>These utility functions may be called within a TypeScript reaction:</p>\n<p><code class=\"language-text\">util.requestShutdown(): void</code> Ends execution after one microstep. See <a href=\"#stopping-execution\">Stopping Execution</a>.</p>\n<p><code class=\"language-text\">util.getCurrentTag(): Tag</code> Gets the current (logical) tag. See <a href=\"#tags\">Tags</a>.</p>\n<p><code class=\"language-text\">util.getCurrentLogicalTime(): TimeValue</code> Gets the current logical TimeValue. See <a href=\"#timed-behavior\">Time</a>.</p>\n<p><code class=\"language-text\">util.getCurrentPhysicalTime(): TimeValue</code> Gets the current physical TimeValue. See <a href=\"#timed-behavior\">Time</a>.</p>\n<p><code class=\"language-text\">util.getElapsedLogicalTime(): TimeValue</code> Gets the elapsed logical TimeValue from execution start. See <a href=\"#timed-behavior\">Time</a>.</p>\n<p><code class=\"language-text\">util.getElapsedPhysicalTime(): TimeValue</code> Gets the elapsed physical TimeValue from execution start. See <a href=\"#timed-behavior\">Time</a>.</p>\n<p><code class=\"language-text\">util.success(): void</code> Invokes the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> App’s default success callback. FIXME: Currently doesn’t do anything in Lingua Franca.</p>\n<p><code class=\"language-text\">util.failure(): void</code> Invokes the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> App’s default failure callback. Throws an error.</p>\n<h2 id=\"summary-of-time-functions\" style=\"position:relative;\"><a href=\"#summary-of-time-functions\" aria-label=\"summary of time functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary of Time Functions</h2>\n<p>See <a href=\"#timed-behavior\">Time</a>. These time functions are defined in the <a href=\"https://github.com/lf-lang/reactor-ts/blob/master/src/core/time.ts\">time.ts</a> library of <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a>.</p>\n<p><code class=\"language-text\">UnitBasedTimeValue(value: number, unit:TimeUnit)</code> Constructor for <code class=\"language-text\">UnitBasedTimeValue</code>, a programmer-friendly subclass of TimeValue. Use a number and a <code class=\"language-text\">TimeUnit</code> enum.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">enum TimeUnit {\n    nsec,\n    usec,\n    msec,\n    sec,\n    secs,\n    minute,\n    minutes,\n    hour,\n    hours,\n    day,\n    days,\n    week,\n    weeks\n}</code></pre></div>\n<p><code class=\"language-text\">TimeValue.add(other: TimeValue): TimeValue</code> Adds <code class=\"language-text\">this</code> to <code class=\"language-text\">other</code>.</p>\n<p><code class=\"language-text\">TimeValue.subtract(other: TimeValue): TimeValue</code> Subtracts <code class=\"language-text\">other</code> from <code class=\"language-text\">this</code>. A negative result is an error.</p>\n<p><code class=\"language-text\">TimeValue.difference(other: TimeValue): TimeValue</code> Obtain absolute value of <code class=\"language-text\">other</code> minus <code class=\"language-text\">this</code>.</p>\n<p><code class=\"language-text\">TimeValue.isEqualTo(other: TimeValue): boolean</code> Returns true if <code class=\"language-text\">this</code> and <code class=\"language-text\">other</code> represents the same TimeValue. Otherwise false.</p>\n<p><code class=\"language-text\">TimeValue.isZero(): boolean</code> Returns true if <code class=\"language-text\">this</code> represents a 0 TimeValue.</p>\n<p><code class=\"language-text\">TimeValue.isEarlierThan(other: TimeValue): boolean</code> Returns true if <code class=\"language-text\">this</code> &#x3C; <code class=\"language-text\">other</code>. Otherwise false.</p>\n<p><code class=\"language-text\">Tag.isSmallerThan(other: Tag): boolean</code> Returns true if <code class=\"language-text\">this</code> &#x3C; <code class=\"language-text\">other</code>. Otherwise false.</p>\n<p><code class=\"language-text\">Tag.isSimultaneousWith(other: Tag): boolean</code> Returns true if <code class=\"language-text\">this</code> and <code class=\"language-text\">other</code> represents the same Tag. Otherwise false.</p>\n<p><code class=\"language-text\">Tag.getLaterTag(delay: TimeValue): Tag</code> Returns a tag with the time part of this TimeValue incremented by delay.</p>\n<p><code class=\"language-text\">Tag.getMicroStepLater(): Tag</code> Returns a tag with the microstep part of this TimeValue incremented by 1.</p>\n<p><code class=\"language-text\">getTimeDifference(other: Tag): TimeValue</code> Returns a TimeValue that represents the absolute (i.e., positive) time difference between <code class=\"language-text\">this</code> and <code class=\"language-text\">other</code>.</p>\n<h2 id=\"building-reactor-ts-documentation\" style=\"position:relative;\"><a href=\"#building-reactor-ts-documentation\" aria-label=\"building reactor ts documentation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building Reactor-ts Documentation</h2>\n<p>FIXME: Host these docs somewhere.</p>\n<p>To build and view proper documentation for <code class=\"language-text\">time.ts</code> (and other reactor-ts libraries), install <a href=\"https://typedoc.org/\">typedoc</a> and run</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">typedoc --out docs src</code></pre></div>\n<p>from the root of the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a>. You probably already have the reactor-ts submodule at</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">lingua-franca/xtext/org.icyphy.linguafranca/src/lib/TS/reactor-ts/</code></pre></div>\n<p>You should see an output like.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Using TypeScript 3.8.3 from /usr/local/lib/node_modules/typescript/lib\nRendering [========================================] 100%\n\nDocumentation generated at /Users/&lt;username>/git/lingua-franca/xtext/org.icyphy.linguafranca/src/lib/TS/reactor-ts/docs</code></pre></div>\n<p>Open that path in a browser with <code class=\"language-text\">/index.html</code> appended to the end like</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/Users/&lt;username>/git/lingua-franca/xtext/org.icyphy.linguafranca/src/lib/TS/reactor-ts/docs/index.html</code></pre></div>\n<p>to navigate the docs.</p>","headings":[{"value":"The C Target Specification","depth":2},{"value":"The self Struct","depth":2},{"value":"Parameters and State Variables","depth":2},{"value":"Array Values for Parameters","depth":2},{"value":"Array Values for States","depth":2},{"value":"States and Parameters with Struct Values","depth":2},{"value":"Inputs and Outputs","depth":2},{"value":"Sending and Receiving Arrays and Structs","depth":2},{"value":"Dynamically Allocated Arrays","depth":2},{"value":"Mutable Inputs","depth":2},{"value":"String Types","depth":2},{"value":"Macros For Setting Output Values","depth":2},{"value":"Dynamically Allocated Structs","depth":2},{"value":"Time","depth":2},{"value":"Actions With Values","depth":2},{"value":"Schedule Functions","depth":2},{"value":"Stopping Execution","depth":2},{"value":"Log and Debug Information","depth":2},{"value":"C Target Implementation Details","depth":2},{"value":"Included Libraries","depth":3},{"value":"Single Threaded Implementation","depth":3},{"value":"Multithreaded Implementation","depth":3},{"value":"Setup","depth":2},{"value":"The C++ Target Specification","depth":2},{"value":"Inputs and Outputs","depth":2},{"value":"State Variables","depth":2},{"value":"Parameters","depth":2},{"value":"Sending and Receiving Large Data Types","depth":2},{"value":"Time","depth":2},{"value":"Scheduling Delayed Reactions","depth":2},{"value":"Zero-Delay Actions","depth":2},{"value":"Actions With Values","depth":2},{"value":"Stopping Execution","depth":2},{"value":"Log and Debug Information","depth":2},{"value":"Setup","depth":2},{"value":"Examples","depth":2},{"value":"Key Limitations","depth":2},{"value":"The Python Target Specification","depth":2},{"value":"Inputs and Outputs","depth":2},{"value":"State Variables","depth":2},{"value":"Parameters","depth":2},{"value":"Sending and Receiving Objects","depth":2},{"value":"Timed Behavior","depth":2},{"value":"Scheduling Delayed Reactions","depth":3},{"value":"Zero-Delay actions","depth":3},{"value":"Actions With Values","depth":2},{"value":"Stopping Execution","depth":2},{"value":"Log and Debug Information","depth":2},{"value":"Python Target xImplementation Details","depth":2},{"value":"The <code class=\"language-text\">XXX.py</code> file containing user code","depth":3},{"value":"The generated LinguaFrancaXXX Python module (a C extension module)","depth":3},{"value":"Interactions between XXX.py and LinguaFrancaXXX","depth":3},{"value":"The LinguaFrancaBase package","depth":3},{"value":"Already imported Python modules","depth":3},{"value":"Setup","depth":2},{"value":"A Minimal Example","depth":2},{"value":"The Rust Target Specification","depth":2},{"value":"Target properties summary","depth":3},{"value":"The executable","depth":3},{"value":"CLI","depth":4},{"value":"Logging levels","depth":4},{"value":"File layout","depth":3},{"value":"Single-file layout","depth":4},{"value":"Specifying dependencies","depth":3},{"value":"Adding cargo dependencies","depth":4},{"value":"Configuring the runtime","depth":4},{"value":"Linking support files","depth":4},{"value":"Generation scheme","depth":3},{"value":"Reactions","depth":4},{"value":"Actions","depth":4},{"value":"Time","depth":4},{"value":"Setup","depth":2},{"value":"A Minimal Example","depth":2},{"value":"The TypeScript Target Specification","depth":2},{"value":"Command-Line Arguments","depth":2},{"value":"Custom Command-Line Arguments","depth":3},{"value":"Additional types for Custom Command-Line Arguments","depth":3},{"value":"Imports","depth":2},{"value":"Preamble","depth":2},{"value":"Using Node Modules","depth":3},{"value":"Reactions","depth":2},{"value":"Types","depth":3},{"value":"Inputs and Outputs","depth":3},{"value":"Using State Variables","depth":3},{"value":"Using Parameters","depth":3},{"value":"Sending and Receiving Custom Types","depth":3},{"value":"Timed Behavior","depth":2},{"value":"Tags","depth":3},{"value":"Scheduling Delayed Reactions","depth":3},{"value":"Zero-Delay Actions","depth":3},{"value":"Actions With Values","depth":2},{"value":"Stopping Execution","depth":2},{"value":"TypeScript Target Implementation Details","depth":2},{"value":"package.json","depth":3},{"value":"tsconfig.json","depth":3},{"value":"babel.config.js","depth":3},{"value":"Debugging Type Errors","depth":2},{"value":"Utility Function Reference","depth":2},{"value":"Summary of Time Functions","depth":2},{"value":"Building Reactor-ts Documentation","depth":2}],"frontmatter":{"permalink":"/docs/handbook/target-language-reference","title":"Target Language Reference","oneline":"Detailed reference for each target langauge.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Expressions","oneline":"Expressions in Lingua Franca.","permalink":"/docs/handbook/expressions"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Target Declaration","oneline":"The target declaration and its parameters in Lingua Franca.","permalink":"/docs/handbook/target-declaration"}}}},"pageContext":{"id":"3-target-language-reference","slug":"/docs/handbook/target-language-reference","repoPath":"/packages/documentation/copy/en/reference/Target Language Reference.md","previousID":"5817fb5d-42b0-5ef3-aafd-1729ad415a8f","nextID":"22110a6a-38ef-5618-83d1-34b559287d80","lang":"en","modifiedTime":"2022-04-21T21:55:33.581Z"}},
    "staticQueryHashes": []}