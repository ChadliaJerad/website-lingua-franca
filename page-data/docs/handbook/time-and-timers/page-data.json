{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/time-and-timers",
    "result": {"data":{"markdownRemark":{"id":"d57e16db-04dd-518f-bbfd-210399106b66","excerpt":"$page-showing-target$ Timers A key property of Lingua Franca is logical time. All events occur at an instant in logical time. By default, the runtime system…","html":"<p>$page-showing-target$</p>\n<h2 id=\"timers\" style=\"position:relative;\"><a href=\"#timers\" aria-label=\"timers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Timers</h2>\n<p>A key property of Lingua Franca is <strong>logical time</strong>. All events occur at an instant in logical time. By default, the runtime system does its best to align logical time with <strong>physical time</strong>, which is some measurement of time on the execution platform. The <strong>lag</strong> is defined to be physical time minus logical time, and the goal of the runtime system is maintain a small non-negative lag.</p>\n<p>The <strong>lag</strong> is allowed to go negative only if the <a href=\"/docs/handbook/target-specification#fast\"><code class=\"language-text\">fast</code> target property</a> or the <a href=\"/docs/handbook/target-specification#command-line-arguments\">—fast</a> is set to <code class=\"language-text\">true</code>. In that case, the program will execute as fast as possible with no regard to physical time.</p>\n<p>The simplest use of logical time in Lingua Franca is to invoke a reaction periodically. This is done by first declaring a $timer$ using this syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">timer</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>offset<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>period<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">&lt;period></code>, which is optional, specifies the time interval between timer events. The <code class=\"language-text\">&lt;offset></code>, which is also optional, specifies the (logical) time interval between when the program starts executing and the first timer event. If no period is given, then the timer event occurs only once. If neither an offset nor a period is specified, then one timer event occurs at program start, simultaneous with the $startup$ event.</p>\n<p>The period and offset are given by a number and a units, for example, <code class=\"language-text\">10 msec</code>. See the <a href=\"/docs/handbook/expressions#basic-expressions\">expressions documentation</a> for allowable units. Consider the following example:</p>\n<p>$start(Timer)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Timer <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Logical time is %lld.\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">get_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">WARNING<span class=\"token operator\">:</span> No source file found<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>cpp<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>Timer<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\">WARNING<span class=\"token punctuation\">:</span> No source <span class=\"token builtin\">file</span> found<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>py<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>Timer<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token constant\">WARNING</span><span class=\"token operator\">:</span> No source file found<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>ts<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>Timer<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token constant\">WARNING</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">No</span> source file found<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">..</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>rs<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span><span class=\"token class-name\">Timer</span><span class=\"token punctuation\">.</span>lf</code></pre></div>\n<p>$end(Timer)$</p>\n<p>This specifies a timer named <code class=\"language-text\">t</code> that will first trigger at the start of execution and then repeatedly trigger at intervals of one second. Notice that the time units can be left off if the value is zero.</p>\n<p>Each target provides a built-in function for retrieving the logical time at which the reaction is invoked,\n<span class=\"lf-c\"><code class=\"language-text\">get_logical_time()</code></span>\n<span class=\"lf-cpp warning\">FIXME</span>\n<span class=\"lf-py warning\">FIXME</span>\n<span class=\"lf-ts warning\">FIXME</span>\n<span class=\"lf-rs warning\">FIXME</span>.\nOn most platforms (with the exception of some embedded platforms), the returned value is a 64-bit number representing the number of nanoseconds that have elapsed since January 1, 1970. Executing the above displays something like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Logical time is 1648402121312985000.\nLogical time is 1648402122312985000.\nLogical time is 1648402123312985000.\n...</code></pre></div>\n<p>The output lines appear at one second intervals unless the <code class=\"language-text\">fast</code> option has been specified.</p>\n<h2 id=\"elapsed-time\" style=\"position:relative;\"><a href=\"#elapsed-time\" aria-label=\"elapsed time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elapsed Time</h2>\n<p>The times above are a bit hard to read, so, for convenience, each target provides a built-in function to retrieve the <em>elapsed</em> time. For example:</p>\n<p>$start(TimeElapsed)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> TimeElapsed <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"Elapsed logical time is %lld.\\n\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">get_elapsed_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">WARNING<span class=\"token operator\">:</span> No source file found<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>cpp<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>TimeElapsed<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\">WARNING<span class=\"token punctuation\">:</span> No source <span class=\"token builtin\">file</span> found<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>py<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>TimeElapsed<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token constant\">WARNING</span><span class=\"token operator\">:</span> No source file found<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>ts<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>TimeElapsed<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token constant\">WARNING</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">No</span> source file found<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">..</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>rs<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span><span class=\"token class-name\">TimeElapsed</span><span class=\"token punctuation\">.</span>lf</code></pre></div>\n<p>$end(TimeElapsed)$</p>\n<p>See the\n<span class=\"lf-c\"><a href=\"/docs/handbook/c-reactors#timed-behavior\">C reactors documentation</a></span>\n<span class=\"lf-cpp\"><a href=\"/docs/handbook/cpp-reactors#timed-behavior\">C++ reactors documentation</a></span>\n<span class=\"lf-py\"><a href=\"/docs/handbook/python-reactors#timed-behavior\">Python reactors documentation</a></span>\n<span class=\"lf-ts\"><a href=\"/docs/handbook/ts-reactors#timed-behavior\">TypeScript reactors documentation</a></span>\n<span class=\"lf-rs\"><a href=\"/docs/handbook/rust-reactors#timed-behavior\">Rust reactors documentation</a></span>\nfor the full set of functions provided for accessing time values.</p>\n<p>Executing this program will produce something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Elapsed logical time is 0.\nElapsed logical time is 1000000000.\nElapsed logical time is 2000000000.\n...</code></pre></div>\n<h2 id=\"comparing-logical-and-physical-times\" style=\"position:relative;\"><a href=\"#comparing-logical-and-physical-times\" aria-label=\"comparing logical and physical times permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comparing Logical and Physical Times</h2>\n<p>The following program compares logical and physical times:</p>\n<p>$start(TimeLag)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> TimeLag <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token class-name\">interval_t</span> t <span class=\"token operator\">=</span> <span class=\"token function\">get_elapsed_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">interval_t</span> T <span class=\"token operator\">=</span> <span class=\"token function\">get_elapsed_physical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"Elapsed logical time: %lld, physical time: %lld, lag: %lld\\n\"</span><span class=\"token punctuation\">,</span>\n            t<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">,</span> T<span class=\"token operator\">-</span>t\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">WARNING<span class=\"token operator\">:</span> No source file found<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>cpp<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>TimeLag<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\">WARNING<span class=\"token punctuation\">:</span> No source <span class=\"token builtin\">file</span> found<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>py<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>TimeLag<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token constant\">WARNING</span><span class=\"token operator\">:</span> No source file found<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>ts<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>TimeLag<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token constant\">WARNING</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">No</span> source file found<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">..</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>rs<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span><span class=\"token class-name\">TimeLag</span><span class=\"token punctuation\">.</span>lf</code></pre></div>\n<p>$end(TimeLag)$</p>\n<p>Execution will show something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Elapsed logical time: 0, physical time: 855000, lag: 855000\nElapsed logical time: 1000000000, physical time: 1004714000, lag: 4714000\nElapsed logical time: 2000000000, physical time: 2004663000, lag: 4663000\nElapsed logical time: 3000000000, physical time: 3000210000, lag: 210000\n...</code></pre></div>\n<p>In this case, the lag varies from a few hundred microseconds to a small number of milliseconds. The amount of lag will depend on the execution platform.</p>\n<h2 id=\"simultaneity-and-instantaneity\" style=\"position:relative;\"><a href=\"#simultaneity-and-instantaneity\" aria-label=\"simultaneity and instantaneity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simultaneity and Instantaneity</h2>\n<p>If two timers have the same <em>offset</em> and <em>period</em>, then their events are logically simultaneous. No observer will be able to see that one timer has triggered and the other has not.</p>\n<p>A reaction is always invoked at a well-defined logical time, and logical time does not advance during its execution. Any output produced by the reaction will be <strong>logically simultaneous</strong> with the input. In other words, reactions are <strong>logically instantaneous</strong> (for an exception, see <a href=\"/docs/handbook/logical-execution-time\">Logical Execution Time</a>). Physical time, however, does elapse during execution of a reaction.</p>\n<h2 id=\"timeout\" style=\"position:relative;\"><a href=\"#timeout\" aria-label=\"timeout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Timeout</h2>\n<p>By default, a Lingua Franca program will terminate when there are no more events to process. If there is a timer with a non-zero period, then there will always be more events to process, so the default execution will be unbounded. To specify a finite execution horizon, you can either specify a <a href=\"/docs/handbook/target-specification#timeout\"><code class=\"language-text\">timeout</code> target property</a> or a [<code class=\"language-text\">--timeout command-line option](ocs/handbook/target-specification#command-line-arguments). For example, the following </code>timeout` property will cause the above timer with a period of one second to terminate after 11 events:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token lf_keywords\">sec</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token lf_keywords\">sec</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token lf_keywords\">sec</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token lf_keywords\">target</span> TypeScript <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token lf_keywords\">sec</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token lf_keywords\">target</span> <span class=\"token class-name\">Rust</span> <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span> <span class=\"token lf_keywords\">sec</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"startup-and-shutdown\" style=\"position:relative;\"><a href=\"#startup-and-shutdown\" aria-label=\"startup and shutdown permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Startup and Shutdown</h2>\n<p>To cause a reaction to be invoked at the start of execution, a special <strong>startup</strong> trigger is provided:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\"><span class=\"token lf_keywords\">reactor</span> Foo <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> perform initialization <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <strong>startup</strong> trigger is equivalent to a timer with no <em>offset</em> or <em>period</em>.</p>\n<p>To cause a reaction to be invoked at the end of execution, a special <strong>shutdown</strong> trigger is provided. Consider the following reactor, commonly used to build regression tests:</p>\n<p>$start(TestCount)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">TestCount</span><span class=\"token punctuation\">(</span>start<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> num_inputs<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> inputs_received<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Received %d.\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>value <span class=\"token operator\">!=</span> self<span class=\"token operator\">-></span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ERROR: Expected %d.\\n\"</span><span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        self<span class=\"token operator\">-></span>count <span class=\"token operator\">+=</span> self<span class=\"token operator\">-></span>stride<span class=\"token punctuation\">;</span>\n        self<span class=\"token operator\">-></span>inputs_received<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">shutdown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shutdown invoked.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token operator\">-></span>inputs_received <span class=\"token operator\">!=</span> self<span class=\"token operator\">-></span>num_inputs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ERROR: Expected to receive %d inputs, but got %d.\\n\"</span><span class=\"token punctuation\">,</span>\n                self<span class=\"token operator\">-></span>num_inputs<span class=\"token punctuation\">,</span>\n                self<span class=\"token operator\">-></span>inputs_received\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">WARNING<span class=\"token operator\">:</span> No source file found<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>cpp<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>TestCount<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\">WARNING<span class=\"token punctuation\">:</span> No source <span class=\"token builtin\">file</span> found<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>py<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>TestCount<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token constant\">WARNING</span><span class=\"token operator\">:</span> No source file found<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>ts<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>TestCount<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token constant\">WARNING</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">No</span> source file found<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">..</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>rs<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span><span class=\"token class-name\">TestCount</span><span class=\"token punctuation\">.</span>lf</code></pre></div>\n<p>$end(TestCount)$</p>\n<p>This reactor tests its inputs against expected values, which are expected to start with the value given by the <code class=\"language-text\">start</code> parameter and increase by <code class=\"language-text\">stride</code> with each successive input. It expects to receive a total of <code class=\"language-text\">num_inputs</code> input events. It checks the total number of inputs received in its $shutdown$ reaction.</p>\n<p>The <strong>shutdown</strong> trigger typically occurs at <a href=\"/docs/handbook/actions#superdense-time\">microstep</a> 0, but may occur at a larger microstep. See <a href=\"/docs/handbook/actions#superdense-time\">Superdense Time</a> and <a href=\"/docs/handbook/termination\">Termination</a>.</p>","headings":[{"value":"Timers","depth":2},{"value":"Elapsed Time","depth":2},{"value":"Comparing Logical and Physical Times","depth":2},{"value":"Simultaneity and Instantaneity","depth":2},{"value":"Timeout","depth":2},{"value":"Startup and Shutdown","depth":2}],"frontmatter":{"permalink":"/docs/handbook/time-and-timers","title":"Time and Timers","oneline":"Time and timers in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Parameters and State Variables","oneline":"Parameters and state variables in Lingua Franca.","permalink":"/docs/handbook/parameters-and-state-variables"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Composing Reactors","oneline":"Composing reactors in Lingua Franca.","permalink":"/docs/handbook/composing-reactors"}}}},"pageContext":{"id":"1-time-and-timers","slug":"/docs/handbook/time-and-timers","repoPath":"/packages/documentation/copy/en/topics/Time and Timers.md","previousID":"5d1d8c4f-898f-522e-9605-ba9daa57d1f6","nextID":"08fb8f5c-dc63-5d8d-9f97-3b7f11efbe4d","lang":"en","modifiedTime":"2022-03-30T14:09:54.043Z"}},
    "staticQueryHashes": []}