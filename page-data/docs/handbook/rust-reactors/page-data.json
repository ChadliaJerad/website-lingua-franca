{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/rust-reactors",
    "result": {"data":{"markdownRemark":{"id":"07978927-9e1e-56b4-9029-7fe0502c0fc7","excerpt":"⚠ Important: The Rust target is still quite preliminary. This is early WIP documentation to let you try it out if you’re curious In the Rust reactor target for…","html":"<blockquote>\n<p>⚠ <strong>Important:</strong> The Rust target is still quite preliminary. This is early WIP documentation to let you try it out if you’re curious</p>\n</blockquote>\n<p>In the Rust reactor target for Lingua Franca, reactions are written in Rust and the code generator generates a standalone Rust program that can be compiled and run on platforms supported by rustc. The program depends on a runtime library distributed as the crate <a href=\"https://github.com/lf-lang/reactor-rust\">reactor_rt</a>, and depends on the Rust standard library.</p>\n<p>Documentation for the runtime API is available here: <a href=\"https://lf-lang.org/reactor-rust/\">https://lf-lang.org/reactor-rust/</a></p>\n<!-- Note that C++ is not a safe language. There are many ways that a programmer can circumvent the semantics of Lingua Franca and introduce nondeterminism and illegal memory accesses. For example, it is easy for a programmer to mistakenly send a message that is a pointer to data on the stack. The destination reactors will very likely read invalid data. It is also easy to create memory leaks, where memory is allocated and never freed. Note, however, that the C++ reactor library is designed to prevent common errors and to encourage a safe modern C++ style. Here, we introduce the specifics of writing Reactor programs in C++ and present some guidelines for a style that will be safe. -->\n<h2 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p>In order to compile the generated Rust source code, you need a recent version of <a href=\"https://doc.rust-lang.org/cargo/\">Cargo</a>, the Rust package manager. See <a href=\"https://doc.rust-lang.org/cargo/getting-started/installation.html\">How to Install Rust and Cargo</a> if you don’t have them on your system.</p>\n<p>You can use a development version of the runtime library by setting the LFC option <code class=\"language-text\">--external-runtime-path</code> to the root directory of the runtime library crate sources. If this variable is mentioned, LFC will ask Cargo to fetch the runtime library from there.</p>\n<h2 id=\"a-minimal-example\" style=\"position:relative;\"><a href=\"#a-minimal-example\" aria-label=\"a minimal example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A Minimal Example</h2>\n<p>A “hello world” reactor for the Rust target looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">target <span class=\"token class-name\">Rust</span><span class=\"token punctuation\">;</span>\n\nmain reactor <span class=\"token class-name\">Minimal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">reaction</span><span class=\"token punctuation\">(</span>startup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, reactors!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">startup</code> action is a special <a href=\"https://github.com/lf-lang/lingua-franca/wiki/Language-Specification#Action-Declaration\">action</a> that triggers at the start of the program execution causing the <a href=\"https://github.com/lf-lang/lingua-franca/wiki/Language-Specification#Reaction-Declaration\">reaction</a> to execute. This program can be found in a file called <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Rust/src/Minimal.lf\">Minimal.lf</a> in the <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/test/Rust\">test directory</a>, where you can also find quite a few more interesting examples. If you compile this using the <a href=\"downloading-and-building#Command-Line-Tools\"><code class=\"language-text\">lfc</code> command-line compiler</a> or the <a href=\"downloading-and-building#Download-the-Integrated-Development-Environment\">Eclipse-based IDE</a>, then generated source files will be put into a subdirectory called <code class=\"language-text\">src-gen/Minimal</code>. In addition, an executable binary will be compiled using Cargo. The resulting executable will be called <code class=\"language-text\">minimal</code> (note and be put in a subdirectory called <code class=\"language-text\">bin</code>. If you are in the Rust test directory, you can execute it in a shell as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> bin/minimal</code></pre></div>\n<p>The resulting output should look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[INFO]  Starting the execution\nHello World!\n[INFO]  Terminating the execution</code></pre></div>\n<h2 id=\"the-rust-target-specification\" style=\"position:relative;\"><a href=\"#the-rust-target-specification\" aria-label=\"the rust target specification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Rust Target Specification</h2>\n<p>To have Lingua Franca generate Rust code, start your .lf file with the following target specification:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">target <span class=\"token class-name\">Rust</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>LF-Rust generates a Cargo project per compiled main reactor. This specification assumes in some places that the user is somewhat familiar with how Cargo works.\nIf you’re not, here’s a primer:</p>\n<ul>\n<li>a Rust project (and its library artifact) are called a <em>crate</em>.</li>\n<li>Cargo is the Rust package manager and build tool. LF/Rust uses Cargo to build the generated project.</li>\n<li>Rust has extensive support for conditional compilation. Cargo <em>features</em> are commonly used to enable or disable the compilation of parts of a crate. A feature may also pull in additional dependencies. Cargo features only influence the compilation process; if you don’t mention the correct feature flags at compilation time, those features cannot be made available at runtime. The Rust reactor runtime crate uses Cargo features to conditionally enable some features, eg, command-line argument parsing.</li>\n</ul>\n<h3 id=\"target-properties-summary\" style=\"position:relative;\"><a href=\"#target-properties-summary\" aria-label=\"target properties summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Target properties summary</h3>\n<p>Target properties may be mentioned like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">target <span class=\"token class-name\">Rust</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// enables single-file project layout</span>\n    single<span class=\"token operator\">-</span>file<span class=\"token operator\">-</span>project<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// timeout for the execution. The program will shutdown at most after the specified duration.</span>\n    timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> sec<span class=\"token punctuation\">,</span>\n\n    cargo<span class=\"token operator\">-</span>features<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cli\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The full list of supported target properties:</p>\n<ul>\n<li><code class=\"language-text\">build-type: [Debug | Release | RelWithDebInfo | RelMinSize]</code> - profile to use for the cargo build command. This property uses the CMake names: <code class=\"language-text\">Debug</code> corresponds to Cargo’s <code class=\"language-text\">dev</code> profile, and <code class=\"language-text\">Release</code> is self-explanatory. The other two profiles are mapped to custom Cargo profiles, and are special cases of <code class=\"language-text\">Release</code>.</li>\n<li><code class=\"language-text\">cargo-features: &lt;string array></code> - list of features of the generated crate. Supported are:\n<ul>\n<li>“cli” - enable <a href=\"#cli\">command-line argument parsing</a></li>\n</ul>\n</li>\n<li><code class=\"language-text\">cargo-dependencies: { ... }</code> - list of dependencies to include in the generated Cargo.toml file. The value of this parameter is a map of package name to <em>dependency-spec</em> (see <a href=\"#specifying-dependencies\">Specifying dependencies</a>).</li>\n<li><code class=\"language-text\">export-dependency-graph: [true|false]</code> - dump the dependency graph to a file in DOT format before starting the execution. If a <a href=\"#cli\">CLI</a> is generated, the target property is ignored, and the user should instead use the <code class=\"language-text\">--export-graph</code> flag of the generated program.</li>\n<li><code class=\"language-text\">rust-include: &lt;string array></code> - includes a set of Rust modules in the generated project. See <a href=\"#linking-support-files\">Linking support files</a>.</li>\n<li><code class=\"language-text\">single-file-project: [true|false]</code> - enables <a href=\"#single-file-layout\">single-file project layout</a></li>\n<li><code class=\"language-text\">timeout: &lt;time value></code> - timeout for the execution. The program will shutdown the specified amount of (logical) time after the start of its execution.</li>\n<li><code class=\"language-text\">keepalive: [true|false]</code> - supported for compatiblity with standard parameters but is ignored in the Rust target. The runtime framework is smart enough to stay put when some threads may push asynchronous events, and only shutdown when we know the event queue will remain empty forever.</li>\n</ul>\n<p>Note that the <code class=\"language-text\">logging</code> target property is ignored by the Rust target, as the levels used are incompatible with the Rust standard levels. See <a href=\"#logging-levels\">Logging levels</a>.</p>\n<h3 id=\"the-executable\" style=\"position:relative;\"><a href=\"#the-executable\" aria-label=\"the executable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The executable</h3>\n<p>The executable name is the name of the main reactor <em>transformed to snake_case</em>: <code class=\"language-text\">main reactor RustProgram</code> will generate <code class=\"language-text\">rust_program</code>.</p>\n<h4 id=\"cli\" style=\"position:relative;\"><a href=\"#cli\" aria-label=\"cli permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CLI</h4>\n<p>The generated executable may feature a command-line interface (CLI), if it uses the <code class=\"language-text\">cargo-features: [\"cli\"]</code> target property. When that feature is enabled:</p>\n<ul>\n<li>some target properties become settable at runtime:\n<ul>\n<li><code class=\"language-text\">--timeout &lt;time value></code>: override the default timeout mentioned as a target property. The syntax for times is just like the LF one (eg <code class=\"language-text\">1msec</code>, <code class=\"language-text\">\"2 seconds\"</code>).</li>\n<li><code class=\"language-text\">--threads &lt;number></code>: override the default thread count mentioned as a target property. This option is <strong>ignored</strong> unless the runtime crate has been built with the feature <code class=\"language-text\">parallel-runtime</code>.</li>\n<li><code class=\"language-text\">--export-graph</code>: export the dependency graph (corresponds to <code class=\"language-text\">export-dependency-graph</code> target property). This is a flag, ie, absent means false, present means true. This means the value of the target property is ignored and not used as default.</li>\n<li><code class=\"language-text\">--log-level</code>: corresponds to the <code class=\"language-text\">logging</code> target property, but note that the levels have different meanings, and the target property is ignored. See <a href=\"#logging-levels\">Logging levels</a>.</li>\n</ul>\n</li>\n<li>parameters of the main reactor are translated to CLI parameters.\n<ul>\n<li>Each LF parameter named <code class=\"language-text\">param</code> corresponds to a CLI parameter named <code class=\"language-text\">--main-param</code>. Underscores in the LF parameter name are replaced by hyphens.</li>\n<li>The type of each parameters must implement the trait <a href=\"https://doc.rust-lang.org/std/str/trait.FromStr.html\"><code class=\"language-text\">FromStr</code></a>.</li>\n</ul>\n</li>\n</ul>\n<p>When the <code class=\"language-text\">cli</code> feature is disabled, the parameters of the main reactor will each assume their default value.</p>\n<h4 id=\"logging-levels\" style=\"position:relative;\"><a href=\"#logging-levels\" aria-label=\"logging levels permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logging levels</h4>\n<p>The executable reacts to the environment variable <code class=\"language-text\">RUST_LOG</code>, which sets the logging level of the application. Possible values are\n<code class=\"language-text\">off</code>, <code class=\"language-text\">error</code>, <code class=\"language-text\">warn</code>, <code class=\"language-text\">info</code>, <code class=\"language-text\">debug</code>, <code class=\"language-text\">trace</code></p>\n<p>Error and warning logs are on by default. Enabling a level enables all greater levels (ie, <code class=\"language-text\">RUST_LOG=info</code> also enables <code class=\"language-text\">warn</code> and <code class=\"language-text\">error</code>, but not <code class=\"language-text\">trace</code> or <code class=\"language-text\">debug</code>).</p>\n<p>Logging can also be turned on with the <code class=\"language-text\">--log-level</code> CLI option, if the application features a <a href=\"#cli\">CLI</a>.</p>\n<p>Note that the <code class=\"language-text\">logging</code> target property is ignored, as its levels do not match the Rust standard levels we use (those of the <a href=\"https://docs.rs/log/\"><code class=\"language-text\">log</code> crate</a>).</p>\n<p>Note that when building with a release profile (i.e., target property <code class=\"language-text\">build-type</code> is not <code class=\"language-text\">Debug</code>), all log statements with level <code class=\"language-text\">debug</code> and <code class=\"language-text\">trace</code> are removed from the executable, and cannot be turned on at runtime. A warning is produced by the executable if you try to use these levels explicitly.</p>\n<h3 id=\"file-layout\" style=\"position:relative;\"><a href=\"#file-layout\" aria-label=\"file layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>File layout</h3>\n<p>The Rust code generator generates a Cargo project with a classical layout:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── Cargo.lock\n├── Cargo.toml\n├── src\n│   ├── main.rs\n│   └── reactors\n│       ├── mod.rs\n|       ├── ...\n|\n└── target\n    ├── ...</code></pre></div>\n<p>The module structure is as follows:</p>\n<ul>\n<li>the crate has a module <code class=\"language-text\">reactors</code></li>\n<li>each LF reactor has its own submodule of <code class=\"language-text\">reactors</code>. For instance, <code class=\"language-text\">Minimal.lf</code> will generate <code class=\"language-text\">minimal.rs</code>. The name is transformed to snake_case.</li>\n</ul>\n<p>This means that to refer to the contents of another reactor module, e.g. that of <code class=\"language-text\">Other.lf</code>, you have to write <code class=\"language-text\">super::other::Foo</code>. This is relevant to access <code class=\"language-text\">preamble</code> items.</p>\n<h4 id=\"single-file-layout\" style=\"position:relative;\"><a href=\"#single-file-layout\" aria-label=\"single file layout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single-file layout</h4>\n<p>The Rust target supports an alternative file layout, where all reactors are generated into the <code class=\"language-text\">main.rs</code> file, making the project fit in a single file (excluding <code class=\"language-text\">Cargo.toml</code>). <em>The module structure is unchanged:</em> the file still contains a <code class=\"language-text\">mod reactors { ... }</code> within which each reactor has its <code class=\"language-text\">mod foo { ... }</code>. You can thus change the layout without having to update any LF code.</p>\n<p>Set the target property <code class=\"language-text\">single-file-project: true</code> to use this layout.</p>\n<p>Note: this alternative layout is provided for the purposes of making self-contained benchmark files. Generating actual runnable benchmarks from an LF file may be explored in the future.</p>\n<h3 id=\"specifying-dependencies\" style=\"position:relative;\"><a href=\"#specifying-dependencies\" aria-label=\"specifying dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Specifying dependencies</h3>\n<p>The Rust code generator leverages Cargo to allow LF programs to profit from Rust’s large package ecosystem. The code generator may also link support files written in pure Rust into the generated crate. Target properties are used to achieve all this.</p>\n<h4 id=\"adding-cargo-dependencies\" style=\"position:relative;\"><a href=\"#adding-cargo-dependencies\" aria-label=\"adding cargo dependencies permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding cargo dependencies</h4>\n<p>The <code class=\"language-text\">cargo-dependencies</code> target property may be used to specify dependencies on crates coming from <code class=\"language-text\">crates.io</code>. Here’s an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">target Rust <span class=\"token punctuation\">{</span>\n   cargo<span class=\"token operator\">-</span>dependencies<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token symbol\">termcolor</span><span class=\"token operator\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"0.8\"</span></span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The value of the <em>cargo-dependencies</em> property is a map of crate identifiers to a <em>dependency-spec</em>. An informal example follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cargo<span class=\"token operator\">-</span>dependencies<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// Name-of-the-crate: \"version\"</span>\n   <span class=\"token literal-property property\">rand</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.8\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token comment\">// Equivalent to using an explicit map:</span>\n   <span class=\"token literal-property property\">rand</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.8\"</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token comment\">// The map allows specifying more details</span>\n   <span class=\"token literal-property property\">rand</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// A path to a local unpublished crate.</span>\n     <span class=\"token comment\">// Note 'path' is mutually exclusive with 'git'.</span>\n     <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/home/me/Git/local-rand-clone\"</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">rand</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\">// A URL to a git repo</span>\n     <span class=\"token literal-property property\">git</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/me/rand\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token comment\">// Specify an explicit Git revision number</span>\n     <span class=\"token literal-property property\">rev</span><span class=\"token operator\">:</span> <span class=\"token string\">\"abcdef1234\"</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token literal-property property\">rand</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.8\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token comment\">// you can specify cargo features</span>\n     <span class=\"token literal-property property\">features</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"some-cargo-feature\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When a <em>dependency-spec</em> is specified as an object, its key-value pairs correspond directly to those of a <a href=\"https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories\">Cargo dependency specification</a>. For instance for the following dependency spec:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">   <span class=\"token literal-property property\">rand</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.8\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token comment\">// you can specify cargo features</span>\n     <span class=\"token literal-property property\">features</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"some-cargo-feature\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">}</span></code></pre></div>\n<p>we add the following to the generated <code class=\"language-text\">Cargo.toml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies.rand</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.8\"</span>\n<span class=\"token key property\">features</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"some-cargo-feature\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Not all keys are necessarily supported though, eg the <code class=\"language-text\">registry</code> key is not supported (yet).</p>\n<h4 id=\"configuring-the-runtime\" style=\"position:relative;\"><a href=\"#configuring-the-runtime\" aria-label=\"configuring the runtime permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configuring the runtime</h4>\n<p>The runtime crate can be configured just like other crates, using the <code class=\"language-text\">cargo-dependencies</code> target property, eg:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">cargo<span class=\"token operator\">-</span>dependencies<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token literal-property property\">reactor_rt</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token literal-property property\">features</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"parallel-runtime\"</span><span class=\"token punctuation\">]</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The dependency is always included, with defaults picked by LFC. The location information (<em>path</em>/<em>git</em>/<em>version</em> key) is optional.\nSee <a href=\"https://lf-lang.org/reactor-rust/reactor_rt/index.html\">reactor_rt</a> for the supported features.</p>\n<h4 id=\"linking-support-files\" style=\"position:relative;\"><a href=\"#linking-support-files\" aria-label=\"linking support files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linking support files</h4>\n<p>You can link-in additional rust modules using the <code class=\"language-text\">rust-include</code> target property:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">target Rust <span class=\"token punctuation\">{</span>\n  rust<span class=\"token operator\">-</span><span class=\"token keyword\">include</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">\"foo.rs\"</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The property is a list of paths (relative to the directory containing the <code class=\"language-text\">.lf</code> file). Each path should either point to a Rust file (<code class=\"language-text\">.rs</code>), or a directory that contains a <code class=\"language-text\">mod.rs</code> file. Each of those will be copied to the <code class=\"language-text\">src</code> directory of the generated Cargo project, and linked in to the <code class=\"language-text\">main.rs</code> file.</p>\n<p>To refer to the included module, you can use e.g. <code class=\"language-text\">crate::foo</code> if your module is named <code class=\"language-text\">foo</code>.</p>\n<h3 id=\"generation-scheme\" style=\"position:relative;\"><a href=\"#generation-scheme\" aria-label=\"generation scheme permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generation scheme</h3>\n<p>Each reactor generates its own <code class=\"language-text\">struct</code> which contains state variables. For instance,</p>\n<table>\n<thead>\n<tr>\n<th>LF</th>\n<th>Generated Rust</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">reactor <span class=\"token class-name\">SomeReactor</span> <span class=\"token punctuation\">{</span>\n  state field<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</td>\n<td>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">SomeReactor</span> <span class=\"token punctuation\">{</span>\n  field<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</td>\n</tr>\n</tbody>\n</table>\n<p>In the following we refer to that struct as the <em>state struct</em>.</p>\n<h4 id=\"reactions\" style=\"position:relative;\"><a href=\"#reactions\" aria-label=\"reactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reactions</h4>\n<p>Reactions are each generated in a separate method of the reactor struct. Reaction names are unspecified and may be mangled to prevent explicit calling. The parameters of that method are</p>\n<ul>\n<li><code class=\"language-text\">&amp;mut self</code>: the state struct described above,</li>\n<li><code class=\"language-text\">ctx: &amp;mut ReactionCtx</code>: the context object for the reaction execution,</li>\n<li>For each dependency, a parameter is generated.\n<ul>\n<li>If the dependency is a component of this reactor, the name of the parameter is just the name of the component</li>\n<li>If the dependency is a port of a child reactor, the name of the parameter is <code class=\"language-text\">&lt;name of the child instance>__&lt;name of the port></code>, e.g. <code class=\"language-text\">child__out</code> for <code class=\"language-text\">child.out</code>.</li>\n<li>The type of the parameter depends on the kind of dependency and of component:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Use/trigger dependency</th>\n<th>Effect dependency</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\n</li>\n</ul>\n<p>Port of type <code class=\"language-text\">T</code></p>\n</td>\n<td>\n<p><code class=\"language-text\">&amp;ReadablePort&lt;T></code></p>\n</td>\n<td>\n<p><code class=\"language-text\">WritablePort&lt;T></code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Logical action of type <code class=\"language-text\">T</code></p>\n</td>\n<td>\n<p><code class=\"language-text\">&amp;LogicalAction&lt;T></code></p>\n</td>\n<td>\n<p><code class=\"language-text\">&amp;mut LogicalAction&lt;T></code></p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Physical action of type <code class=\"language-text\">T</code></p>\n</td>\n<td>\n<p><code class=\"language-text\">&amp;PhysicalActionRef&lt;T></code></p>\n</td>\n<td>\n<p><code class=\"language-text\">&amp;mut PhysicalActionRef&lt;T></code></p>\n</td>\n</tr>\n<tr>\n<td>Timer</td>\n<td>\n<p><code class=\"language-text\">&amp;Timer</code></p>\n</td>\n<td>\n<p>n/a</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>Port bank of type <code class=\"language-text\">T</code></p>\n</td>\n<td>\n<p><code class=\"language-text\">&amp;ReadablePortBank&lt;T></code></p>\n</td>\n<td>\n<p><code class=\"language-text\">WritablePortBank&lt;T></code></p>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Undeclared dependencies, and dependencies on timers and <code class=\"language-text\">startup</code> or <code class=\"language-text\">shutdown</code>, do not generate a parameter.</p>\n<p>The <a href=\"https://lf-lang.org/reactor-rust/reactor_rt/struct.ReactionCtx.html\"><code class=\"language-text\">ReactionCtx</code></a> object is a mediator to manipulate all those dependency objects. It has methods to set ports, schedule actions, retrieve the current logical time, etc.</p>\n<p>For instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">reactor <span class=\"token class-name\">Source</span> <span class=\"token punctuation\">{</span>\n    output out<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">reaction</span><span class=\"token punctuation\">(</span>startup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token number\">76600</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, the context object <code class=\"language-text\">ctx</code> is used to set a port to a value. The port is in scope as <code class=\"language-text\">out</code>.</p>\n<blockquote>\n<p>⚠ TODO when the runtime crate is public link to the docs, they should be the most exhaustive documentation.</p>\n</blockquote>\n<h4 id=\"actions\" style=\"position:relative;\"><a href=\"#actions\" aria-label=\"actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions</h4>\n<p>Within a reaction, actions may be scheduled using the <a href=\"https://lf-lang.org/reactor-rust/reactor_rt/struct.ReactionCtx.html#method.schedule\"><code class=\"language-text\">schedule</code></a> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// schedule without additional delay</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Asap</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// schedule with an additional delay</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">,</span> <span class=\"token macro property\">after!</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// that's shorthand for</span>\nctx<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">,</span> <span class=\"token class-name\">After</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">.</span><span class=\"token function\">of_millis</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Actions may carry values if they mention a data type, for instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">logical action act<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Within a reaction, you can schedule that action with a value like so</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">ctx<span class=\"token punctuation\">.</span><span class=\"token function\">schedule_with_v</span><span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Asap</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>you can get the value from another reaction like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get_action</span><span class=\"token punctuation\">(</span>act<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// a value is present at this tag</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// value was not specified</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If an action does not mention a data type, the type is defaulted to <code class=\"language-text\">()</code>.</p>\n<h4 id=\"time\" style=\"position:relative;\"><a href=\"#time\" aria-label=\"time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time</h4>\n<blockquote>\n<p>⚠ todo</p>\n</blockquote>","headings":[{"value":"Setup","depth":2},{"value":"A Minimal Example","depth":2},{"value":"The Rust Target Specification","depth":2},{"value":"Target properties summary","depth":3},{"value":"The executable","depth":3},{"value":"CLI","depth":4},{"value":"Logging levels","depth":4},{"value":"File layout","depth":3},{"value":"Single-file layout","depth":4},{"value":"Specifying dependencies","depth":3},{"value":"Adding cargo dependencies","depth":4},{"value":"Configuring the runtime","depth":4},{"value":"Linking support files","depth":4},{"value":"Generation scheme","depth":3},{"value":"Reactions","depth":4},{"value":"Actions","depth":4},{"value":"Time","depth":4}],"frontmatter":{"permalink":"/docs/handbook/rust-reactors","title":"Rust Reactors","oneline":"Writing Reactors in Rust  (preliminary)","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"TypeScript Reactors","oneline":"Writing Reactors in TypeScript.","permalink":"/docs/handbook/typescript-reactors"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Contributing","oneline":"Contribute to Lingua Franca.","permalink":"/docs/handbook/contributing"}}}},"pageContext":{"id":"2-rust-reactors","slug":"/docs/handbook/rust-reactors","repoPath":"/packages/documentation/copy/en/target/Rust Reactors.md","previousID":"da333a70-5030-5a61-93ec-96fed964d320","lang":"en","modifiedTime":"2022-04-20T01:01:48.108Z"}},
    "staticQueryHashes": []}