{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/cpp-reactors",
    "result": {"data":{"markdownRemark":{"id":"b1ba96a9-ed0a-5297-93c8-a062be186ced","excerpt":"WARNING: This page documents only the Cpp target. Choose the C target language in the left sidebar to see the Cpp code examples. In the C++ reactor target for…","html":"<p><span class=\"lf-c lf-py lf-ts lf-rs warning\"><strong>WARNING: This page documents only the Cpp target.</strong> Choose the C target language in the left sidebar to see the Cpp code examples.</span></p>\n<p>In the C++ reactor target for Lingua Franca, reactions are written in C++ and the code generator generates a standalone C++ program that can be compiled and run on all major platforms. Our continous integration ensures compatibility with Windows, MacOS and Linux.\nThe C++ target solely depends on a working C++ build system including a recent C++ compiler (supporting C++17) and <a href=\"https://cmake.org/\">CMake</a> (>= 3.5). It relies on the <a href=\"https://github.com/tud-ccc/reactor-cpp\">reactor-cpp</a> runtime, which is automatically fetched and compiled in the background by the Lingua Franca compiler.</p>\n<p>Note that C++ is not a safe language. There are many ways that a programmer can circumvent the semantics of Lingua Franca and introduce nondeterminism and illegal memory accesses. For example, it is easy for a programmer to mistakenly send a message that is a pointer to data on the stack. The destination reactors will very likely read invalid data. It is also easy to create memory leaks, where memory is allocated and never freed. Note, however, that the C++ reactor library is designed to prevent common errors and to encourage a safe modern C++ style. Here, we introduce the specifics of writing Reactor programs in C++ and present some guidelines for a style that will be safe.</p>\n<h2 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p>The following tools are required in order to compile the generated C++ source code:</p>\n<ul>\n<li>A recent C++ compiler supporting C++17</li>\n<li>A recent version of cmake (At least 3.5)</li>\n</ul>\n<h2 id=\"the-c-target-specification\" style=\"position:relative;\"><a href=\"#the-c-target-specification\" aria-label=\"the c target specification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The C++ Target Specification</h2>\n<p>To have Lingua Franca generate C++ code, start your <code class=\"language-text\">.lf</code> file with the following target specification:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that for all LF statements, the final semicolon is optional, but if you are writing your code in C++, you may want to include the final semicolon for uniformity. See <a href=\"/docs/handbook/target-specification\">detailed documentation of the target options</a>.</p>\n<h2 id=\"preamble\" style=\"position:relative;\"><a href=\"#preamble\" aria-label=\"preamble permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preamble</h2>\n<p>Reactions may contain arbitrary C++ code, but often it is convenient for that code to invoke external libraries or to share type and/or method definitions. For either purpose, a reactor may include a <strong>preamble</strong> section. For example, the following reactor uses <code class=\"language-text\">atoi</code> from the common <code class=\"language-text\">stdlib</code> C library to convert a string to an integer:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Preamble <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdlib></span></span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">timer</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"42\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Converted string &lt;&lt; s &lt;&lt; \"</span> to nt \" <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will print:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Converted string 42 to int 42.</code></pre></div>\n<p>By putting the <code class=\"language-text\">#include</code> in the <strong>preamble</strong>, the library becomes available in all reactions of this reactor. Note the <strong>private</strong> qualifier before the <strong>preamble</strong> keyword. This ensures that the preamble is only visible to the reactions defined in this reactor and not to any other reactors. In contrast, the <strong>public</strong> qualifier ensures that the preamble is also visible to other reactors in files that import the reactor defining the public preamble.</p>\n<p>See for instance the reactor in <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/Preamble.lf\">Preamble.lf</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> Preamble <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyStruct</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> foo<span class=\"token punctuation\">;</span>\n            std<span class=\"token double-colon punctuation\">::</span>string bar<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">add_42</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token operator\">:</span>MyStruct<span class=\"token punctuation\">;</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token function\">add_42</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"baz\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> value <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Received \"</span> <span class=\"token operator\">&lt;&lt;</span> value<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" and '\"</span> <span class=\"token operator\">&lt;&lt;</span> value<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"'\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>It defines both a public and a private preamble. The public preamble defines the type <code class=\"language-text\">MyStruct</code>. This type definition will be visible to all elements of the <code class=\"language-text\">Preamble</code> reactor as well as to all reactors defined in files that import <code class=\"language-text\">Preamble</code>. The private preamble defines the function <code class=\"language-text\">add_42(int i)</code>. This function will only be usable to reactions within the <code class=\"language-text\">Preamble</code> reactor.</p>\n<p>You can think of public and private preambles as the equivalent of header files and source files in C++. In fact, the public preamble will be translated to a header file and the private preamble to a source file. As a rule of thumb, all types that are used in port or action definitions as well as in state variables or parameters should be defined in a public preamble. Also declarations of functions to be shared across reactors should be placed in the public preamble. Everything else, like function definitions or types that are used only within reactions should be placed in a private preamble.</p>\n<p>Note that preambles can also be specified on the file level. These file level preambles are visible to all reactors within the file. An example of this can be found in <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/target/PreambleFile.lf\">PreambleFile.lf</a>.</p>\n<p>Admittedly, the precise interactions of preambles and imports can become confusing. The preamble mechanism will likely be refined in future revisions.</p>\n<p>Note that functions defined in the preamble cannot access members such as state variables of the reactor unless they are explicitly passed as arguments. If access to the inner state of a reactor is required, <a href=\"https://github.com/lf-lang/lingua-franca/wiki/Writing-Reactors-in-Cpp#using-methods\">methods</a> present a viable and easy to use alternative.</p>\n<h2 id=\"inputs-and-outputs\" style=\"position:relative;\"><a href=\"#inputs-and-outputs\" aria-label=\"inputs and outputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inputs and Outputs</h2>\n<p>In the body of a reaction in the C++ target, the value of an input is obtained using the syntax <code class=\"language-text\">*name.get()</code>, where <code class=\"language-text\">name</code> is the name of the input port. Note that <code class=\"language-text\">get()</code> always returns a pointer to the actual value. Thus the pointer needs to be dereferenced with <code class=\"language-text\">*</code> to obtain the value. (See <a href=\"#sending-and-receiving-large-data-types\">Sending and Receiving Large Data Types</a> for an explanation of the exact mechanisms behind this pointer access).\nTo determine whether an input is present, <code class=\"language-text\">name.is_present()</code> can be used. Since <code class=\"language-text\">get()</code> returns a <code class=\"language-text\">nullptr</code> if no value is present, <code class=\"language-text\">name.get() != nullptr</code> can be used alternatively for checking presence.</p>\n<p>For example, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/Determinism.lf\">Determinism.lf</a> test case in the <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/test/Cpp\">test directory</a> includes the following reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> Destination <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">input</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Received \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The reaction refers to the inputs <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> and tests for the presence of values using <code class=\"language-text\">x.is_present()</code> and <code class=\"language-text\">y.is_present()</code>. If a reaction is triggered by just one input, then normally it is not necessary to test for its presence; it will always be present. But in the above example, there are two triggers, so the reaction has no assurance that both will be present.</p>\n<p>Inputs declared in the <strong>uses</strong> part of the reaction do not trigger the reaction. Consider this modification of the above reaction:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Received \"</span> <span class=\"token operator\">&lt;&lt;</span> sum <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is no longer necessary to test for the presence of <code class=\"language-text\">x</code> because that is the only trigger. The input <code class=\"language-text\">y</code>, however, may or may not be present at the logical time that this reaction is triggered. Hence, the code must test for its presence.</p>\n<p>The <strong>effects</strong> portion of the reaction specification can include outputs and actions. Actions will be described below. Outputs are set using a <code class=\"language-text\">set()</code> method on an output port. For example, we can further modify the above example as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">    <span class=\"token lf_keywords\">output</span> z<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> y <span class=\"token operator\">-></span> z <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        z<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>If an output gets set more than once at any logical time, downstream reactors will see only the <em>final</em> value that is set. Since the order in which reactions of a reactor are invoked at a logical time is deterministic, and whether inputs are present depends only on their timestamps, the final value set for an output will also be deterministic.</p>\n<p>An output may even be set in different reactions of the same reactor at the same logical time. In this case, one reaction may wish to test whether the previously invoked reaction has set the output. It can check <code class=\"language-text\">name.is_present()</code> to determine whether the output has been set. For example, the following reactor (see <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/TestForPreviousOutput.lf\">TestForPreviousOutput.lf</a>) will always produce the output 42:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> Source <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Set a seed for random number generation based on the current time.</span>\n        std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">srand</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Randomly produce an output or not.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> previous_output <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> previous_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first reaction may or may not set the output to 21. The second reaction doubles the output if it has been previously produced and otherwise produces 42.</p>\n<h2 id=\"state-variables\" style=\"position:relative;\"><a href=\"#state-variables\" aria-label=\"state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Variables</h2>\n<p>A reactor may declare state variables, which become properties of each instance of the reactor. For example, the following reactor (see <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/lib/Count.lf\">Count.lf</a> and <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/CountTest.lf\">CountTest.lf</a>) will produce the output sequence 1, 2, 3, … :</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> Count <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> i<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> c<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> c <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The declaration on the second line gives the variable the name <code class=\"language-text\">count</code>, declares its type to be <code class=\"language-text\">int</code>, and initializes its value to 0. The type and initial value can be enclosed in the C++-code delimiters <code class=\"language-text\">{= ... =}</code> if they are not simple identifiers, but in this case, that is not necessary.</p>\n<p>In the body of the reaction, the state variable is automatically in scope and can be referenced directly by its name. Since all reactions, state variables and also parameters of a reactor are members of the same class, reactions can also reference state variables (or parameters) using the this pointer: <code class=\"language-text\">this->name</code>.</p>\n<p>A state variable may be a time value, declared as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\"><span class=\"token lf_keywords\">state</span> time_value<span class=\"token punctuation\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The type of the generated <code class=\"language-text\">time_value</code> variable will be <code class=\"language-text\">reactor::Duration</code>, which is an alias for <a href=\"https://en.cppreference.com/w/cpp/chrono/duration\"><code class=\"language-text\">std::chrono::nanoseconds</code></a>.</p>\n<p>For the C++ target, Lingua Franca provides two alternative styles for initializing state variables. We can write <code class=\"language-text\">state foo:int(42)</code> or <code class=\"language-text\">state foo:int{42}</code>. This allows to distinguish between the different initialization styles in C++. <code class=\"language-text\">foo:int(42)</code> will be translated to <code class=\"language-text\">int foo(42)</code> and <code class=\"language-text\"> foo:int{42}</code> will be translated to <code class=\"language-text\">int foo{42}</code> in the generated code. Generally speaking, the <code class=\"language-text\">{...}</code> style should be preffered in C++, but it is not always applicable. Hence we allow the LF programmer to choose the style. Due to the peculiarities of C++, this is particularly important for more complex data types. For instance, <code class=\"language-text\">state foo:std::vector&lt;int>(4,2)</code> would be initialized to the list <code class=\"language-text\">[2,2,2,2]</code> whereas <code class=\"language-text\">state foo:std::vector&lt;int>{4,2}</code> would be initialized to the list <code class=\"language-text\">[4,2]</code>.</p>\n<p>State variables can have array values. For example, the [MovingAverage] (<a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/MovingAverage.lf\">https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/MovingAverage.lf</a>) reactor computes the <strong>moving average</strong> of the last four inputs each time it receives an input:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> MovingAverageImpl <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> delay_line<span class=\"token operator\">:</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> index<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token comment\">// Calculate the output.</span>\n        <span class=\"token keyword\">double</span> sum <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+=</span> delay_line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">/</span><span class=\"token number\">4.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Insert the input in the delay line.</span>\n        delay_line<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Update the index for the next input.</span>\n        index<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The second line declares that the type of the state variable is an fixed-size array of 3 <code class=\"language-text\">double</code>s with the initial value of the being filled with zeros (note the curly braces). If the size is given in the type specification, then the code generator will declare the type of the state variable using <a href=\"https://en.cppreference.com/w/cpp/container/array\"><code class=\"language-text\">std::array</code></a>. In the example above, the type of <code class=\"language-text\">delay_line</code> is <code class=\"language-text\">std::array&lt;3, double></code>. If the size specifier is omitted (e.g. <code class=\"language-text\">state x:double[]</code>). The code generator will produce a variable-sized array using <a href=\"https://en.cppreference.com/w/cpp/container/vector\"><code class=\"language-text\">std::vector</code></a>.</p>\n<p>State variables with more complex types such as classes or structs can be similiarly initialized. See <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/StructAsState.lf\">StructAsState.lf</a>.</p>\n<h2 id=\"parameters\" style=\"position:relative;\"><a href=\"#parameters\" aria-label=\"parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameters</h2>\n<p>Reactor parameters work similar to state variables in C++. However, they are always declared as <code class=\"language-text\">const</code> and initialized during reactor instantiation. Thus, the value of a parameter may not be changed. For example, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/Stride.lf\">Stride</a> reactor modifies the above <code class=\"language-text\">Count</code> reactor so that its stride is a parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>stride<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        y<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        count <span class=\"token operator\">+=</span> stride<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">reactor</span> Display <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n    \tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Received \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Stride <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-></span> d<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first line defines the <code class=\"language-text\">stride</code> parameter, gives its type, and gives its initial value. As with state variables, the type and initial value can be enclosed in <code class=\"language-text\">{= ... =}</code> if necessary.</p>\n<p>When the reactor is instantiated, the default parameter value can be overridden. This is done in the above example near the bottom with the line:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If there is more than one parameter, use a comma separated list of assignments.</p>\n<p>Also parameters can have fixed- or variable-sized array values. The <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/ArrayAsParameter.lf\">ArrayAsParameter</a> example outputs the elements of an array as a sequence of individual messages:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Source</span><span class=\"token punctuation\">(</span>sequence<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> next<span class=\"token operator\">:</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out<span class=\"token punctuation\">,</span> next <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>sequence<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">&lt;</span> sequence<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            next<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <strong>logical action</strong> named <code class=\"language-text\">next</code> and the <code class=\"language-text\">schedule</code> method are explained below in <a href=\"#Scheduling-Delayed-Reactions\">Scheduling Delayed Reactions</a>; here they are used simply to repeat the reaction until all elements of the array have been sent. Note that similiar aas for state variables, curly braces <code class=\"language-text\">{...}</code> can optionally be used for initialization.</p>\n<p>Note that also the main reactor can be parameterized:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Hello</span><span class=\"token punctuation\">(</span>msg<span class=\"token operator\">:</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello \"</span> <span class=\"token operator\">&lt;&lt;</span> msg <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"!\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This program will print “Hello World!” by default. However, since <code class=\"language-text\">msg</code> is a main reactor parameter, the C++ code generator will extend the CLI argument parser and allow to overwrite <code class=\"language-text\">msg</code> when invoking the program. For instance,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">bin/Hello --msg Earth</code></pre></div>\n<p>will result in “Hello Earth!” being printed.</p>\n<h2 id=\"sending-and-receiving-large-data-types\" style=\"position:relative;\"><a href=\"#sending-and-receiving-large-data-types\" aria-label=\"sending and receiving large data types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sending and Receiving Large Data Types</h2>\n<p>You can define your own datatypes in C++ or use types defined in a library and send and receive those. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/StructAsType.lf\">StructAsType</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> StructAsType <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Hello</span> <span class=\"token punctuation\">{</span>\n            std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span>Hello<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        Hello hello<span class=\"token punctuation\">{</span>\"Earth<span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <strong>preamble</strong> code defines a struct datatype. In the reaction to <strong>startup</strong>, the reactor creates an instance of this struct on the stack (as a local variable named <code class=\"language-text\">hello</code>) and then copies that instance to the output using the <code class=\"language-text\">set()</code> method. For this reason, the C++ reactor runtime provides more sophisticated ways to allocate objects and send them via ports.</p>\n<p>The C++ library defines two types of smart pointers that the runtime uses internally to implement the exchange of data between ports. These are <code class=\"language-text\">reactor::MutableValuePtr&lt;T></code> and <code class=\"language-text\">reactor::ImmutableValuePtr&lt;T></code>. <code class=\"language-text\">reactor::MutableValuePtr&lt;T></code> is a wrapper around <a href=\"https://en.cppreference.com/w/cpp/memory/unique_ptr\"><code class=\"language-text\">std::unique_ptr</code></a> and provides read and write access to the value hold, while ensuring that the value has a unique owner. In contrast, <code class=\"language-text\">reactor::ImmutableValuePtr&lt;T></code> is a wrapper around <a href=\"https://en.cppreference.com/w/cpp/memory/shared_ptr\"><code class=\"language-text\">std::shared_pointer</code></a> and provides read only (const) access to the value it holds. This allows data to be shared between reactions of various reactors, while guarantee data consistency. Similar to <code class=\"language-text\">std::make_unique</code> and <code class=\"language-text\">std::make_shared</code>, the reactor library provides convenient function for creating mutable and immutable values pointers: <code class=\"language-text\">reactor::make_mutable_value&lt;T>(...)</code> and <code class=\"language-text\">reactor::make_immutable_value&lt;T>(...)</code>.</p>\n<p>In fact this code from the example above:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">Hello hello<span class=\"token punctuation\">{</span>\"Earth<span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nout<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>implicitly invokes <code class=\"language-text\">reactor::make_immutable_value&lt;Hello>(hello)</code> and could be rewritten as</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">Hello hello<span class=\"token punctuation\">{</span>\"Earth<span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nout<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">reactor</span><span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_immutable_value</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Hello<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will invoke the copy constructor of <code class=\"language-text\">Hello</code>, copying its content from the <code class=\"language-text\">hello</code> instance to the newly created <code class=\"language-text\">reactor::ImmutableValuePtr&lt;Hello></code>.</p>\n<p>Since copying large objects is inefficient, the move semantics of C++ can be used to move the ownership of object instead of copying it. This can be done in the following two ways. First, by directly creating a mutable or immutable value pointer, where a mutable pointer allows modification of the object after it has been created:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token keyword\">auto</span> hello <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">reactor</span><span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">make_mutable_value</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Hello<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhello<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Mars\"</span><span class=\"token punctuation\">;</span>\nout<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>An example of this can be found in <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/StructPrint.lf\">StructPrint.lf</a>. Not that after the call to <code class=\"language-text\">std::move</code>, hello is <code class=\"language-text\">nullptr</code> and the reaction cannot modify the object anymore. Alternatively, if no modification is requires, the object can be instantiated directly in the call to <code class=\"language-text\">set()</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"Earth\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>An example of this can be found in <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/StructAsTypeDirect.lf\">StructAsTypeDirect</a>.</p>\n<p>Getting a value from an input port of type <code class=\"language-text\">T</code> via <code class=\"language-text\">get()</code> always returns an <code class=\"language-text\">reactor::ImmutableValuePtr&lt;T></code>. This ensures that the value cannot be modified by multiple reactors receiving the same value, as this could lead to an inconsistent state and nondeterminism in a multi-threaded execution. An immutable value pointer can be converted to a mutable pointer by calling <code class=\"language-text\">get_mutable_copy</code>. For instance, the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/ArrayScale.lf\">ArrayScale</a> reactor modifies elements of the array it receives before sending it to the next reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Scale</span><span class=\"token punctuation\">(</span>scale<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">auto</span> array <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get_mutable_copy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Currently <code class=\"language-text\">get_mutable_copy()</code> always copies the contained value to safely create a mutable pointer. However, a future implementation could optimize this by checking if any other reaction is accessing the same value. If not, the value can simply be moved from the immutable pointer to a mutable one.</p>\n<h2 id=\"time\" style=\"position:relative;\"><a href=\"#time\" aria-label=\"time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time</h2>\n<p>Timers are specified exactly as in the <a href=\"/docs/handbook/time-and-timers\">Time and Timers</a>. When working with time in the C++ code body of a reaction, however, you will need to know a bit about its internal representation.</p>\n<p>The reactor-cpp library uses <a href=\"https://en.cppreference.com/w/cpp/chrono\"><code class=\"language-text\">std::chrono</code></a> for representing time. Specifically, the library defines two types for representing durations and timepoints: <code class=\"language-text\">reactor::Duration</code> and <code class=\"language-text\">reactor::TimePoint</code>. <code class=\"language-text\">reactor::Duration</code> is an alias for <a href=\"https://en.cppreference.com/w/cpp/chrono/duration\"><code class=\"language-text\">std::chrono::nanosecods</code></a>. <code class=\"language-text\">reactor::TimePoint</code> is alias for <a href=\"https://en.cppreference.com/w/cpp/chrono/time_point\"><code class=\"language-text\">std::chrono::time_point&lt;std::chrono::system_clock, std::chrono::nanoseconds></code></a>. As you can see from these definitions, the smallest time step that can be represented is one nanosecond. Note that <code class=\"language-text\">reactor::TimePoint</code> describes a specific point in time and is associated with a specific clock, whereas <code class=\"language-text\">reactor::Duration</code> defines a time interval between two time points.</p>\n<p>Lingua Franca uses a superdense model of logical time. A reaction is invoked at a logical <strong>tag</strong>. In the C++ library, a tag is represented by the class <code class=\"language-text\">reactor::Tag</code>. In essence, this class is a tuple of a <code class=\"language-text\">reactor::TimePoint</code> representing a specific point in logical time and a microstep value (of type <code class=\"language-text\">reactor::mstep_t</code>, which is an alias for <code class=\"language-text\">unsigned long</code>). <code class=\"language-text\">reactor::Tag</code> provides two methods for getting the time point or the microstep:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token keyword\">const</span> TimePoint<span class=\"token operator\">&amp;</span> <span class=\"token function\">time_point</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mstep_t<span class=\"token operator\">&amp;</span> <span class=\"token function\">micro_step</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The C++ code in reaction bodies has access to library functions that allow to retrieve the current logical or physical time:</p>\n<ul>\n<li><code class=\"language-text\">TimePoint get_physical_time()</code>: Get the current physical time.</li>\n<li><code class=\"language-text\">TimePoint get_logcial_time()</code>: Get the current logical time.</li>\n<li><code class=\"language-text\">Duration get_elapsed_physical_time()</code>: Get the physical time elapsed since program start.</li>\n<li><code class=\"language-text\">Duration get_elapsed_logical_time()</code>: Get the logical time elapsed since program start.</li>\n</ul>\n<p>A reaction can examine the current logical time (which is constant during the execution of the reaction). For example, consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/GetTime.lf\">GetTime</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">auto</span> <span class=\"token lf_keywords\">logical</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Logical time is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token lf_keywords\">logical</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that the <code class=\"language-text\">&lt;&lt;</code> operator is overloaded for both <code class=\"language-text\">reactor::TimePoint</code> and <code class=\"language-text\">reactor::Duration</code> and will print the time information accordingly.</p>\n<p>When executing the above program, you will see something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[INFO]  Starting the execution\nLogical time is 2021-05-19 14:06:09.496828396\nLogical time is 2021-05-19 14:06:10.496828396\nLogical time is 2021-05-19 14:06:11.496828396\nLogical time is 2021-05-19 14:06:11.496828396\n...</code></pre></div>\n<p>If you look closely, you will see that each printed logical time is one second larger than the previous one.</p>\n<p>You can also obtain the <em>elapsed</em> logical time since the start of execution:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">auto</span> elapsed <span class=\"token operator\">=</span> <span class=\"token function\">get_elapsed_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Elapsed logical time is \"</span> <span class=\"token operator\">&lt;&lt;</span> elapsed <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"In seconds: \"</span> <span class=\"token operator\">&lt;&lt;</span>  std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">duration_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>seconds<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>elapsed<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using <code class=\"language-text\">std::chrono</code> it is also possible to convert between time units and directly print the number of elapsed seconds as seen above. The resulting output of this program will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[INFO]  Starting the execution\nElapsed logical time is 0 nsecs\nIn seconds: 0 secs\nElapsed logical time is 1000000000 nsecs\nIn seconds: 1 secs\nElapsed logical time is 2000000000 nsecs\nIn seconds: 2 secs\n...</code></pre></div>\n<p>You can also get physical and elapsed physical time:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">auto</span> <span class=\"token lf_keywords\">logical</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">auto</span> <span class=\"token lf_keywords\">physical</span> <span class=\"token operator\">=</span> <span class=\"token function\">get_physical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> elapsed <span class=\"token operator\">=</span> <span class=\"token function\">get_elapsed_physical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Physical time is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token lf_keywords\">physical</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Elapsed physical time is \"</span> <span class=\"token operator\">&lt;&lt;</span> elapsed <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Time lag is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token lf_keywords\">physical</span> <span class=\"token operator\">-</span> <span class=\"token lf_keywords\">logical</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n   <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that the physical times are increasing by <em>roughly</em> one second in each reaction. The output also shows the lag between physical and logical time. If you set the <code class=\"language-text\">fast</code> target parameter to <code class=\"language-text\">true</code>, then physical time will elapse much faster than logical time. The above program will produce something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[INFO]  Starting the execution\nPhysical time is 2021-05-19 14:25:18.070523014\nElapsed physical time is 2601601 nsecs\nTime lag is 2598229 nsecs\nPhysical time is 2021-05-19 14:25:19.068038275\nElapsed physical time is 1000113888 nsecs\nTime lag is 113490 nsecs\n[INFO]  Physical time is Terminating the execution\n2021-05-19 14:25:20.068153026\nElapsed physical time is 2000228689 nsecs\nTime lag is 228241 nsecs</code></pre></div>\n<p>For specifying time durations in code <a href=\"https://en.cppreference.com/w/cpp/header/chrono\">chrono</a> provides convenient literal operators in <code class=\"language-text\">std::chrono_literals</code>. This namespace is automatically included for all reaction bodies. Thus, we can simply write:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">42u</span>s <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span>ms <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span>s <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></code></pre></div>\n<p>which prints:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">42 usecs\n1 msecs\n3 secs</code></pre></div>\n<h2 id=\"scheduling-delayed-reactions\" style=\"position:relative;\"><a href=\"#scheduling-delayed-reactions\" aria-label=\"scheduling delayed reactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduling Delayed Reactions</h2>\n<p>The C++ provides a simple interface for scheduling actions via a <code class=\"language-text\">schedule()</code> method. Actions are described in the <a href=\"language-specification#action-declaration\">Language Specification</a> document. Consider the <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/Cpp/src/Schedule.lf\">Schedule</a> reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> Schedule <span class=\"token punctuation\">{</span>\n\t<span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n         <span class=\"token keyword\">auto</span> elapsed_time <span class=\"token operator\">=</span> <span class=\"token function\">get_elapsed_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Action triggered at logical time \"</span> <span class=\"token operator\">&lt;&lt;</span> elapsed_time<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" after start\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span> elapsed_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When this reactor receives an input <code class=\"language-text\">x</code>, it calls <code class=\"language-text\">schedule()</code> on the action <code class=\"language-text\">a</code>, specifying a logical time offset of 200 milliseconds. The action <code class=\"language-text\">a</code> will be triggered at a logical time 200 milliseconds after the arrival of input <code class=\"language-text\">x</code>. At that logical time, the second reaction will trigger and will use the <code class=\"language-text\">get_elapsed_logical_time()</code> function to determine how much logical time has elapsed since the start of execution.</p>\n<p>Notice that after the logical time offset of 200 msec, there may be another input <code class=\"language-text\">x</code> simultaneous with the action <code class=\"language-text\">a</code>. Because the reaction to <code class=\"language-text\">a</code> is given first, it will execute first. This becomes important when such a reactor is put into a feedback loop (see below).</p>\n<p><strong>TODO: Explain physical actions as well!</strong></p>\n<h2 id=\"zero-delay-actions\" style=\"position:relative;\"><a href=\"#zero-delay-actions\" aria-label=\"zero delay actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Zero-Delay Actions</h2>\n<p>If the specified delay in a <code class=\"language-text\">schedule()</code> is omitted or is zero, then the action <code class=\"language-text\">a</code> will be triggered one <strong>microstep</strong> later in <strong>superdense time</strong> (see <a href=\"language-specification#superdense-time\">Superdense Time</a>). Hence, if the input <code class=\"language-text\">x</code> arrives at metric logical time <em>t</em>, and you call <code class=\"language-text\">schedule()</code> in one of the following ways:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">reactor</span><span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">Duration</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">zero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>then when the reaction to <code class=\"language-text\">a</code> is triggered, the input <code class=\"language-text\">x</code> will be absent (it was present at the <em>previous</em> microstep). The reaction to <code class=\"language-text\">x</code> and the reaction to <code class=\"language-text\">a</code> occur at the same metric time <em>t</em>, but separated by one microstep, so these two reactions are <em>not</em> logically simultaneous.</p>\n<p>As discussed above the he metric time is visible to the rogrammer and can be obtained in a reaction using either <code class=\"language-text\">get_elapsed_logical_time()</code> or <code class=\"language-text\">get_logical_time()</code>.</p>\n<p>As described in the <a href=\"language-specification#action-declaration\">Language Specification</a> document, action declarations can have a <em>min_delay</em> parameter. This modifies the timestamp further. Also, the action declaration may be <strong>physical</strong> rather than <strong>logical</strong>, in which case, the assigned timestamp will depend on the physical clock of the executing platform.</p>\n<h2 id=\"actions-with-values\" style=\"position:relative;\"><a href=\"#actions-with-values\" aria-label=\"actions with values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions With Values</h2>\n<p>If an action is declared with a data type, then it can carry a <strong>value</strong>, a data value that becomes available to any reaction triggered by the action. This is particularly useful for physical actions that are externally triggered because it enables the action to convey information to the reactor. This could be, for example, the body of an incoming network message or a numerical reading from a sensor.</p>\n<p>Recall from the <a href=\"language-specification#Contained-Reactors\">Contained Reactors</a> section in the Language Specification document that the <strong>after</strong> keyword on a connection between ports introduces a logical delay. This is actually implemented using a logical action. We illustrate how this is done using the <a href=\"https://github.com/tud-ccc/reactor-cpp/blob/master/include/reactor-cpp/logical_time.hh\">DelayInt</a> example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span>delay<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> in<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> d<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> d <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        d<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Using this reactor as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">    d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    source<span class=\"token punctuation\">.</span>out <span class=\"token operator\">-></span> d<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">;</span>\n    d<span class=\"token punctuation\">.</span>in <span class=\"token operator\">-></span> sink<span class=\"token punctuation\">.</span>out</code></pre></div>\n<p>is equivalent to</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">    source<span class=\"token punctuation\">.</span>out <span class=\"token operator\">-></span> sink<span class=\"token punctuation\">.</span>in <span class=\"token lf_keywords\">after</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span></code></pre></div>\n<p>(except that our <code class=\"language-text\">Delay</code> reactor will only work with data type <code class=\"language-text\">int</code>).</p>\n<p>The action <code class=\"language-text\">d</code> is specified with a type <code class=\"language-text\">int</code>. The reaction to the input <code class=\"language-text\">in</code> declares as its effect the action <code class=\"language-text\">d</code>. This declaration makes it possible for the reaction to schedule a future triggering of <code class=\"language-text\">d</code>. In the C++ target, actions use the same mechanism for passing data via value pointers as do ports. In the example above, the <code class=\"language-text\">reactor::ImmutablValuePtr&lt;int></code> derived by the call to <code class=\"language-text\">in.get()</code> is passed directly to <code class=\"language-text\">schedule()</code>. Similarly, the value can later be retrieved from the action with <code class=\"language-text\">d.get()</code> and passed to the output port.</p>\n<p>The first reaction declares that it is triggered by <code class=\"language-text\">d</code> and has effect <code class=\"language-text\">out</code>. Because this reaction is first, the <code class=\"language-text\">out</code> at any logical time can be produced before the input <code class=\"language-text\">in</code> is even known to be present. Hence, this reactor can be used in a feedback loop, where <code class=\"language-text\">out</code> triggers a downstream reactor to send a message back to <code class=\"language-text\">in</code> of this same reactor. If the reactions were given in the opposite order, there would be causality loop and compilation would fail.</p>\n<p>If you are not sure whether an action carries a value, you can test for it using <code class=\"language-text\">is_present()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is possible to both be triggered by and schedule an action the same reaction. For example, this reactor will produce a counting sequence after it is triggered the first time:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">CountSelf</span><span class=\"token punctuation\">(</span>delay<span class=\"token operator\">:</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> out<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a<span class=\"token punctuation\">,</span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule_int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a<span class=\"token punctuation\">,</span> out <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule_int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Of course, to produce a counting sequence, it would be more efficient to use a state variable.</p>\n<h2 id=\"stopping-execution\" style=\"position:relative;\"><a href=\"#stopping-execution\" aria-label=\"stopping execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stopping Execution</h2>\n<p>A reaction may request that the execution stops after all events with the current timestamp have been processed by calling <code class=\"language-text\">environment()->sync_shutdown()</code>. There is also a method <code class=\"language-text\">environment()->async_shutdown()</code>\nwhich may be invoked from outside an reaction, like an external thread.</p>\n<h2 id=\"log-and-debug-information\" style=\"position:relative;\"><a href=\"#log-and-debug-information\" aria-label=\"log and debug information permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Log and Debug Information</h2>\n<p>The reactor-cpp library provides logging utilities in <a href=\"https://github.com/tud-ccc/reactor-cpp/blob/master/include/reactor-cpp/logging.hh\">logging.hh</a> for producing messages to be made visible when the generated program is run. Of course <code class=\"language-text\">std::cout</code> or <code class=\"language-text\">printf</code> can be used for the same purpose, but the logging mechanism provided by reactor-cpp is thread-safe ensuring that messages produced in parallel reactions are not interleaved with each other and provides common way for turning messages of a certain severity on and off.</p>\n<p>In particular, reactor-cpp provides the following logging interfaces:</p>\n<ul>\n<li><code class=\"language-text\">reactor::Debug()</code>: for verbose debug messages</li>\n<li><code class=\"language-text\">reactor::Info()</code>: for info messages of general interest, info is the default severity level</li>\n<li><code class=\"language-text\">reactor::Warning()</code>: for warning messages</li>\n<li><code class=\"language-text\">reactor::Error()</code>: for errors</li>\n</ul>\n<p>These utilities can be used analogues to <code class=\"language-text\">std::cout</code>. For instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">reactor</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello World! It is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">get_physical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that unlike <code class=\"language-text\">std::cout</code> the new line delimiter is automatically added to the end of the message.</p>\n<p>Which type of messages are actually produced by the compiled program can be controlled with the <code class=\"language-text\">log-level</code> target property.</p>","headings":[{"value":"Setup","depth":2},{"value":"The C++ Target Specification","depth":2},{"value":"Preamble","depth":2},{"value":"Inputs and Outputs","depth":2},{"value":"State Variables","depth":2},{"value":"Parameters","depth":2},{"value":"Sending and Receiving Large Data Types","depth":2},{"value":"Time","depth":2},{"value":"Scheduling Delayed Reactions","depth":2},{"value":"Zero-Delay Actions","depth":2},{"value":"Actions With Values","depth":2},{"value":"Stopping Execution","depth":2},{"value":"Log and Debug Information","depth":2}],"frontmatter":{"permalink":"/docs/handbook/cpp-reactors","title":"Cpp Reactors","oneline":"Writing Reactors in C++.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"C Reactors","oneline":"Writing reactors using the C target in Lingua Franca.","permalink":"/docs/handbook/c-reactors"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Python Reactors","oneline":"Writing Reactors in Python.","permalink":"/docs/handbook/python-reactors"}}}},"pageContext":{"id":"2-cpp-reactors","slug":"/docs/handbook/cpp-reactors","repoPath":"/packages/documentation/copy/en/target/Cpp Reactors.md","previousID":"47e3f690-18c7-5523-8874-14fae7a4fec6","nextID":"a52829fd-2e9a-5cfc-8d87-0074c847be0b","lang":"en","modifiedTime":"2022-04-20T00:02:06.812Z"}},
    "staticQueryHashes": []}