{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/language-specification",
    "result": {"data":{"markdownRemark":{"id":"50e54b7e-56cb-5d26-b02d-69a821254f47","excerpt":"A Lingua Franca file, which has a .lf extension, contains the following: One target specification. Zero or more import statements. One or more reactor blocks…","html":"<p>A Lingua Franca file, which has a .lf extension, contains the following:</p>\n<ul>\n<li>One <a href=\"target-specification\"><strong>target</strong> specification</a>.</li>\n<li>Zero or more <a href=\"#import-statement\"><strong>import</strong> statements</a>.</li>\n<li>One or more <a href=\"#reactor-block\"><strong>reactor</strong></a> blocks, which contain <a href=\"#reaction-declaration\"><strong>reaction</strong> declarations</a>.</li>\n</ul>\n<p>If one of the reactors in the file is designated <code class=\"language-text\">main</code> or <code class=\"language-text\">federated</code>, then the file defines an executable application. Otherwise, it defines one or more library reactors that can be imported into other LF files. For example, an LF file might be structured like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target C;\nmain reactor C {\n    a = new A();\n    b = new B();\n    a.y -> b.x;\n}\nreactor A {\n    output y;\n    ...\n}\nreactor B {\n    input x;\n    ...\n}</code></pre></div>\n<p>The name of the main reactor (<code class=\"language-text\">C</code> above) is optional. If given, it must match the filename (<code class=\"language-text\">C.lf</code> in the above example).</p>\n<p>This example specifies and instantiates two reactors, one of which sends messages to the other. A minimal but complete Lingua Franca file with one reactor is this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target C; \nmain reactor HelloWorld {\n    reaction(startup) {=\n        printf(\"Hello World.\\n\");\n    =}\n}</code></pre></div>\n<p>See the <a href=\"Writing-Reactors-in-C#a-minimal-example\">C target documentation</a> for details about this example.</p>\n<h2 id=\"target-specification\" style=\"position:relative;\"><a href=\"#target-specification\" aria-label=\"target specification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Target Specification</h2>\n<p>Every Lingua Franca program begins with a [[target specification]] that specifies the language in which reactions are written. This is also the language of the program(s) generated by the Lingua Franca compiler.</p>\n<h2 id=\"import-statement\" style=\"position:relative;\"><a href=\"#import-statement\" aria-label=\"import statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Import Statement</h2>\n<p>An import statement has the form:</p>\n<blockquote>\n<p><strong>import</strong> { <em>reactor1</em>, <em>reactor2</em> <strong>as</strong> <em>alias2</em>, […] } <strong>from</strong> ”<em>path</em>“;</p>\n</blockquote>\n<p>where <em>path</em> specifies another Lingua Franca file relative to the location of the current file.</p>\n<h2 id=\"reactor-block\" style=\"position:relative;\"><a href=\"#reactor-block\" aria-label=\"reactor block permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reactor Block</h2>\n<p>A <strong>reactor</strong> is a software component that reacts to input events, timer events, and internal events. It has private state variables that are not visible to any other reactor. Its reactions can consist of altering its own state, sending messages to other reactors, or affecting the environment through some kind of actuation or side effect.</p>\n<p>The general structure of a reactor block is as follows:</p>\n<blockquote>\n<p><strong>reactor</strong> <em>name</em> (<em><a href=\"#parameter-declaration\">parameters</a></em>) {<br/>\n  <em><a href=\"#state-declaration\">state declarations</a></em><br/>\n  <em><a href=\"#method-declaration\">method declarations</a></em><br/>\n  <em><a href=\"#input-declaration\">input declarations</a></em><br/>\n  <em><a href=\"#output-declaration\">output declarations</a></em><br/>\n  <em><a href=\"#timer-declaration\">timer declarations</a></em><br/>\n  <em><a href=\"#action-declaration\">action declarations</a></em><br/>\n  <em><a href=\"#reaction-declaration\">reaction declarations</a></em><br/>\n  <em><a href=\"#contained-reactors\">contained reactors</a></em><br/>\n   … <br/>\n}</p>\n</blockquote>\n<p>Parameter, inputs, outputs, timers, actions, and contained reactors all have names, and the names are required to be distinct from one another.</p>\n<p>If the <strong>reactor</strong> keyword is preceded by <strong>main</strong>,  then this reactor will be instantiated and run by the generated code. If an imported LF file contains a main reactor, that reactor is ignored. Only reactors that not designated <code class=\"language-text\">main</code> are imported. This makes it easy to create a library of reusable reactors that each come with a test case or demonstration in the form of a main reactor.</p>\n<h3 id=\"parameter-declaration\" style=\"position:relative;\"><a href=\"#parameter-declaration\" aria-label=\"parameter declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameter Declaration</h3>\n<p>A reactor class definition can define parameters as follows:</p>\n<blockquote>\n<p><strong>reactor</strong> <em>ClassName</em>(<em>paramName1</em>:<em>type</em>(<em>expr</em>), <em>paramName2</em>:<em>type</em>(<em>expr</em>)) {<br/>\n   … <br/>\n}</p>\n</blockquote>\n<p>Each parameter may have a <em>type annotation</em>, written <code class=\"language-text\">:type</code>, and must have a <em>default value</em>, written <code class=\"language-text\">(expr)</code>.</p>\n<p>The type annotation specifies a type in the target language, which is necessary for some target languages. For instance in C you might write</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Foo(size: int(100)) {\n    ...\n}</code></pre></div>\n<details>\n<summary>Introduction to basic LF types and expressions... click to expand</summary>\n<p>One useful type predefined by LF is the <code class=\"language-text\">time</code> type, which represents time durations. Values of this type may be written with <em>time expressions</em>, like <code class=\"language-text\">100 msec</code> or <code class=\"language-text\">1 second</code> (see <a href=\"#basic-expressions\">Basic expressions</a> for a reference).</p>\n<p>For instance, you can write the following in any target language:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Foo(period: time(100 msec)) {\n    ...\n}</code></pre></div>\n<p>Container types may also be written eg <code class=\"language-text\">int[]</code>, which is translated to a target-specific array or list type. The acceptable expressions for these types vary across targets (see <a href=\"#complex-expressions\">Complex expressions</a>), for instance in C, you can initialize an array parameter as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Foo(my_array:int[](1, 2, 3)) {\n   ...\n}</code></pre></div>\n<p>If the type or expression uses syntax that Lingua Franca does not support, you can use <code class=\"language-text\">{= ... =}</code> delimiters to enclose them and escape them. For instance to have a 2-dimensional array as a parameter in C:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Foo(param:{= int[][] =}({= { {1}, {2} } =})) {\n    ...\n}</code></pre></div>\n<p>Both <code class=\"language-text\">int[][]</code> and <code class=\"language-text\"> {% raw %}{{1}, {2}} {% endraw %}</code> are C fragments here, not LF.</p>\n</details>\n<p>Other forms for types and expressions are described in <a href=\"#appendix-lf-types\">LF types</a> and <a href=\"#appendix-lf-expressions\">LF expressions</a>.</p>\n<p>How parameters may be used in the body of a reaction depends on the target. For example, in the <a href=\"writing-reactors-in-c#using-parameters\">C target</a>, a <code class=\"language-text\">self</code> struct is provided that contains the parameter values. The following example illustrates this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target C;\nreactor Gain(scale:int(2)) {\n    input x:int;\n    output y:int;\n    reaction(x) -> y {=\n        SET(y, x->value * self->scale);\n    =}\n}</code></pre></div>\n<p>This reactor, given any input event <code class=\"language-text\">x</code> will produce an output <code class=\"language-text\">y</code> with value equal to the input scaled by the <code class=\"language-text\">scale</code> parameter. The default value of the <code class=\"language-text\">scale</code> parameter is 2, but this can be changed when the <code class=\"language-text\">Gain</code> reactor is <a href=\"#contained-reactors\">instantiated</a>. The <code class=\"language-text\">SET()</code> is the mechanism provided by the <a href=\"Writing-Reactors-in-C#reaction-body\">C target</a> for setting the value of outputs. The parameter <code class=\"language-text\">scale</code> and input <code class=\"language-text\">x</code> are just referenced in the C code as shown above.</p>\n<h3 id=\"state-declaration\" style=\"position:relative;\"><a href=\"#state-declaration\" aria-label=\"state declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Declaration</h3>\n<p>A state declaration has one of the forms:</p>\n<blockquote>\n<p><strong>state</strong> <em>name</em>:<em>type</em>(<em>initial_value</em>);<br>\n<strong>state</strong> <em>name</em>(<em>parameter</em>);</p>\n</blockquote>\n<p>In the first form, the <a href=\"#appendix-lf-types\">type annotation</a> is only required in some targets. The initial value may be any <a href=\"#appendix-lf-expressions\">expression</a>, including a special <a href=\"#initializer-pseudo-expressions\">initializer forms</a>.</p>\n<p>In the second form, the state variable inherits its type from the specified <em>parameter</em>, which also provides the initial value for the state variable.</p>\n<p>How state variables may be used in the body of a reaction depends on the target. For example, in the <a href=\"writing-reactors-in-c#using-state-variables\">C target</a>, a <code class=\"language-text\">self</code> struct is provided that contains the state values. The following example illustrates this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Count {\n\toutput c:int;\n\ttimer t(0, 1 sec);\n\tstate i:int(0);\n\treaction(t) -> c {=\n\t\t(self->i)++;\n\t\tSET(c, self->i);\n\t=}\n}</code></pre></div>\n<h3 id=\"method-declaration\" style=\"position:relative;\"><a href=\"#method-declaration\" aria-label=\"method declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Method Declaration</h3>\n<p>A method declaration has one of the forms:</p>\n<blockquote>\n<p><strong>method</strong> <em>name</em>();<br>\n<strong>method</strong> <em>name</em>():<em>type</em>;<br>\n<strong>method</strong> <em>name</em>(<em>arg1_name</em>:arg1_type, <em>arg2_name</em>:arg2_type, …);\n<strong>method</strong> <em>name</em>(<em>arg1_name</em>:arg1_type, <em>arg2_name</em>:arg2_type, …):<em>type</em>;</p>\n</blockquote>\n<p>The first form defines a method with no arguments and no return value. The second form defines a method with the return type <em>type</em> but no arguments. The third form defines a method with arguments given by their name and type, but without a return value. Finally, the fourth form is similar to the third, but adds a return type.</p>\n<p>The <strong>method</strong> keywork can optionally be prefixed with the <strong>const</strong> qualifier, which indicates that the method is “read-only”. This is relvant for some target languages such as C++.</p>\n<p>See the <a href=\"https://github.com/lf-lang/lingua-franca/wiki/Writing-Reactors-in-Cpp#using-methods\">C++ documentation</a> for a usage example.</p>\n<h3 id=\"input-declaration\" style=\"position:relative;\"><a href=\"#input-declaration\" aria-label=\"input declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Input Declaration</h3>\n<p>An input declaration has the form:</p>\n<blockquote>\n<p><strong>input</strong> <em>name</em>:<em>type</em>;</p>\n</blockquote>\n<p>The <code class=\"language-text\">Gain</code> reactor given above provides an example. The <em>type</em> is just like parameter types.</p>\n<p>An input may have the modifier <strong>mutable</strong>, as follows:</p>\n<blockquote>\n<p><strong>mutable input</strong> <em>name</em>:<em>type</em></p>\n</blockquote>\n<p>This is a directive to the code generator indicating that reactions that read this input will also modify the value of the input. Without this modifier, inputs are <strong>immutable</strong>; modifying them is disallowed.  The precise mechanism for making use of mutable inputs is target-language specific. See, for example, the <a href=\"writing-reactors-in-c#Sending-and-Receiving-Arrays-and-Structs\">C language target</a>.</p>\n<p>An input port may have more than one <strong>channel</strong>. See <a href=\"Multiports-and-Banks-of-Reactors#multiports\">multiports documentation</a>.</p>\n<h3 id=\"output-declaration\" style=\"position:relative;\"><a href=\"#output-declaration\" aria-label=\"output declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Output Declaration</h3>\n<p>An output declaration has the form:</p>\n<blockquote>\n<p><strong>output</strong> <em>name</em>:<em>type</em>;</p>\n</blockquote>\n<p>The <code class=\"language-text\">Gain</code> reactor given above provides an example. The <em>type</em> is just like parameter types.</p>\n<p>An output port may have more than one <strong>channel</strong>. See <a href=\"Multiports-and-Banks-of-Reactors#multiports\">multiports documentation</a>.</p>\n<h3 id=\"timer-declaration\" style=\"position:relative;\"><a href=\"#timer-declaration\" aria-label=\"timer declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Timer Declaration</h3>\n<p>A timer, like an input and an action, causes reactions to be invoked. Unlike an action, it is triggered automatically by the scheduler. This declaration is used when you want to invoke reactions once at specific times or periodically. A timer declaration has the form:</p>\n<blockquote>\n<p><strong>timer</strong> <em>name</em>(<em>offset</em>, <em>period</em>);</p>\n</blockquote>\n<p>For example,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">timer foo(10 msec, 100 msec);</code></pre></div>\n<p>This specifies a timer named <code class=\"language-text\">foo</code> that will first trigger 10 milliseconds after the start of execution and then repeatedly trigger at intervals of 100 ms.  The units are optional, and if they are not included, then the number will be interpreted in a target-dependent way.  The units supported are the same as in <a href=\"#parameter-declaration\">parameter declarations</a> described above.</p>\n<p>The times specified are logical times. Specifically, if two timers have the same <em>offset</em> and <em>period</em>, then they are logically simultaneous.  No observer will be able to see that one timer has triggered and the other has not. Even though these are logical times, the runtime system will make an effort to align those times to physical times. Such alignment can never be perfect, and its accuracy will depend on the execution platform.</p>\n<p>Both arguments are optional, with both having default value zero. An <em>offset</em> of zero or greater specifies the minimum time delay between the time at the start of execution and when the action is triggered. The <em>period</em> is zero or greater, where a value of zero specifies that the reactions should be triggered exactly once,\nwhereas a value greater than zero specifies that they should be triggered repeatedly with the period given.</p>\n<p>To cause a reaction to be invoked at the start of execution, a special <strong>startup</strong> trigger is provided:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Foo {\n    reaction(startup) {=\n        ... perform initialization ...\n    =}\n}</code></pre></div>\n<p>The <strong>startup</strong> trigger is equivalent to a timer with no <em>offset</em> or <em>period</em>.</p>\n<h3 id=\"action-declaration\" style=\"position:relative;\"><a href=\"#action-declaration\" aria-label=\"action declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action Declaration</h3>\n<p>An <strong>action</strong>, like an input, can cause reactions to be invoked. Whereas inputs are provided by other reactors, actions are scheduled by this reactor itself, either in response to some observed external event or as a delayed response to some input event. The action can be scheduled by a reactor by invoking a <a href=\"#scheduling-future-reactions\"><strong>schedule</strong> function</a> in a reaction or in an asynchronous callback function.</p>\n<p>An action declaration is either physical or logical:</p>\n<blockquote>\n<p><strong>physical action</strong> <em>name</em>(<em>min_delay</em>, <em>min_spacing</em>, <em>policy</em>):<em>type</em>;<br>\n<strong>logical action</strong> <em>name</em>(<em>min_delay</em>, <em>min_spacing</em>, <em>policy</em>):<em>type</em>;<br></p>\n</blockquote>\n<p>The <em>min_delay</em>, <em>min_spacing</em>, and <em>policy</em> are all optional. If only one argument is given in parentheses, then it is interpreted as an <em>min_delay</em>, if two are given, then they are interpreted as <em>min_delay</em> and <em>min_spacing</em>, etc. The <em>min_delay</em> and <em>min_spacing</em> have to be a time value. The <em>policy</em> argument is a string that can be one of the following: <code class=\"language-text\">'defer'</code> (default), <code class=\"language-text\">'drop'</code>, or <code class=\"language-text\">'replace'</code>.</p>\n<p>An action will trigger at a logical time that depends on the arguments given to the schedule function, the <em>min_delay</em>, <em>min_spacing</em>, and <em>policy</em> arguments above, and whether the action is physical or logical.</p>\n<p>If the <strong>logical</strong> keyword is given, then the tag assigned to the event resulting from a call to <a href=\"#scheduling-future-reactions\"><strong>schedule</strong> function</a> is computed as follows. First, let <em>t</em> be the <em>current logical time</em>. For a logical action, the <code class=\"language-text\">schedule</code> function must be invoked from within a reaction (synchronously), so <em>t</em> is just the logical time of that reaction.</p>\n<p>The (preliminary) tag of the action is then just <em>t</em> plus <em>min_delay</em> plus the <em>offset</em> argument to <a href=\"#scheduling-future-reactions\"><strong>schedule</strong> function</a>.</p>\n<p>If the <strong>physical</strong> keyword is given, then the physical clock on the local platform is used as the timestamp assigned to the action. Moreover, for a physical action, unlike a logical action, the <code class=\"language-text\">schedule</code> function can be invoked from outside of any reaction (asynchronously), e.g. from an interrupt service routine or callback function.</p>\n<p>If a <em>min_spacing</em> has been declared, then a minimum distance between the tags of two subsequently scheduled events on the same action is enforced. If the preliminary tag is closer to the tag of the previously scheduled event (if there is one), then <em>policy</em> determines how the given constraints is enforced.</p>\n<ul>\n<li><code class=\"language-text\">'drop'</code>: the new event is dropped and <code class=\"language-text\">schedule</code> returns without having modified the event queue.</li>\n<li><code class=\"language-text\">'replace'</code>: the payload of the new event is assigned to the preceding event if it is still pending in the event queue; no new event is added to the event queue in this case. If the preceding event has already been pulled from the event queue, the default <code class=\"language-text\">'defer'</code> policy is applied.</li>\n<li><code class=\"language-text\">'defer'</code>: the event is added to the event queue with a tag that is equal to earliest time that satisfies the minimal spacing requirement. Assuming the tag of the preceding event is <em>t_prev</em>, then the tag of the new event simply becomes <em>t_prev</em> + <em>min_spacing</em>.</li>\n</ul>\n<p>Note that while the <code class=\"language-text\">'defer'</code> policy is conservative in the sense that it does not discard events, it could potentially cause an unbounded growth of the event queue.</p>\n<p>In all cases, the logical time of a new event will always be strictly greater than the logical time at which it is scheduled by at least one microstep (see the <a href=\"#Time\">Time</a> section).</p>\n<p>The default <em>min_delay</em> is zero. The default <em>min_spacing</em> is undefined (meaning that no minimum spacing constraint is enforced). If a <code class=\"language-text\">min_spacing</code> is defined, it has to be strictly greater than zero, and greater than or equal to the time precision of the target (for the C target, it is one nanosecond).</p>\n<p>The <em>min_delay</em> parameter in the <strong>action</strong> declaration is static (set at compile time), while the <em>offset</em> parameter given to the schedule function may be dynamically set at runtime. Hence, for static analysis and scheduling, the <strong>action</strong>’s’ <em>min_delay</em> parameter can be assumed to be a <em>minimum delay</em> for analysis purposes.</p>\n<h4 id=\"discussion\" style=\"position:relative;\"><a href=\"#discussion\" aria-label=\"discussion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Discussion</h4>\n<p>Logical actions are used to schedule events at a future logical time relative to the current logical time. Physical time is ignored. They must be scheduled within reactions, and the timestamp of the scheduled event will be relative to the current logical time of the reaction that schedules them. It is an error to schedule a logical action asynchronously, outside of the context of a reaction. Asynchronous actions are required to be <strong>physical</strong>.</p>\n<p>Physical actions are typically used to assign timestamps to externally triggered events, such as the arrival of a network message or the acquisition of sensor data, where the time at which these external events occurs is of interest. There are (at least) three interesting use cases:</p>\n<ol>\n<li>An asynchronous event, such as a callback function or interrupt service routine (ISR), is invoked at a physical time <em>t</em> and schedules an action with timestamp <em>T</em>=<em>t</em>.  To get this behavior, just set the physical action to have <em>min_delay</em> = 0 and call the schedule function  with <em>offset</em> = 0. The <em>min_spacing</em> can be useful here to prevent these external events from overwhelming the software system.</li>\n<li>A periodic task that is occasionally modified by a sporadic sensor. In this case, you can set  <em>min_delay</em> = <em>period</em> and call schedule with <em>offset</em> = 0. The resulting timestamp of the sporadic sensor event will always align with the periodic events. This is similar to periodic polling, but without the overhead of polling the sensor when nothing interesting is happening.</li>\n<li>You can impose a minimum physical time delay between an event’s occurrence, such as a push of a button, and system response by adjusting the <em>offset</em>.</li>\n</ol>\n<h3 id=\"actions-with-values\" style=\"position:relative;\"><a href=\"#actions-with-values\" aria-label=\"actions with values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions With Values</h3>\n<p>If an action is declared with a <em>type</em>, then it can carry a <strong>value</strong>, a data value passed to the <strong>schedule</strong> function. This value will be available to any reaction that is triggered by the action. The specific mechanism, however, is target-language dependent. See the <a href=\"Writing-reactors-in-C#actions-with-values\">C target</a> for an example.</p>\n<h2 id=\"reaction-declaration\" style=\"position:relative;\"><a href=\"#reaction-declaration\" aria-label=\"reaction declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reaction Declaration</h2>\n<p>A reaction is defined within a reactor using the following syntax:</p>\n<blockquote>\n<p><strong>reaction</strong>(<em>triggers</em>) <em>uses</em> -> <em>effects</em> {=<br/>\n   … target language code … <br/>\n=}</p>\n</blockquote>\n<p>The <em>uses</em> and <em>effects</em> fields are optional. A simple example appears in the “hello world” example given above:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    reaction(t) {=\n        printf(\"Hello World.\\n\");\n    =}</code></pre></div>\n<p>In this example, <code class=\"language-text\">t</code> is a <strong>trigger</strong> (a timer named <code class=\"language-text\">t</code>). When that timer fires, the reaction will be invoked. Triggers can be <a href=\"#timer-declaration\">timers</a>, <a href=\"#input-declaration\">inputs</a>, <a href=\"#output-declaration\">outputs</a> of contained reactors, or <a href=\"#action-declaration\">actions</a>. A comma-separated list of triggers can be given, in which case any of the specified triggers can trigger the reaction. If, at any logical time instant, more than one of the triggers fires, the reaction will nevertheless be invoked only once.</p>\n<p>The <em>uses</em> field specifies <a href=\"#input-declaration\">inputs</a> that the reaction observes but that do not trigger the reaction. This field can also be a comma-separated list of inputs. Since the input does not trigger the reaction, the body of the reaction will normally need to test for presence of the input before using it. How to do this is target specific. See <a href=\"Writing-Reactors-in-C#Inputs-and-Outputs\">how this is done in the C target</a>.</p>\n<p>The <em>effects</em> field, occurring after the right arrow, declares which <a href=\"#output-declaration\">outputs</a> and <a href=\"#action-declaration\">actions</a> the target code <em>may</em> produce or schedule. The <em>effects</em> field may also specify <a href=\"#input-declaration\">inputs</a> of contained reactors, provided that those inputs do not have any other sources of data. These declarations make it <em>possible</em> for the reaction to send outputs or enable future actions, but they do not <em>require</em> that the reaction code do that.</p>\n<h3 id=\"target-code\" style=\"position:relative;\"><a href=\"#target-code\" aria-label=\"target code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Target Code</h3>\n<p>The body of the reaction is code in the target language surrounded by <code class=\"language-text\">{=</code> and <code class=\"language-text\">=}</code>. This code is not parsed by the Lingua Franca compiler. It is used verbatim in the program that is generated.</p>\n<p>The target provides language-dependent mechanisms for referring to inputs, outputs, and actions in the target code. These mechanisms can be different in each target language, but all target languages provide the same basic set of mechanisms. These mechanisms include:</p>\n<ul>\n<li>Obtaining the current logical time (logical time does not advance during the execution of a reaction, so the execution of a reaction is logically instantaneous).</li>\n<li>Determining whether inputs are present at the current logical time and reading their value if they are. If a reaction is triggered by exactly one input, then that input will always be present. But if there are multiple triggers, or if the input is specified in the <em>uses</em> field, then the input may not be present when the reaction is invoked.</li>\n<li>Setting output values. Reactions in a reactor may set an output value more than once at any instant of logical time, but only the last of the values set will be sent on the output port.</li>\n<li>Scheduling future actions.</li>\n</ul>\n<p>In the <a href=\"Writing-Reactors-in-C#Reaction-Body\">C target</a>, for example, the following reactor will add two inputs if they are present at the time of a reaction:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Add {\n    input in1:int;\n    input in2:int;\n    output out:int;\n    reaction(in1, in2) -> out {=\n        int result = 0;\n        if (in1->is_present) result += in1->value;\n        if (in2->is_present) result += in2->value;\n        SET(out, result);\n    =}\n}</code></pre></div>\n<p>See the <a href=\"Writing-Reactors-in-C#Reaction-Body\">C target</a> for an example of how these things are specified in C.</p>\n<p><strong>NOTE:</strong> if a reaction fails to test for the presence of an input and reads its value anyway, then the result it will get is undefined and may be target dependent. In the C target, as of this writing, the value read will be the most recently seen input value, or, if no input event has occurred at an earlier logical time, then zero or NULL, depending on the datatype of the input. In the TS target, the value will be <strong>undefined</strong>, a legitimate value in TypeScript.</p>\n<h3 id=\"scheduling-future-reactions\" style=\"position:relative;\"><a href=\"#scheduling-future-reactions\" aria-label=\"scheduling future reactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduling Future Reactions</h3>\n<p>Each target language provides some mechanism for scheduling future reactions. Typically, this takes the form of a <code class=\"language-text\">schedule</code> function that takes as an argument an <a href=\"#Action-Declaration\">action</a>, a time interval, and (perhaps optionally), a payload.  For example, in the <a href=\"Writing-Reactors-in-C#Reaction-Body\">C target</a>, in the following program, each reaction to the timer <code class=\"language-text\">t</code> schedules another reaction to occur 100 msec later:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target C;\nmain reactor Schedule {\n    timer t(0, 1 sec);\n    logical action a;\n    reaction(t) -> a {=\n        schedule(a, MSEC(100));\n    =}\n    reaction(a) {=\n        printf(\"Nanoseconds since start: %lld.\\n\", get_elapsed_logical_time());\n    =}\n}</code></pre></div>\n<p>When executed, this will produce the following output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Start execution at time Sun Aug 11 04:11:57 2019\nplus 919310000 nanoseconds.\nNanoseconds since start: 100000000.\nNanoseconds since start: 1100000000.\nNanoseconds since start: 2100000000.\n...</code></pre></div>\n<p>This action has no datatype and carries no value, but, as explained below, an action can carry a value.</p>\n<h3 id=\"asynchronous-callbacks\" style=\"position:relative;\"><a href=\"#asynchronous-callbacks\" aria-label=\"asynchronous callbacks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Asynchronous Callbacks</h3>\n<p>In targets that support multitasking, the <code class=\"language-text\">schedule</code> function, which schedules future reactions, may be safely invoked on a <strong>physical action</strong> in code that is not part of a reaction. For example, in the multithreaded version of the  <a href=\"Writing-Reactors-in-C#Reaction-Body\">C target</a>, <code class=\"language-text\">schedule</code> may be invoked in an interrupt service routine. The reaction(s) that are scheduled are guaranteed to occur at a time that is strictly larger than the current logical time of any reactions that are being interrupted.</p>\n<h3 id=\"superdense-time\" style=\"position:relative;\"><a href=\"#superdense-time\" aria-label=\"superdense time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Superdense Time</h3>\n<p>Lingua Franca uses a concept known as <strong>superdense time</strong>, where two time values that appear to be the same are not logically simultaneous. At every logical time value, for example midnight on January 1, 1970, there exist a logical sequence of <strong>microsteps</strong> that are not simultaneous. The <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/Microsteps.lf\">Microsteps</a> example illustrates this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target C;\nreactor Destination {\n    input x:int;\n    input y:int;\n    reaction(x, y) {=\n        printf(\"Time since start: %lld.\\n\", get_elapsed_logical_time());\n        if (x->is_present) {\n            printf(\"  x is present.\\n\");\n        }\n        if (y->is_present) {\n            printf(\"  y is present.\\n\");\n        }\n    =}\n}\nmain reactor Microsteps {\n    timer start;\n    logical action repeat;\n    d = new Destination();\n    reaction(start) -> d.x, repeat {=\n        SET(d.x, 1);\n        schedule(repeat, 0);\n    =}\n    reaction(repeat) -> d.y {=\n        SET(d.y, 1);\n    =}\n}</code></pre></div>\n<p>The <code class=\"language-text\">Destination</code> reactor has two inputs, <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code>, and it simply reports at each logical time where either is present what is the logical time and which is present.  The <code class=\"language-text\">Microsteps</code> reactor initializes things with a reaction to the one-time timer event <code class=\"language-text\">start</code> by sending data to the <code class=\"language-text\">x</code> input of <code class=\"language-text\">Destination</code>. It then schedules a <code class=\"language-text\">repeat</code> action.</p>\n<p>Note that time delay in the call to <code class=\"language-text\">schedule</code> is zero. However, any reaction scheduled by <code class=\"language-text\">schedule</code> is required to occur <strong>strictly later</strong> than current logical time. In Lingua Franca, this is handled by scheduling the <code class=\"language-text\">repeat</code> reaction to occur one <strong>microstep</strong> later. The output printed, therefore, will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Time since start: 0.\n  x is present.\nTime since start: 0.\n  y is present.</code></pre></div>\n<p>Note that the numerical time reported by <code class=\"language-text\">get_elapsed_logical_time()</code> has not advanced in the second reaction, but the fact that <code class=\"language-text\">x</code> is not present in the second reaction proves that the first reaction and the second are not logically simultaneous. The second occurs one microstep later.</p>\n<p>Note that it is possible to write code that will prevent logical time from advancing except by microsteps. For example, we could replace the reaction to <code class=\"language-text\">repeat</code> in <code class=\"language-text\">Main</code> with this one:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    reaction(repeat) -> d.y, repeat {=\n        SET(d.y, 1);\n        schedule(repeat, 0);\n    =}</code></pre></div>\n<p>This would create what is known as a <strong>stuttering Zeno</strong> condition, where logical time cannot advance.  The output will be an unbounded sequence like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Time since start: 0.\n  x is present.\nTime since start: 0.\n  y is present.\nTime since start: 0.\n  y is present.\nTime since start: 0.\n  y is present.\n...</code></pre></div>\n<h3 id=\"startup-and-shutdown-reactions\" style=\"position:relative;\"><a href=\"#startup-and-shutdown-reactions\" aria-label=\"startup and shutdown reactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Startup and Shutdown Reactions</h3>\n<p>Two special triggers are supported, <strong>startup</strong> and <strong>shutdown</strong>. A reaction that specifies the <strong>startup</strong> trigger will be invoked at the start of execution of the model.  The following two syntaxes have exactly the same effect:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    reaction(startup) {= ... =}</code></pre></div>\n<p>and</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    timer t;\n    reaction(t) {= ... =}</code></pre></div>\n<p>In other words, <strong>startup</strong> is a timer that triggers once at the first logical time of execution.  As with any other reaction, the reaction can also be triggered by inputs and can produce outputs or schedule actions.</p>\n<p>The <strong>shutdown</strong> trigger is slightly different.  A shutdown reaction is specified as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   reaction(shutdown) {= ... =}</code></pre></div>\n<p>This reaction will be invoked when the program terminates normally (there are no more events, some reaction has called a <code class=\"language-text\">request_stop()</code> utility provided in the target language, or the execution was specified to last a finite logical time). The reaction will be invoked at a logical time one microstep <em>later</em> than the last logical time of the execution. In other words, the presence of this reaction means that the program will execute one extra logical time cycle beyond what it would have otherwise, and that logical time is one microstep later than what would have otherwise been the last logical time.</p>\n<p>If the reaction produces outputs, then downstream reactors will also be invoked at that later logical time. If the reaction schedules future reactions, those will be ignored. After the completion of this final logical time cycle, one microstep later than the normal termination, the program will exit.</p>\n<h2 id=\"contained-reactors\" style=\"position:relative;\"><a href=\"#contained-reactors\" aria-label=\"contained reactors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contained Reactors</h2>\n<p>Reactors can contain instances of other reactors defined in the same file or in an imported file. Assuming the above <a href=\"#state-declaration\">Count reactor</a> is stored in a file <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/lib/Count.lf\">Count.lf</a>, then <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/CountTest.lf\">CountTest</a> is an example that imports and instantiates it to test the reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target C;\nimport Count.lf;\nreactor Test {\n    input c:int;\n    state i:int(0);\n    reaction(c) {=\n        printf(\"Received %d.\\n\", c->value);\n        (self->i)++;\n        if (c->value != self->i) {\n            printf(\"ERROR: Expected %d but got %d\\n.\", self->i, c->value);\n            exit(1);\n        }\n    =}\n    reaction(shutdown) {=\n        if (self->i != 4) {\n            printf(\"ERROR: Test should have reacted 4 times, but reacted %d times.\\n\", self->i);\n            exit(2);\n        }\n    =}\n}\n\nmain reactor CountTest {\n    count = new Count();\n    test = new Test();\n    count.out -> test.c;\n}</code></pre></div>\n<p>An instance is created with the syntax:</p>\n<blockquote>\n<p><em>instance_name</em> = <strong>new</strong> <em>class_name</em>(<em>parameters</em>);</p>\n</blockquote>\n<p>A bank with several instances can be created in one such statement, as explained in the <a href=\"Multiports-and-Banks-of-Reactors#banks-of-reactors\">banks of reactors documentation</a>.</p>\n<p>The <em>parameters</em> argument has the form:</p>\n<blockquote>\n<p><em>parameter1_name</em> = <em>parameter1_value</em>,  <em>parameter2_name</em> = <em>parameter2_value</em>,  …</p>\n</blockquote>\n<p>Connections between ports are specified with the syntax:</p>\n<blockquote>\n<p><em>output_port</em> -> <em>input_port</em></p>\n</blockquote>\n<p>where the ports are either <em>instance_name.port_name</em> or just <em>port_name</em>, where the latter form denotes a port belonging to the reactor that contains the instances.</p>\n<h3 id=\"physical-connections\" style=\"position:relative;\"><a href=\"#physical-connections\" aria-label=\"physical connections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Physical Connections</h3>\n<p>A subtle and rarely used variant is a <strong>physical connection</strong>, denoted <code class=\"language-text\">~></code>. In such a connection, the logical time at the recipient is derived from the local physical clock rather than being equal to the logical time at the sender. The physical time will always exceed the logical time of the sender, so this type of connection incurs a nondeterministic positive logical time delay. Physical connections are useful sometimes in [[Distributed-Execution]] in situations where the nondeterministic logical delay is tolerable. Such connections are more efficient because timestamps need not be transmitted and messages do not need to flow through through a centralized coordinator (if a centralized coordinator is being used).</p>\n<h3 id=\"connections-with-delays\" style=\"position:relative;\"><a href=\"#connections-with-delays\" aria-label=\"connections with delays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connections with Delays</h3>\n<p>Connections may include a <strong>logical delay</strong> using the <strong>after</strong> keyword, as follows:</p>\n<blockquote>\n<p><em>output_port</em> -> <em>input_port</em> <strong>after</strong> 10 <strong>msec</strong></p>\n</blockquote>\n<p>This means that the logical time of the message delivered to the <em>input_port</em> will be 10 milliseconds larger than the logical time of the reaction that wrote to <em>output_port</em>. If the time value is greater than zero, then the event will appear at microstep 0. If it is equal to zero, then it will appear at the current microstep plus one.</p>\n<p>When there are multiports or banks of reactors, several channels can be connected with a single connection statement. See <a href=\"Multiports-and-Banks-of-Reactors#banks-of-reactors\">Multiports and Banks of Reactors</a>.</p>\n<p>The following example defines a reactor that adds a counting sequence to its input. It uses the above Count and Add reactors (see <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/Hierarchy2.lf\">Hierarchy2</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Count.lf;\nimport Add.lf;\nreactor AddCount {\n    input in:int;\n    output out:int;\n    count = new Count();\n    add = new Add();\n    in -> add.in1;\n    count.out -> add.in2;\n    add.out -> out;\n}</code></pre></div>\n<p>A reactor that contains other reactors may, within a reaction, send data to the contained reactor. The following example illustrates this (see <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/SendingInside.lf\">SendingInside</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target C;\nreactor Printer {\n\tinput x:int;\n\treaction(x) {=\n\t\tprintf(\"Inside reactor received: %d\\n\", x->value);\n\t=}\n}\nmain reactor SendingInside {\n\tp = new Printer();\n\treaction(startup) -> p.x {=\n\t\tSET(p.x, 1);\n\t=}\n}</code></pre></div>\n<p>Running this will print:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Inside reactor received: 1</code></pre></div>\n<h2 id=\"deadlines\" style=\"position:relative;\"><a href=\"#deadlines\" aria-label=\"deadlines permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deadlines</h2>\n<p>Lingua Franca includes a notion of a <strong>deadline</strong>, which is a relation between logical time and physical time. Specifically, a program may specify that the invocation of a reaction must occur within some physical-time interval of the logical timestamp of the message. If a reaction is invoked at logical time 12 noon, for example, and the reaction has a deadline of one hour, then the reaction is required to be invoked before the physical-time clock of the execution platform reaches 1 PM. If the deadline is violated, then the specified deadline handler is invoked instead of the reaction.  For example (see <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/Deadline.lf\">Deadline</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Deadline() {\n    input x:int;\n    output d:int; // Produced if the deadline is violated.\n    reaction(x) -> d {=\n        printf(\"Normal reaction.\\n\");\n    =} deadline(10 msec) {=\n        printf(\"Deadline violation detected.\\n\");\n        SET(d, x->value);\n    =}</code></pre></div>\n<p>This reactor specifies a deadline of 10 milliseconds (this can be a parameter of the reactor). If the reaction to <code class=\"language-text\">x</code> is triggered later in physical time than 10 msec past the timestamp of <code class=\"language-text\">x</code>, then the second body of code is executed instead of the first. That second body of code has access to anything the first body of code has access to, including the input <code class=\"language-text\">x</code> and the output <code class=\"language-text\">d</code>.  The output can be used to notify the rest of the system that a deadline violation occurred.</p>\n<p>The amount of the deadline, of course, can be given by a parameter.</p>\n<p>A sometimes useful pattern is when a container reactor reacts to deadline violations in a contained reactor. The <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/DeadlineHandledAbove.lf\">DeadlineHandledAbove</a> example illustrates this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target C;\nreactor Deadline() {\n    input x:int;\n    output deadline_violation:bool;\n    reaction(x) -> deadline_violation {=\n        ... normal code to execute ...\n    =} deadline(100 msec) {=\n        printf(\"Deadline violation detected.\\n\");\n        SET(deadline_violation, true);\n    =}\n}\nmain reactor DeadlineHandledAbove {\n    d = new Deadline();\n    ...\n    reaction(d.deadline_violation) {=\n        ... handle the deadline violation ...\n    =}\n}</code></pre></div>\n<h2 id=\"comments\" style=\"position:relative;\"><a href=\"#comments\" aria-label=\"comments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Comments</h2>\n<p>Lingua Franca files can have C/C++/Java-style comments and/or Python-style comments. All of the following are valid comments:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    // Single-line C-style comment.\n    /*\n       Multi-line C-style comment.\n     */\n    # Single-line Python-style comment.\n    '''\n       Multi-line Python-style comment.\n    '''</code></pre></div>\n<h2 id=\"appendix-lf-types\" style=\"position:relative;\"><a href=\"#appendix-lf-types\" aria-label=\"appendix lf types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Appendix: LF types</h2>\n<p>Type annotations may be written in many places in LF, including <a href=\"#Parameter-declaration\">parameter declarations</a>, <a href=\"#State-declaration\">state variable declarations</a>, <a href=\"#Input-declaration\">input</a> and <a href=\"#Output-declaration\">output declarations</a>. In some targets, they are required, because the target language requires them too.</p>\n<p>Assigning meaning to type annotations is entirely offloaded to the target compiler, as LF does not feature a type system (yet?). However, LF’s syntax for types supports a few idioms that have target-specific meaning. Types may have the following forms:</p>\n<ul>\n<li>the <strong>time</strong> type is reserved by LF, its values represent time durations. The <strong>time</strong> type accepts <em>time expressions</em> for values, eg <code class=\"language-text\">100 msec</code>, or <code class=\"language-text\">0</code> (see <a href=\"#basic-expressions\">Basic expressions</a> for a reference).</li>\n<li>identifiers are valid types (eg <code class=\"language-text\">int</code>, <code class=\"language-text\">size_t</code>), and may be followed by type arguments (eg <code class=\"language-text\">vector&lt;int></code>).</li>\n<li>the syntactic forms <code class=\"language-text\">type[]</code> and <code class=\"language-text\">type[integer]</code> correspond to target-specific array types. The second form is available only in languages which support fixed-size array types (eg in C++, <code class=\"language-text\">std::array&lt;5></code>).</li>\n<li>the syntactic form <code class=\"language-text\">{= some type =}</code> allows writing an arbitrary type as target code. This is useful in target languages which have complex type grammar (eg in TypeScript, <code class=\"language-text\">{= int | null =}</code>).</li>\n</ul>\n<p>Also note that to use strings conveniently in the C target, the “type” <code class=\"language-text\">string</code> is an alias for <code class=\"language-text\">{=char*=}</code>.</p>\n<p>(Types ending with a <code class=\"language-text\">*</code> are treated specially by the C target. See <a href=\"Writing-Reactors-in-C#sending-and-receiving-arrays-and-structs\">Sending and Receiving Arrays and Structs</a> in the C target documentation.)</p>\n<h2 id=\"appendix-lf-expressions\" style=\"position:relative;\"><a href=\"#appendix-lf-expressions\" aria-label=\"appendix lf expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Appendix: LF expressions</h2>\n<p>A subset of LF syntax is used to write <em>expressions</em>, which represent target language values. Expressions are used in <a href=\"#State-declaration\">state variable</a> initializers, default values for <a href=\"#Parameter-declarations\">parameters</a>, and <a href=\"#Contained-reactors\">parameter assignments</a>.</p>\n<p>Expressions in LF support only simple forms, that are intended to be common across languages. Their precise meaning (eg the target language types they are compatible with) is target-specific and not specified here.</p>\n<h3 id=\"basic-expressions\" style=\"position:relative;\"><a href=\"#basic-expressions\" aria-label=\"basic expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Basic expressions</h3>\n<p>The most basic expression forms, which are supported by all target languages, are the following:</p>\n<ul>\n<li>\n<p>Literals:</p>\n<ul>\n<li>Numeric literals, eg <code class=\"language-text\">1</code>, <code class=\"language-text\">-120</code>, <code class=\"language-text\">1.5</code>. Note that the sign, if any, is part of the literal and must not be separated by whitespace.</li>\n<li>String literals, eg <code class=\"language-text\">\"abcd\"</code>. String literals always use double-quotes, even in languages which support other forms (like Python).</li>\n<li>Character literals. eg <code class=\"language-text\">'a'</code>.  Single-quoted literals must be exactly one character long —even in Python.</li>\n<li>Boolean literals: <code class=\"language-text\">true</code>, <code class=\"language-text\">false</code>, <code class=\"language-text\">True</code>, <code class=\"language-text\">False</code>. The latter two are there for Python.</li>\n</ul>\n</li>\n<li>\n<p>Parameter references, which are simple identifiers (eg <code class=\"language-text\">foo</code>). Any identifier in expression position must refer to a parameter of the enclosing reactor.</p>\n</li>\n<li>\n<p>Time values, eg <code class=\"language-text\">1 msec</code> or <code class=\"language-text\">10 seconds</code>. The syntax of time values is <code class=\"language-text\">integer time_unit</code>, where <code class=\"language-text\">time_unit</code> is one of the following</p>\n<ul>\n<li><strong>nsec</strong>: nanoseconds</li>\n<li><strong>usec</strong>: microseconds</li>\n<li><strong>msec</strong>: milliseconds</li>\n<li><strong>sec</strong> or <strong>second</strong>: seconds</li>\n<li><strong>minute</strong>: 60 seconds</li>\n<li><strong>hour</strong>: 60 minutes</li>\n<li><strong>day</strong>: 24 hours</li>\n<li><strong>week</strong>: 7 days</li>\n</ul>\n<p>Each of these units also support a pluralized version (eg <code class=\"language-text\">nsecs</code>, <code class=\"language-text\">minutes</code>, <code class=\"language-text\">days</code>), which means the same thing.</p>\n<p>The time value <code class=\"language-text\">0</code> may have no unit. Except in this specific case, the unit is always required.</p>\n<p>Time values are compatible with the <code class=\"language-text\">time</code> type.</p>\n</li>\n<li>\n<p>Escaped target-language expression, eg <code class=\"language-text\">{= foo() =}</code>. This syntax is used to write any expression which does not fall into one of the other forms described here. The contents are not parsed and are used verbatim in the generated file.</p>\n<p>The variables in scope are target-specific.</p>\n</li>\n</ul>\n<h3 id=\"complex-expressions\" style=\"position:relative;\"><a href=\"#complex-expressions\" aria-label=\"complex expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Complex expressions</h3>\n<p>Some targets may make use of a few other syntactic forms for expressions. These syntactic forms may be acribed a different meaning by different targets, to keep the source language close in meaning to the target language.</p>\n<p>We describe here these syntactic forms and what meaning they have in each target.</p>\n<ul>\n<li>Bracket-list syntax, eg <code class=\"language-text\">[1, 2, 3]</code>. This syntax is used to create a list in Python. It is not supported by any other target at the moment.\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">state x<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h4 id=\"initializer-pseudo-expressions\" style=\"position:relative;\"><a href=\"#initializer-pseudo-expressions\" aria-label=\"initializer pseudo expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initializer pseudo-expressions</h4>\n<p>Some “expression” forms are only acceptable as the initializer of a state variable or parameter, but not in other places (like inside a list expression). These are</p>\n<ul>\n<li>\n<p>Tuple syntax, eg <code class=\"language-text\">(1, 2, 3)</code>. This syntax is used:</p>\n<ul>\n<li>\n<p>in the Python target, to create a tuple value. Tuples are different from lists in that they are immutable.</p>\n</li>\n<li>\n<p>in C++, to pass arguments to a constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">state x<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In that example, the initializer expression is translated to <code class=\"language-text\">new std::vector(1,2)</code>. See also <a href=\"https://github.com/lf-lang/lingua-franca/wiki/Writing-Reactors-in-Cpp#using-state-variables\">C++ target documentation</a>.</p>\n</li>\n<li>\n<p>in C and all other targets, to create a target-specific array value. In the Python target, this is accomplished by the bracket-list syntax <code class=\"language-text\">[1,2,3]</code> instead. Note that to create a zero- or one-element array, fat braces are usually required. For instance in C:</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  state x<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// creates an int array, basically `int x[] = {1,2,3};` </span>\n  state x<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// `int x[] = 1;` - type error!</span>\n  state x<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// one element array: `int x[] = {1};` </span></code></pre></div>\n</li>\n<li>\n<p>Brace-list syntax, eg <code class=\"language-text\">{1, 2, 3}</code>. This syntax is at the moment only supported by the C++ target. It’s used to initialize a vector with the initializer list syntax instead of a constructor call.</p>\n</li>\n</ul>","headings":[{"value":"Target Specification","depth":2},{"value":"Import Statement","depth":2},{"value":"Reactor Block","depth":2},{"value":"Parameter Declaration","depth":3},{"value":"State Declaration","depth":3},{"value":"Method Declaration","depth":3},{"value":"Input Declaration","depth":3},{"value":"Output Declaration","depth":3},{"value":"Timer Declaration","depth":3},{"value":"Action Declaration","depth":3},{"value":"Discussion","depth":4},{"value":"Actions With Values","depth":3},{"value":"Reaction Declaration","depth":2},{"value":"Target Code","depth":3},{"value":"Scheduling Future Reactions","depth":3},{"value":"Asynchronous Callbacks","depth":3},{"value":"Superdense Time","depth":3},{"value":"Startup and Shutdown Reactions","depth":3},{"value":"Contained Reactors","depth":2},{"value":"Physical Connections","depth":3},{"value":"Connections with Delays","depth":3},{"value":"Deadlines","depth":2},{"value":"Comments","depth":2},{"value":"Appendix: LF types","depth":2},{"value":"Appendix: LF expressions","depth":2},{"value":"Basic expressions","depth":3},{"value":"Complex expressions","depth":3},{"value":"Initializer pseudo-expressions","depth":4}],"frontmatter":{"permalink":"/docs/handbook/language-specification","title":"Language Specification","oneline":"Language Specification for Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Contributing","oneline":"Contribute to Lingua Franca.","permalink":"/docs/handbook/contributing"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Contributing","oneline":"Contribute to Lingua Franca.","permalink":"/docs/handbook/contributing"}}}},"pageContext":{"slug":"/docs/handbook/language-specification","repoPath":"/packages/documentation/copy/en/obsolete/Language Specification.md","lang":"en","modifiedTime":"2022-04-27T14:07:54.232Z"}},
    "staticQueryHashes": []}