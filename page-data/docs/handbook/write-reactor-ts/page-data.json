{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/write-reactor-ts",
    "result": {"data":{"markdownRemark":{"id":"66f08e55-f34e-520b-b3a6-c06316a749cb","excerpt":"In the TypeScript reactor target for Lingua Franca, reactions are written in TypeScript and the code generator generates a standalone TypeScript program that…","html":"<p>In the TypeScript reactor target for Lingua Franca, reactions are written in <a href=\"https://www.typescriptlang.org/\">TypeScript</a> and the code generator generates a standalone TypeScript program that can be compiled to JavaScript and run on <a href=\"https://nodejs.org\">Node.js</a>.</p>\n<p>TypeScript reactors bring the strengths of TypeScript and Node.js to Lingua Franca programming. The TypeScript language and its associated tools enable static type checking for both reaction code and Lingua Franca elements like ports and actions. The Node.js JavaScript runtime provides an execution environment for asynchronous network applications. With Node.js comes Node Package Manager (<a href=\"https://www.npmjs.com/\">npm</a>) and its large library of supporting modules.</p>\n<p>In terms of raw performance on CPU intensive operations, TypeScript reactors are about two orders of magnitude slower than C reactors. But excelling at CPU intensive operations isn’t really the point of Node.js (or by extension TypeScript reactors). Node.js is about achieving high throughput on network applications by efficiently handling asynchronous I/O operations. Keep this in mind when choosing the right Lingua Franca target for your application.</p>\n<h2 id=\"setup\" style=\"position:relative;\"><a href=\"#setup\" aria-label=\"setup permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup</h2>\n<p>First, make sure Node.js is installed on your machine. You can <a href=\"https://nodejs.org/en/download/\">download Node.js here</a>. The npm package manager comes along with Node.</p>\n<p>After installing Node, you may optionally install the TypeScript compiler.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g typescript</code></pre></div>\n<p>TypeScript reactor projects are created with a local copy of the TypeScript compiler, but having the TypeScript compiler globally installed can be useful for <a href=\"#debugging-type-errors\">debugging type errors</a> and type checking on the command line.</p>\n<h2 id=\"a-minimal-example\" style=\"position:relative;\"><a href=\"#a-minimal-example\" aria-label=\"a minimal example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A Minimal Example</h2>\n<p>A “hello world” reactor for the TypeScript target looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor Minimal {\n    timer t;\n    reaction(t) {=\n        console.log(\"Hello World.\");\n    =}\n}</code></pre></div>\n<p>The timer triggers at the start time of the execution causing the reaction to execute. This program can be found in a file called <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/xtext/org.icyphy.linguafranca/src/test/TS/Minimal.lf\"><code class=\"language-text\">Minimal.lf</code></a> in the <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/xtext/org.icyphy.linguafranca/src/test/TS\">test directory</a>, where you can also find quite a few more interesting examples. If you compile this using the <a href=\"downloading-and-building#Command-Line-Tools\"><code class=\"language-text\">lfc</code> command-line compiler</a> or the <a href=\"downloading-and-building#Download-the-Integrated-Development-Environment\">Eclipse-based IDE</a>, a number of files and directories will be generated. You can run the compiled JavaScript program (from <code class=\"language-text\">Minimal.lf</code>’s directory) with the command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node Minimal/dist/Minimal.js </code></pre></div>\n<p>The resulting output should look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hello World.</code></pre></div>\n<p>Notice the compiler generates a project directory with the name of the .lf file. In this example the .lf file’s name is “Minimal” but more generally, for <code class=\"language-text\">&lt;LF_file_name>.lf</code> the command to run the program is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node &lt;LF_file_name>/dist/&lt;LF_file_name>.js</code></pre></div>\n<p>Refer to the <a href=\"#implementation-details\">TypeScript Project Structure</a> section to learn why the command looks like this.</p>\n<h2 id=\"the-typescript-target-specification\" style=\"position:relative;\"><a href=\"#the-typescript-target-specification\" aria-label=\"the typescript target specification permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The TypeScript Target Specification</h2>\n<p>To have Lingua Franca generate TypeScript code, start your <code class=\"language-text\">.lf</code> file with the following target specification:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;</code></pre></div>\n<p>A TypeScript target specification may optionally include the following parameters:</p>\n<ul>\n<li><code class=\"language-text\">fast [true|false]</code>: Whether to execute as fast as possible ignoring real time. This defaults to false.</li>\n<li><code class=\"language-text\">keepalive [true|false]</code>: Whether to continue executing even when there are no events on the event queue. The default is false. Usually, you will want to set this to true when you have <strong>physical action</strong>s.</li>\n<li><code class=\"language-text\">logging [ERROR|WARN|INFO|LOG|DEBUG]</code>: The level of diagnostic messages about execution to print to the console. A message will print if this parameter is greater than or equal to the level of the message (<code class=\"language-text\">ERROR</code> &#x3C; <code class=\"language-text\">WARN</code> &#x3C; <code class=\"language-text\">INFO</code> &#x3C; <code class=\"language-text\">LOG</code> &#x3C; <code class=\"language-text\">DEBUG</code>). Internally this is handled by the <a href=\"https://www.npmjs.com/package/ulog\">ulog module</a>.</li>\n<li><code class=\"language-text\">timeout &lt;n> &lt;units></code>: The amount of logical time to run before exiting. By default, the program will run forever or until forcibly stopped, with control-C, for example.</li>\n</ul>\n<p>For example, for the TypeScript target, in a source file named <code class=\"language-text\">Foo.lf</code>, you might specify:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript {\n    fast: true,\n    timeout: 10 secs,\n    logging: INFO,\n\n};</code></pre></div>\n<p>The <code class=\"language-text\">fast</code> option given above specifies to execute the file as fast as possible, ignoring timing delays.</p>\n<p>The <code class=\"language-text\">logging</code> option indicates diagnostic messages tagged as <code class=\"language-text\">ERROR</code>, <code class=\"language-text\">WARN</code>, and <code class=\"language-text\">INFO</code> should print to the console. Messages tagged <code class=\"language-text\">LOG</code> or <code class=\"language-text\">DEBUG</code> will not print.</p>\n<p>The <code class=\"language-text\">timeout</code> option specifies to stop after 10 seconds of logical time have elapsed.</p>\n<h2 id=\"command-line-arguments\" style=\"position:relative;\"><a href=\"#command-line-arguments\" aria-label=\"command line arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Command-Line Arguments</h2>\n<p>The generated JavaScript program understands the following command-line arguments, each of which has a short form (one character) and a long form:</p>\n<ul>\n<li><code class=\"language-text\">-f, --fast [true | false]</code>:  Specifies whether to wait for physical time to match logical time. The default is <code class=\"language-text\">false</code>. If this is <code class=\"language-text\">true</code>, then the program will execute as fast as possible, letting logical time advance faster than physical time.</li>\n<li><code class=\"language-text\">-o, --timeout '&lt;duration> &lt;units>'</code>: Stop execution when logical time has advanced by the specified <em>duration</em>. The units can be any of nsec, usec, msec, sec, minute, hour, day, week, or the plurals of those. For the duration and units of a timeout argument to be parsed correctly as a single value, these should be specified in quotes with no leading or trailing space (eg ‘5 sec’).</li>\n<li><code class=\"language-text\">-k, --keepalive [true | false]</code>: Specifies whether to stop execution if there are no events to process. This defaults to <code class=\"language-text\">false</code>, meaning that the program will stop executing when there are no more events on the event queue. If you set this to <code class=\"language-text\">true</code>, then the program will keep executing until either the <code class=\"language-text\">timeout</code> logical time is reached or the program is externally killed. If you have <code class=\"language-text\">physical action</code>s, it usually makes sense to set this to <code class=\"language-text\">true</code>.</li>\n<li><code class=\"language-text\">-l, --logging [ERROR | WARN | INFO | LOG | DEBUG]</code>: The level of logging messages from the reactor-ts runtime to to print to the console. Messages tagged with a given type (error, warn, etc.) will print if this argument is greater than or equal to the level of the message (<code class=\"language-text\">ERROR</code> &#x3C; <code class=\"language-text\">WARN</code> &#x3C; <code class=\"language-text\">INFO</code> &#x3C; <code class=\"language-text\">LOG</code> &#x3C; <code class=\"language-text\">DEBUG</code>).</li>\n<li><code class=\"language-text\">-h, --help</code>: Print this usage guide. The program will not execute if this flag is present.</li>\n</ul>\n<p>If provided, a command line argument will override whatever value the corresponding target property had specified in the source .lf file.</p>\n<p>Command line options are parsed by the <a href=\"https://github.com/75lb/command-line-args\">command-line-arguments</a> module with <a href=\"https://github.com/75lb/command-line-args/wiki/Notation-rules\">these rules</a>. For example</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ node &lt;LF_file_name>/dist/&lt;LF_file_name>.js -f false --keepalive=true -o '4 sec' -l INFO</code></pre></div>\n<p>is a valid setting.</p>\n<p>Any errors in command-line arguments result in printing the above information. The program will not execute if there is a parsing error for command-line arguments.</p>\n<h3 id=\"custom-command-line-arguments\" style=\"position:relative;\"><a href=\"#custom-command-line-arguments\" aria-label=\"custom command line arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Command-Line Arguments</h3>\n<p>User-defined command-line arguments may be created by giving the main reactor <a href=\"#using-parameters\">parameters</a>. Assigning the main reactor a parameter of type <code class=\"language-text\">string</code>, <code class=\"language-text\">number</code>, <code class=\"language-text\">boolean</code>, or <code class=\"language-text\">time</code> will add an argument with corresponding name and type to the generated program’s command-line-interface. Custom arguments will also appear in the generated program’s usage guide (from the <code class=\"language-text\">--help</code> option). If the generated program is executed with a value specified for a custom command-line argument, that value will override the default value for the corresponding parameter. Arguments typed <code class=\"language-text\">string</code>, <code class=\"language-text\">number</code>, and <code class=\"language-text\">boolean</code> are parsed in the expected way, but <code class=\"language-text\">time</code> arguments must be specified on the command line like the <code class=\"language-text\">--timeout</code> property as <code class=\"language-text\">'&lt;duration> &lt;units>'</code> (in quotes).</p>\n<p>Note: Custom arguments may not have the same names as standard arguments like <code class=\"language-text\">timeout</code> or <code class=\"language-text\">keepalive</code>.</p>\n<p>For example this reactor has a custom command line argument named <code class=\"language-text\">customArg</code> of type <code class=\"language-text\">number</code> and default value <code class=\"language-text\">2</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor clArg(customArg:number(2)) {\n    reaction (startup) {=\n        console.log(customArg);\n    =}\n}</code></pre></div>\n<p>If this reactor is compiled from the file <code class=\"language-text\">simpleCLArgs.lf</code>, executing</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node simpleCLArgs/dist/simpleCLArgs.js</code></pre></div>\n<p>outputs the default value <code class=\"language-text\">2</code>. But running</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node simpleCLArgs/dist/simpleCLArgs.js --customArg=42</code></pre></div>\n<p>outputs <code class=\"language-text\">42</code>. Additionally, we can view documentation for the custom command line argument with the <code class=\"language-text\">--help</code> command.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node simpleCLArgs/dist/simpleCLArgs.js -h</code></pre></div>\n<p>The program will generate the standard usage guide, but also</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">--customArg '&lt;duration> &lt;units>'                    Custom argument. Refer to           \n                                                      &lt;path>/simpleCLArgs.lf \n                                                      for documentation.</code></pre></div>\n<h3 id=\"additional-types-for-custom-command-line-arguments\" style=\"position:relative;\"><a href=\"#additional-types-for-custom-command-line-arguments\" aria-label=\"additional types for custom command line arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Additional types for Custom Command-Line Arguments</h3>\n<p>Main reactor parameters that are not typed <code class=\"language-text\">string</code>, <code class=\"language-text\">number</code>, <code class=\"language-text\">boolean</code>, or <code class=\"language-text\">time</code> will not create custom command-line arguments. However, that doesn’t mean it is impossible to obtain other types from the command line, just use a <code class=\"language-text\">string</code> and specify how the parsing is done yourself. See below for an example of a reactor that parses a custom command-line argument of type <code class=\"language-text\">string</code> into a state variable of type <code class=\"language-text\">Array&lt;number></code> using <code class=\"language-text\">JSON.parse</code> and a <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\">user-defined type guard</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor customType(arrayArg:string(\"\")) {\n    preamble {=\n        function isArrayOfNumbers(x: any): x is Array&lt;number> {\n            for (let item of x) {\n                if (typeof item !== \"number\") {\n                    return false;\n                }\n            }\n            return true;\n        }\n    =}\n    state foo:{=Array&lt;number>=}({=[]=});\n    reaction (startup) {=\n        let parsedArgument = JSON.parse(customType);\n        if (isArrayOfNumbers(parsedArgument)) {\n            foo = parsedArgument;\n            }\n        else {\n            throw new Error(\"Custom command line argument is not an array of numbers.\");\n        }\n        console.log(foo);\n    =}\n}</code></pre></div>\n<h2 id=\"imports\" style=\"position:relative;\"><a href=\"#imports\" aria-label=\"imports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Imports</h2>\n<p>The <a href=\"Language-Specification#import-statement\">import statement</a> can be used to share reactor definitions across several applications. Suppose for example that we modify the above <code class=\"language-text\">Minimal.lf</code> program as follows and store this in a file called <code class=\"language-text\">HelloWorld.lf</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nreactor HelloWorldInside {\n    timer t;\n    reaction(t) {=\n        console.log(\"Hello World.\");\n    =}\n}\nmain reactor HelloWorld {\n    a = new HelloWorldInside();\n}</code></pre></div>\n<p>This can be compiled and run, and its behavior will be identical to the version above.\nBut now, this can be imported into another reactor definition as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nimport HelloWorld.lf;\nmain reactor TwoHelloWorlds {\n    a = new HelloWorldInside();\n    b = new HelloWorldInside();\n}</code></pre></div>\n<p>This will create two instances of the HelloWorld reactor, and when executed, will print “Hello World” twice.</p>\n<p>A more interesting illustration of imports can be found in the <code class=\"language-text\">Import.lf</code> test case in the <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/xtext/org.icyphy.linguafranca/src/test/TS\">test directory</a>.</p>\n<h2 id=\"preamble\" style=\"position:relative;\"><a href=\"#preamble\" aria-label=\"preamble permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preamble</h2>\n<p>Reactions may contain arbitrary TypeScript code, but often it is convenient for that code to invoke node modules or to share function/type/class definitions. For these purposes, a reactor may include a <strong>preamble</strong> section. For example, the following reactor uses Node’s built-in path module to extract the base name from a path:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor Preamble {\n    preamble {=\n        import * as path from 'path';\n    =}\n    reaction (startup) {=\n        var filename = path.basename('/Users/Refsnes/demo_path.js');\n        console.log(filename);\n    =}\n}</code></pre></div>\n<p>This will print:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">demo_path.js</code></pre></div>\n<p>By putting the <code class=\"language-text\">import</code> in the <strong>preamble</strong>, the library becomes available in all reactions of this reactor. Oddly, it also becomes available in all subsequently defined reactors in the same file. It’s a bit more complicated to <a href=\"#using-node-modules\">set up node.js modules from npm</a> that aren’t built-in, but the reaction code to <code class=\"language-text\">import</code> them is the same as what you see here.</p>\n<p>You can also use the preamble to define functions that are shared across reactions and reactors:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main reactor Preamble {\n    preamble {=\n        function add42( i:number) {\n            return i + 42;\n        }\n    =}\n    timer t;\n    reaction(t) {=\n        let s = \"42\";\n        let radix = 10;\n        let i = parseInt(s, radix);\n        console.log(\"Converted string \" + s + \" to number \" + i);\n        console.log(\"42 plus 42 is \" + add42(42));\n    =}\n}</code></pre></div>\n<p>Not surprisingly, this will print:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Converted string 42 to number 42\n42 plus 42 is 84</code></pre></div>\n<h3 id=\"using-node-modules\" style=\"position:relative;\"><a href=\"#using-node-modules\" aria-label=\"using node modules permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Node Modules</h3>\n<p>Installing Node.js modules for TypeScript reactors with <code class=\"language-text\">npm</code> is essentially the same as installing modules for an ordinary Node.js program. First, write a Lingua Franca program (<code class=\"language-text\">Foo.lf</code>) and compile it. It may not type check if if you’re <a href=\"#preamble\">importing modules in the preamble</a> and you haven’t installed the modules yet, but compiling your program will cause the TypeScript code generator to <a href=\"#implementation-details\">produce a project</a> for your program. There should now be a package.json file in the same directory as your .lf file. Open a terminal and navigate to that directory. You can use the standard <a href=\"https://docs.npmjs.com/cli/install\"><code class=\"language-text\">npm install</code></a> command to install modules for your TypeScript reactors.</p>\n<p>The important takeaway here is with the package.json file and the compiled JavaScript in the Foo/dist/ directory, you have a standard Node.js program that executes as such. You can modify and debug it just as you would a Node.js program.</p>\n<h2 id=\"reactions\" style=\"position:relative;\"><a href=\"#reactions\" aria-label=\"reactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reactions</h2>\n<p>Recall that a reaction is defined within a reactor using the following syntax:</p>\n<blockquote>\n<p><strong>reaction</strong>(<em>triggers</em>) <em>uses</em> -> <em>effects</em> {=<br/>\n   … target language code … <br/>\n=}</p>\n</blockquote>\n<p>In this section, we explain how <strong>triggers</strong>, <strong>uses</strong>, and <strong>effects</strong> variables work in the TypeScript target.</p>\n<h3 id=\"types\" style=\"position:relative;\"><a href=\"#types\" aria-label=\"types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types</h3>\n<p>In Lingua Franca, reactor elements like inputs, outputs, actions, parameters, and state are typed using target language types. For the TypeScript target, <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html\">TypeScript types</a> are generally acceptable with two notable exceptions:</p>\n<ul>\n<li>Custom types (and classes) must be defined in the <a href=\"#preamble\">preamble</a> before they may be used.</li>\n<li><code class=\"language-text\">undefined</code> is not a valid type for an input, output, or action. This is because <code class=\"language-text\">undefined</code> is used to designate the absence of an input, output, or action during a reaction.</li>\n</ul>\n<p><strong>To benefit from type checking, you should declare types for your reactor elements.</strong> If a type isn’t declared for a state variable, it is assigned the type <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type\"><code class=\"language-text\">unknown</code></a>. If a type isn’t declared for an input, output, or action, it is assigned the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> type <code class=\"language-text\">Present</code> which is defined as</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export type Present = (number | string | boolean | symbol | object | null);</code></pre></div>\n<h3 id=\"inputs-and-outputs\" style=\"position:relative;\"><a href=\"#inputs-and-outputs\" aria-label=\"inputs and outputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inputs and Outputs</h3>\n<p>In the body of a reaction in the TypeScript target, inputs are simply referred to by name. An input of type <code class=\"language-text\">t</code> is  available within the body of a reaction as a local variable of type <code class=\"language-text\">t | undefined</code>. To determine whether an input is present, test the value of the input against <code class=\"language-text\">undefined</code>. An <code class=\"language-text\">undefined</code> input is not present.</p>\n<p><strong>WARNING</strong> Be sure to use the <code class=\"language-text\">===</code> or <code class=\"language-text\">!==</code> operator and not <code class=\"language-text\">==</code> or <code class=\"language-text\">!=</code> to test against <code class=\"language-text\">undefined</code>. In JavaScript/TypeScript the comparison <code class=\"language-text\">undefined == null</code> yields the value <code class=\"language-text\">true</code>. It may also be tempting to rely upon the falsy evaluation of <code class=\"language-text\">undefined</code> within an <code class=\"language-text\">if</code> statement, but this may introduce bugs. For example a reaction that tests the presence of input <code class=\"language-text\">x</code> with <code class=\"language-text\">if (x) { ... }</code> will not correctly identify potentially valid present values such as <code class=\"language-text\">0</code>, <code class=\"language-text\">false</code>, or <code class=\"language-text\">\"\"</code>.</p>\n<p>For example, the <code class=\"language-text\">Determinism.lf</code> test case in the <a href=\"https://github.com/lf-lang/lingua-franca/tree/master/xtext/org.icyphy.linguafranca/src/test/TS\">test directory</a> includes the following reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Destination {\n    input x:number;\n    input y:number;\n    reaction(x, y) {=\n        let sum = 0;\n        if (x !== undefined) {\n            sum += x;\n        }\n        if (y !== undefined) {\n            sum += y;\n        }\n        console.log(\"Received \" + sum);\n        if (sum != 2) {\n            console.log(\"FAILURE: Expected 2.\");\n            util.failure();\n        }\n    =}\n}</code></pre></div>\n<p>The reaction refers to the inputs <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> by name and tests for their presence by testing <code class=\"language-text\">x</code> and <code class=\"language-text\">y</code> against <code class=\"language-text\">undefined</code>.  If a reaction is triggered by just one input, then normally it is not necessary to test for its presence. It will always be present. However TypeScript’s type system is not smart enough to know such an input will never have type <code class=\"language-text\">undefined</code> if there’s no test against <code class=\"language-text\">undefined</code> within the reaction. An explicit type annotation (for example <code class=\"language-text\">x = x as t;</code> where <code class=\"language-text\">t</code> is the type of the input) may be necessary to avoid type errors from the compiler. In the above example, there are two triggers, so the reaction has no assurance that both will be present.</p>\n<p>Inputs declared in the <strong>uses</strong> part of the reaction do not trigger the reaction. Consider this modification of the above reaction:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reaction(x) y {=\n    let sum = x as number;\n    if (y !== undefined) {\n        sum += y;\n    }\n    console.log(\"Received \" + sum + \".\");\n=}</code></pre></div>\n<p>It is no longer necessary to test for the presence of <code class=\"language-text\">x</code> because that is the only trigger. The input <code class=\"language-text\">y</code>, however, may or may not be present at the logical time that this reaction is triggered. Hence, the code must test for its presence.</p>\n<p>The <strong>effects</strong> portion of the reaction specification can include outputs and actions. Actions will be described below. Like inputs, an output of type <code class=\"language-text\">t</code> is available within the body of a reaction as a local variable of type <code class=\"language-text\">t | undefined</code>. The local variable for each output is initialized to the output’s current value. Outputs are set by assigning a (non-<code class=\"language-text\">undefined</code>) value to its local variable (no changes will be made to an output if it has the value <code class=\"language-text\">undefined</code> at the end of a reaction). Whatever value an output’s local variable has at the end of the reaction will be set to that output. If an output’s local variable has the value <code class=\"language-text\">undefined</code> at the end of the reaction, that output will not be set and connected downstream inputs will be absent. For example, we can further modify the above example as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">output z:number;\nreaction(x) y -> z {=\n    let sum = x as number;\n    if (y !== undefined) {\n        sum += y;\n    }\n    z = sum;\n=}</code></pre></div>\n<p>If an output gets set more than once at any logical time, downstream reactors will see only the <em>final</em> value that is set. Since the order in which reactions of a reactor are invoked at a logical time is deterministic, and whether inputs are present depends only on their timestamps, the final value set for an output will also be deterministic.</p>\n<p>An output may even be set in different reactions of the same reactor at the same logical time. In this case, one reaction may wish to test whether the previously invoked reaction has set the output. It can do that using a <code class=\"language-text\">!== undefined</code> test for that output. For example, the following reactor will always produce the output 42:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor TestForPreviousOutput {\n    output out:number;\n    reaction(startup) -> out {=\n        if (Math.random() > 0.5) {\n            out = 21;\n        }\n    =}\n    reaction(startup) -> out {=\n        let previous_output = out;\n        if (previous_output) {\n            out = 2 * previous_output;\n        } else {\n            out = 42;\n        }\n    =}\n}</code></pre></div>\n<p>The first reaction may or may not set the output to 21. The second reaction doubles the output if it has been previously produced and otherwise produces 42.</p>\n<h3 id=\"using-state-variables\" style=\"position:relative;\"><a href=\"#using-state-variables\" aria-label=\"using state variables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using State Variables</h3>\n<p>A reactor may declare state variables, which become properties of each instance of the reactor. For example, the following reactor will produce the output sequence 0, 1, 2, 3, … :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Count {\n    state count:number(0);\n    output y:number;\n    timer t(0, 100 msec);\n    reaction(t) -> y {=\n        count++;\n        y = count;\n    =}\n}</code></pre></div>\n<p>The declaration on the second line gives the variable the name “count”, declares its type to be <code class=\"language-text\">number</code>, and initializes its value to 0.  The type and initial value can be enclosed in the Typescript-code delimitters <code class=\"language-text\">{= ... =}</code> if they are not simple identifiers, but in this case, that is not necessary.</p>\n<p>In the body of the reaction, the reactor’s state variable is referenced by way of a local variable of the same name. The local variable will contain the current value of the state at the beginning of the reaction. The final value of the local variable will be used to update the state at the end of the reaction.</p>\n<p>It may be tempting to declare state variables in the <strong>preamble</strong>, as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor FlawedCount {\n    preamble {=\n        let count = 0;\n    =}\n    output y:number;\n    timer t(0, 100 msec);\n    reaction(t) -> y {=\n        count++;\n        y = count;\n    =}\n}</code></pre></div>\n<p>This will produce a sequence of integers, but if there is more than one instance of the reactor, those instances will share the same variable count. Hence, <strong>don’t do this</strong>! Sharing variables across instances of reactors violates a basic principle, which is that reactors communicate only by sending messages to one another. Sharing variables will make your program nondeterministic. If you have multiple instances of the above FlawedCount reactor, the outputs produced by each instance will not be predictable, and in an asynchronous implementation, will also not be repeatable.</p>\n<p>A state variable may be a time value, declared as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    state time_value:time(100 msec);</code></pre></div>\n<p>The <code class=\"language-text\">time_value</code> variable will be of type <code class=\"language-text\">TimeValue</code>, which is an object used to represent a time in the TypeScript Target. Refer to the section on <a href=\"#timed-behavior\">timed behavior</a> for more information.</p>\n<p>A state variable can have an array or object value. For example, the following reactor computes the <strong>moving average</strong> of the last four inputs each time it receives an input:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor MovingAverage {\n    state delay_line:{=Array&lt;number>=}({= [0.0, 0.0, 0.0] =});\n    state index:number(0);\n    input x:number;\n    output out:number;\n    reaction(x) -> out {=\n        x = x as number;\n        // Calculate the output.\n        let sum = x;\n        for (let i = 0; i &lt; 3; i++) {\n            sum += delay_line[i];\n        }\n        out = sum/4.0;\n\n        // Insert the input in the delay line.\n        delay_line[index] = x;\n\n        // Update the index for the next input.\n        index++;\n        if (index >= 3) {\n            index = 0;\n        }\n    =}\n}</code></pre></div>\n<p>The second line declares that the type of the state variable is an array of <code class=\"language-text\">number</code>s with the initial value of the array being a three-element array filled with zeros.</p>\n<p>States whose type are objects can similarly be initialized. Declarations can take an object literal as the initial value:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">state myLiteral:{= {foo: number, bar: string} =}({= {foo: 42, bar: \"baz\"} =});</code></pre></div>\n<p>or use <code class=\"language-text\">new</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">state mySet:{=Set&lt;number>=}({= new Set&lt;number>() =});</code></pre></div>\n<h3 id=\"using-parameters\" style=\"position:relative;\"><a href=\"#using-parameters\" aria-label=\"using parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Parameters</h3>\n<p>Reactor parameters are also referenced in the TypeScript code as local variables. The example below modifies the above <code class=\"language-text\">Count</code> reactor so that its stride is a parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nreactor Count(stride:number(1)) {\n    state count:number(0);\n    output y:number;\n    timer t(0, 100 msec);\n    reaction(t) -> y {=\n        y = count;\n        count += stride;\n    =}\n}\nreactor Display {\n    input x:number;\n    reaction(x) {=\n        console.log(\"Received: \" + x + \".\");\n    =}\n}\nmain reactor Stride {\n    c = new Count(stride = 2);\n    d = new Display();\n    c.y -> d.x;\n}</code></pre></div>\n<p>The second line defines the <code class=\"language-text\">stride</code> parameter, gives its type, and gives its initial value. As with state variables, the type and initial value can be enclosed in <code class=\"language-text\">{= ... =}</code> if necessary. The parameter is referenced in the reaction  by referring to the local variable <code class=\"language-text\">stride</code>.</p>\n<p>When the reactor is instantiated, the default parameter value can be overridden. This is done in the above example near the bottom with the line:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    c = new Count(stride = 2);</code></pre></div>\n<p>If there is more than one parameter, use a comma separated list of assignments.</p>\n<p>Parameters in Lingua Franca are immutable. To encourage correct usage, parameter variables within a reaction are  local <code class=\"language-text\">const</code> variables. If you feel tempted to use a mutable parameter, instead try using the parameter to initialize state and modify the state variable instead. This is illustrated below by a further modification to the Stride example where it takes an initial “start” value for count as a second parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nreactor Count(stride:number(1), start:number(5)) {\n    state count:number(start);\n    output y:number;\n    timer t(0, 100 msec);\n    reaction(t) -> y {=\n        y = count;\n        count += stride;\n    =}\n}\nreactor Display {\n    input x:number;\n    reaction(x) {=\n        console.log(\"Received: \" + x + \".\");\n    =}\n}\nmain reactor Stride {\n    c = new Count(stride = 2, start = 10);\n    d = new Display();\n    c.y -> d.x;\n}</code></pre></div>\n<p>Parameters can have array or object values. Here is an example that outputs the elements of an array as a sequence of individual messages:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Source(sequence:{=Array&lt;number>=}({= [0, 1, 2] =})) {\n    output out:number;\n    state count:number(0);\n    logical action next;\n    reaction(startup, next) -> out, next {=\n        out = sequence[count];\n        count++;\n        if (count &lt; sequence.length) {\n            actions.next.schedule(0, null);\n        }\n    =}\n}</code></pre></div>\n<p>The <strong>logical action</strong> named <code class=\"language-text\">next</code> and the <code class=\"language-text\">schedule</code> function are explained below in <a href=\"#Scheduling-Delayed-Reactions\">Scheduling Delayed Reactions</a>, but here they are used simply to repeat the reaction until all elements of the array have been sent.</p>\n<p>Above, the parameter default value is an array with three elements, <code class=\"language-text\">[0, 1, 2]</code>. The syntax for giving this default value is a TypeScript array literal. Since this is TypeScript syntax, not Lingua Franca syntax, the initial value needs to be surrounded with the target code delimiters, <code class=\"language-text\">{= ... =}</code>. The default value can be overridden when instantiating the reactor using a similar syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">s = new Source(sequence={= [1, 2, 3, 4] =});</code></pre></div>\n<p>Both default and overridden values for parameters can also be created with the <code class=\"language-text\">new</code> keyword:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Source(sequence:{=Array&lt;number>=}({= new Array&lt;number>() =})) {</code></pre></div>\n<p>and</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">s = new Source(sequence={= new Array&lt;number() =});</code></pre></div>\n<h3 id=\"sending-and-receiving-custom-types\" style=\"position:relative;\"><a href=\"#sending-and-receiving-custom-types\" aria-label=\"sending and receiving custom types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sending and Receiving Custom Types</h3>\n<p>You can define your own datatypes in TypeScript and send and receive those. Consider the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor CustomType {\n    preamble {=\n        type custom = string | null;\n    =}\n    output out:custom;\n    reaction(startup) -> out {=\n        out = null;\n    =}\n}</code></pre></div>\n<p>The <strong>preamble</strong> code defines a custom union type of <code class=\"language-text\">string</code> and <code class=\"language-text\">null</code>.</p>\n<h2 id=\"timed-behavior\" style=\"position:relative;\"><a href=\"#timed-behavior\" aria-label=\"timed behavior permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Timed Behavior</h2>\n<p>See <a href=\"#summary-of-time-functions\">Summary of Time Functions</a> and <a href=\"#utility-function-reference\">Utility Function Reference</a> for a quick API reference.</p>\n<p>Timers are specified exactly as in the <a href=\"Language-Specification#timer-declaration\">Lingua Franca language specification</a>. When working with time in the TypeScript code body of a reaction, however, you will need to know a bit about its internal representation.</p>\n<p>A <code class=\"language-text\">TimeValue</code> is an class defined in the TypeScript target library file <code class=\"language-text\">time.ts</code> to represent a time instant or interval. For your convenience <code class=\"language-text\">TimeValue</code> and other classes from the <code class=\"language-text\">time.ts</code> library mentioned in these instructions are automatically imported into scope of your reactions. An instant is the number of nanoseconds that have elapsed since January 1, 1970. An interval is the difference between two instants. When an LF program starts executing, logical time is (normally) set to the instant provided by the operating system. (On some embedded platforms without real-time clocks, it will be set instead to zero.)</p>\n<p>Internally a <code class=\"language-text\">TimeValue</code> uses two numbers to represent the time. To prevent overflow (which would occur for time intervals spanning more than 0.29 years if a single JavaScript number, which has 2^53 bits of precision, were to be used), we use <em>two</em> numbers to store a time value. The first number denotes the number of whole seconds in the interval or instant; the second number denotes the remaining number of nanoseconds in the interval or instant. The first number represents the number of seconds, the second number represents the number of nanoseconds. These fields are not accessible to the programmer, instead <code class=\"language-text\">TimeValue</code>s may be manipulated by an <a href=\"#summary-of-time-functions\">API</a> with functions for addition, subtraction, and comparison.</p>\n<p>A reaction can examine the current logical time (which is constant during the execution of the reaction). For example, consider:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor GetTime {\n    timer t(0, 1 sec);\n    reaction(t) {=\n        let logical:TimeValue = util.getCurrentLogicalTime()\n        console.log(\"Logical time is \" + logical + \".\");\n    =}\n}</code></pre></div>\n<p>When executed, you will get something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Logical time is (1584666585 secs; 805146880 nsecs).\nLogical time is (1584666586 secs; 805146880 nsecs).\nLogical time is (1584666587 secs; 805146880 nsecs).\n...</code></pre></div>\n<p>Subsequent values of logical time are printed out in their raw form, of seconds and nanoseconds. If you look closely, you will see that each number is one second larger than the previous number.</p>\n<p>You can also obtain the <em>elapsed</em> logical time since the start of execution, rather than exact logical time:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main reactor GetTime {\n    timer t(0, 1 sec);\n    reaction(t) {=\n        let logical:TimeValue = util.getElapsedLogicalTime()\n        console.log(\"Logical time is \" + logical + \".\");\n    =}\n}</code></pre></div>\n<p>This will produce:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Logical time is (0 secs; 0 nsecs).\nLogical time is (1 secs; 0 nsecs).\nLogical time is (2 secs; 0 nsecs).\n...</code></pre></div>\n<p>You can get physical time, which comes from your platform’s real-time clock:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main reactor GetTime {\n    timer t(0, 1 sec);\n    reaction(t) {=\n        let physical:TimeValue = util.getCurrentPhysicalTime()\n        console.log(\"Physical time is \" + physical + \".\");\n    =}\n}</code></pre></div>\n<p>This will produce something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Physical time is (1584666801 secs; 644171008 nsecs).\nPhysical time is (1584666802 secs; 642269952 nsecs).\nPhysical time is (1584666803 secs; 642278912 nsecs).\n...</code></pre></div>\n<p>Notice that these numbers are increasing by <em>roughly</em> one second each time.</p>\n<p>You can also get <em>elapsed</em> physical time from the start of execution:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main reactor GetTime {\n    timer t(0, 1 sec);\n    reaction(t) {=\n        let physical:TimeValue = util.getElapsedPhysicalTime()\n        console.log(\"Physical time is \" + physical + \".\");\n    =}\n}</code></pre></div>\n<p>This will produce something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Physical time is (0 secs; 2260992 nsecs).\nPhysical time is (1 secs; 166912 nsecs).\nPhysical time is (2 secs; 136960 nsecs).\n...</code></pre></div>\n<p>You can create a <code class=\"language-text\">TimeValue</code> yourself with the <code class=\"language-text\">UnitBasedTimeValue</code> class. <code class=\"language-text\">UnitBasedTimeValue</code> is a subclass of <code class=\"language-text\">TimeValue</code> and can be used wherever you could also use a <code class=\"language-text\">TimeValue</code> directly obtained from one of the <code class=\"language-text\">util</code> functions. A <code class=\"language-text\">UnitBasedTimeValue</code> is constructed with a whole number and a <code class=\"language-text\">TimeUnit</code>. A <code class=\"language-text\">TimeUnit</code> is an enum from the <code class=\"language-text\">time.ts</code> library with convenient labels for common time units. These are nsec, usec, msec, sec (or secs), minute (or minutes), hour (or hours), day (or days), and week (or weeks).</p>\n<p>This reactor has an example of a UnitBasedTimeValue.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main reactor GetTime {\n    timer t(0, 1 sec);\n    reaction(t) {=\n        let myTimeValue:TimeValue = new UnitBasedTimeValue(200, TimeUnit.msec);\n        let logical:TimeValue = util.getCurrentLogicalTime()\n        console.log(\"My custom time value is \" + myTimeValue + \".\");\n    =}</code></pre></div>\n<p>This will produce:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">My custom time value is 200 msec.\nMy custom time value is 200 msec.\nMy custom time value is 200 msec.\n...</code></pre></div>\n<h3 id=\"tags\" style=\"position:relative;\"><a href=\"#tags\" aria-label=\"tags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tags</h3>\n<p>The TypeScript target provides a utility to get the current <code class=\"language-text\">Tag</code> of a reaction. Recall that time in Lingua Franca is superdense and each <code class=\"language-text\">TimeValue </code>is paired with an integer “microstep” index to track the number of iterations at a particular <code class=\"language-text\">TimeValue</code>. A <code class=\"language-text\">Tag</code> is this combination of a TimeValue and a “microstep”. The <code class=\"language-text\">time.ts</code> library provides functions for adding, subtracting, and comparing <code class=\"language-text\">Tag</code>s.</p>\n<p>You can get the current <code class=\"language-text\">Tag</code> in your reactions. This example illustrates tags with a <a href=\"#zero-delay-actions\">Zero-Delay Action</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor GetTime {\n    timer t(0, 1 sec);\n    logical action a;\n    reaction(t) -> a {=\n        let superdense:Tag = util.getCurrentTag();\n        console.log(\"First iteration - the tag is: \" + superdense + \".\");\n        actions.a.schedule(0, null);\n    =}\n    reaction(a) {=\n        let superdense:Tag = util.getCurrentTag();\n        let timePart:TimeValue = superdense.time;\n        let microstepPart:number = superdense.microstep;\n        console.log(\"Second iteration - the time part of the tag is:  \" + timePart + \".\");\n        console.log(\"Second iteration - the microstep part of the tag is:  \" + microstepPart + \".\");\n    =}\n}</code></pre></div>\n<p>This will produce:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">First iteration - the tag is: ((1584669987 secs; 740464896 nsecs), 0).\nSecond iteration - the time part of the tag is:  (1584669987 secs; 740464896 nsecs).\nSecond iteration - the microstep part of the tag is:  1.\nFirst iteration - the tag is: ((1584669988 secs; 740464896 nsecs), 0).\nSecond iteration - the time part of the tag is:  (1584669988 secs; 740464896 nsecs).\nSecond iteration - the microstep part of the tag is:  1.\nFirst iteration - the tag is: ((1584669989 secs; 740464896 nsecs), 0).\nSecond iteration - the time part of the tag is:  (1584669989 secs; 740464896 nsecs).\nSecond iteration - the microstep part of the tag is:  1.\n...</code></pre></div>\n<p>The first reaction prints the “First iteration” part of the output at microstep 0. The second reaction occurs one microstep later (explained in <a href=\"#scheduling-delayed-reactions\">Scheduling Delayed Reactions</a>) and illustrates how to split a <code class=\"language-text\">Tag</code> into its constituent <code class=\"language-text\">TimeValue</code> and microstep.</p>\n<h3 id=\"scheduling-delayed-reactions\" style=\"position:relative;\"><a href=\"#scheduling-delayed-reactions\" aria-label=\"scheduling delayed reactions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduling Delayed Reactions</h3>\n<p>Each action listed as an <strong>effect</strong> for a reaction is available as a schedulable object in the reaction body via the <code class=\"language-text\">actions</code> object. The TypeScript target provides a special <code class=\"language-text\">actions</code> object with a property for each schedulable action. Schedulable actions (of type <code class=\"language-text\">t</code>) have the object method:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">schedule: (extraDelay: TimeValue | 0, value?: T) => void;</code></pre></div>\n<p>The first argument can either be the literal 0 (shorthand for 0 seconds) or a <code class=\"language-text\">TimeValue</code>/<code class=\"language-text\">UnitBasedTimeValue</code>. The second argument is the value for the action. Consider the following reactor:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nreactor Schedule {\n    input x:number;\n    logical action a;\n    reaction(x) -> a {=\n        actions.a.schedule(new UnitBasedTimeValue(200, TimeUnit.msec), null);\n    =}\n    reaction(a) {=\n        let elapsedTime = util.getElapsedLogicalTime();\n        console.log(\"Action triggered at logical time \" + elapsedTime + \" after start.\");\n    =}\n}</code></pre></div>\n<p>When this reactor receives an input <code class=\"language-text\">x</code>, it calls <code class=\"language-text\">schedule()</code> on the action <code class=\"language-text\">a</code>, so it will be triggered at the logical time offset (200 msec) with a null value. The action <code class=\"language-text\">a</code> will be triggered at a logical time 200 milliseconds after the arrival of input <code class=\"language-text\">x</code>. This will trigger the second reaction, which will use the <code class=\"language-text\">util.getElapsedLogicalTime()</code> function to determine how much logical time has elapsed since the start of execution. The third argument to the <code class=\"language-text\">schedule()</code> function is a <strong>value</strong>, data that can be carried by the action, which is explained below. In the above example, there is no value.</p>\n<h3 id=\"zero-delay-actions\" style=\"position:relative;\"><a href=\"#zero-delay-actions\" aria-label=\"zero delay actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Zero-Delay Actions</h3>\n<p>If the specified delay in a <code class=\"language-text\">schedule()</code> call is zero, then the action <code class=\"language-text\">a</code> will be triggered one <strong>microstep</strong> later in <strong>superdense time</strong> (see <a href=\"language-specification#superdense-time\">Superdense Time</a>). Hence, if the input <code class=\"language-text\">x</code> arrives at metric logical time <em>t</em>, and you call <code class=\"language-text\">schedule()</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">actions.a.schedule(0);</code></pre></div>\n<p>then when a reaction to <code class=\"language-text\">a</code> is triggered, the input <code class=\"language-text\">x</code> will be absent (it was present at the <em>previous</em> microstep). The reaction to <code class=\"language-text\">x</code> and the reaction to <code class=\"language-text\">a</code> occur at the same metric time <em>t</em>, but separated by one microstep, so these two reactions are <em>not</em> logically simultaneous. These reactions execute with different <a href=\"#tags\">Tags</a>.</p>\n<h2 id=\"actions-with-values\" style=\"position:relative;\"><a href=\"#actions-with-values\" aria-label=\"actions with values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actions With Values</h2>\n<p>If an action is declared with a data type, then it can carry a <strong>value</strong>, a data value that becomes available to any reaction triggered by the action. The most common use of this is to implement a logical delay, where a value provided at an input is produced on an output with a larger logical timestamp. To accomplish that, it is much easier to use the <strong>after</strong> keyword on a connection between reactors. Nevertheless, in this section, we explain how to directly use actions with value. In fact, the <strong>after</strong> keyword is implemented as described below.</p>\n<p>If you are familiar with other targets (like C) you may notice it is much easier to schedule actions with values in TypeScript because of TypeScript/JavaScript’s garbage collected memory management. The following example implements a logical delay using an action with a value.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reactor Delay(delay:time(100 msec)) {\n    input x:number;\n    output out:number;\n    logical action a:number;\n    reaction(x) -> a {=\n        actions.a.schedule(delay, x as number);\n    =}\n    reaction(a) -> out {=\n        if (a !== null){\n            out = a as number\n        }\n    =}\n}</code></pre></div>\n<p>The action <code class=\"language-text\">a</code> is specified with a type <code class=\"language-text\">number</code>. The first reaction declares <code class=\"language-text\">a</code> as its effect. This declaration makes it possible for the reaction to schedule a future triggering of <code class=\"language-text\">a</code>. It’s necessary to explicitly annotate the type of <code class=\"language-text\">x</code> as a number in the schedule function because TypeScript doesn’t know the only trigger of a reaction must be present in that reaction.</p>\n<p>The second reaction declares that it is triggered by <code class=\"language-text\">a</code> and has effect <code class=\"language-text\">out</code>. When a reaction triggers or uses an action the value of that action is made available within the reaction as a local variable with the name of the action. This variable will take on the value of the action and it will have the value <code class=\"language-text\">undefined</code> if that action is absent because it was not scheduled for this reaction.</p>\n<p>The local variable cannot be used directly to schedule an action. As described above, an action <code class=\"language-text\">a</code> can only be scheduled in a reaction when it is 1) declared as an effect and 2) referenced through a property of the <code class=\"language-text\">actions</code> object.  The reason for this implementation is that <code class=\"language-text\">actions.a</code> refers to the <strong>action</strong>, not its value, and it is possible to use both the action and the value in the same reaction. For example, the following reaction will produce a counting sequence after it is triggered the first time:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">reaction(a) -> out, a {=\n    if (a !== null) {\n        a = a as number;\n        out = a;\n        let newValue = a++;\n        actions.a.schedule(delay, newValue);\n    }\n=}</code></pre></div>\n<h2 id=\"stopping-execution\" style=\"position:relative;\"><a href=\"#stopping-execution\" aria-label=\"stopping execution permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stopping Execution</h2>\n<p>A reaction may request that the execution stop by calling the function <code class=\"language-text\">util.requestShutdown()</code> which takes no arguments. Execution will not stop immediately when this function is called; all events with the current tag will finish processing and execution will continue for one more microstep to give shutdown triggers a chance to execute. After this additional step, execution will terminate.</p>\n<h2 id=\"implementation-details\" style=\"position:relative;\"><a href=\"#implementation-details\" aria-label=\"implementation details permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Implementation Details</h2>\n<p>When a TypeScript reactor is compiled, the generated code is placed inside a project directory. This is because there are two steps of compilation. First, the Lingua Franca compiler generates a TypeScript project from the TypeScript reactor code. Second, the Lingua Franca compiler runs a TypeScript compiler on the generated TypeScript project to produce executable JavaScript. This is illustrated below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Lingua Franca (.lf) ==> TypeScript (.ts) ==> JavaScript (.js)</code></pre></div>\n<p>Assuming the directory containing our Lingua Franca file <code class=\"language-text\">Foo.lf</code> is named <code class=\"language-text\">TS</code>, the compiler will generate the following:</p>\n<ol>\n<li>TS/package.json</li>\n<li>TS/node_modules</li>\n<li>TS/Foo/tsconfig.json</li>\n<li>TS/Foo/babel.config.js</li>\n<li>TS/Foo/src/</li>\n<li>TS/Foo/dist/</li>\n</ol>\n<p>Items 1, 3, and 4 are configuration files for the generated project. Item 2 is a node_modules directory with contents specified by item 1. Item 5 is the directory for generated TypeScript code. Item 6 is the directory for compiled JavaScript code. In addition to the generated code for your Lingua Franca program, items 5 and 6 include libraries from the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> submodule.</p>\n<p>The Lingua Franca compiler automatically invokes other programs as it compiles a Lingua Franca (.lf) file to a Node.js executable JavaScript (.js) file. The files package.json, babel.config.js, and tsconfig.json are used to configure the behavior of those other programs. Whenever you compile a .lf file for the first time, the Lingua Franca compiler will copy default versions of these configuration files into the new project so the other programs can run. <strong>The Lingua Franca compiler will only copy a default configuration file into a project if that file is not already present in the generated project.</strong> This means you, the reactor programmer, may safely modify these configuration files to control the finer points of compilation. Beware, other generated files in the project’s src and dist directories may be overwritten by the compiler.</p>\n<h3 id=\"packagejson\" style=\"position:relative;\"><a href=\"#packagejson\" aria-label=\"packagejson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>package.json</h3>\n<p>Node.js uses a <a href=\"https://nodejs.org/en/knowledge/getting-started/npm/what-is-the-file-package-json/\">package.json</a> file to describe metadata relevant to a Node project. This includes a list of project dependencies (i.e. modules) used by the project. When the Lingua Franca compiler copies a default package.json file into a Lingua Franca project that doesn’t already have a package.json, the compiler runs the command <code class=\"language-text\">npm install</code> to create a node_modules directory. The default package.json only lists dependencies for the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> submodule. <a href=\"#using-node-modules\">Follow these instructions</a> to modify package.json if you want to use other Node modules in your reactors.</p>\n<h3 id=\"tsconfigjson\" style=\"position:relative;\"><a href=\"#tsconfigjson\" aria-label=\"tsconfigjson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tsconfig.json</h3>\n<p>After generating a TypeScript program from a .lf file, the Lingua Franca compiler uses the TypeScript compiler <code class=\"language-text\">tsc</code> to run a type check. The behavior of <code class=\"language-text\">tsc</code> is configured by the <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">tsconfig.json</a> file. You probably won’t need to modify tsconfig.json, but you can if you know what you’re doing.</p>\n<h3 id=\"babelconfigjs\" style=\"position:relative;\"><a href=\"#babelconfigjs\" aria-label=\"babelconfigjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>babel.config.js</h3>\n<p>If the <code class=\"language-text\">tsc</code> type check was successful, the Lingua Franca compiler uses <code class=\"language-text\">babel</code> to compile the generated TypeScript code into JavaScript. (This <a href=\"https://iamturns.com/typescript-babel/\">blog post</a> articulates the advantages of using <code class=\"language-text\">babel</code> over <code class=\"language-text\">tsc</code> to generate JavaScript.) There are many different flavors of JavaScript and the <a href=\"https://babeljs.io/docs/en/configuration\">babel.config.js</a> file specifies exactly what <code class=\"language-text\">babel</code> should generate. This is the file to edit if you want the Lingua Franca compiler to produce a different version of JavaScript as its final output.</p>\n<h2 id=\"debugging-type-errors\" style=\"position:relative;\"><a href=\"#debugging-type-errors\" aria-label=\"debugging type errors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Debugging Type Errors</h2>\n<p>Let’s take the <a href=\"#a-minimal-example\">minimal reactor example</a>, and intentionally break it by adding a type error into the reaction.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor ReactionTypeError {\n    timer t;\n    reaction(t) {=\n        let foo:number = \"THIS IS NOT A NUMBER\";\n        console.log(\"Hello World.\");\n    =}\n}</code></pre></div>\n<p>This reactor will not compile, and should you attempt to compile it you will get an output from the compiler which looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">--- Standard output from command:\nsrc/ReactionTypeError.ts(23,25): error TS2322: Type '\"THIS IS NOT A NUMBER\"' is not assignable to type 'number'.\n\n--- End of standard output.</code></pre></div>\n<p>In particular the output</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/ReactionTypeError.ts(23,25): error TS2322: Type '\"THIS IS NOT A NUMBER\"' is not assignable to type 'number'.</code></pre></div>\n<p>identifies the problem: surprisingly, the string <code class=\"language-text\">\"THIS IS NOT A NUMBER\"</code> is not a number. However the line information <code class=\"language-text\">(23,25)</code> is a little confusing because it points to the location of the type error <strong>in the generated</strong> .ts file <code class=\"language-text\">ReactionTypeError/src/ReactionTypeError.ts</code> not in the original .lf file <code class=\"language-text\">ReactionTypeError.lf</code>. The .ts files produced by the TypeScript code generator are quite readable if you are familiar with the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> submodule, but even if you aren’t familiar it is not too difficult to track down the problem. Just open <code class=\"language-text\">ReactionTypeError/src/ReactionTypeError.ts</code> in your favorite text editor (we recommend <a href=\"https://code.visualstudio.com/docs/languages/typescript\">Visual Studio</a> for its excellent TypeScript integration) and look at line 23.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">14        this.addReaction(\n15            new Triggers(this.t),\n16            new Args(this.t),\n17            function (this, __t: Readable&lt;Tag>) {\n18                // =============== START react prologue\n19                const util = this.util;\n20                let t = __t.get();\n21                // =============== END react prologue\n22                try {\n23                    let foo:number = \"THIS IS NOT A NUMBER\";\n24                    console.log(\"Hello World.\");\n25                } finally {\n26                    // =============== START react epilogue\n27                    \n28                    // =============== END react epilogue\n29                }\n30            }\n31        );</code></pre></div>\n<p>There (inside the try block) we can find the problematic reaction code. <em>Reaction code is copied verbatim into generated .ts files</em>.</p>\n<p>It can be a bit harder to interpret type errors outside of reaction code, but most type error messages are still relatively clear. For example if you attempt to connect a reactor output to an incompatibly typed input like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target TypeScript;\nmain reactor ConnectionError {\n    s = new Sender();\n    r = new Receiver();\n    s.foo -> r.bar;\n}\nreactor Sender {\n    output foo:number;\n}\nreactor Receiver {\n    input bar:string;\n}</code></pre></div>\n<p>you should get an error like</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">--- Standard output from command:\nsrc/InputTypeError.ts(36,23): error TS2345: Argument of type 'OutPort&lt;number>' is not assignable to parameter of type 'Port&lt;string>'.\n  Types of property 'value' are incompatible.\n    Type 'number | undefined' is not assignable to type 'string | undefined'.\n      Type 'number' is not assignable to type 'string | undefined'.\n\n--- End of standard output.</code></pre></div>\n<p>The key message being <code class=\"language-text\">Argument of type 'OutPort&lt;number>' is not assignable to parameter of type 'Port&lt;string>'</code>.</p>\n<p>One last tip: if you attempt to reference a port, action, timer etc. named <code class=\"language-text\">foo</code> that isn’t declared in the triggers, uses, or effects declaration of the reaction, you will get the error <code class=\"language-text\">Cannot find name 'foo'</code> in the reaction body.</p>\n<h2 id=\"utility-function-reference\" style=\"position:relative;\"><a href=\"#utility-function-reference\" aria-label=\"utility function reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Utility Function Reference</h2>\n<p>These utility functions may be called within a TypeScript reaction:</p>\n<p><code class=\"language-text\">util.requestShutdown(): void</code> Ends execution after one microstep. See <a href=\"#stopping-execution\">Stopping Execution</a>.</p>\n<p><code class=\"language-text\">util.getCurrentTag(): Tag</code> Gets the current (logical) tag. See <a href=\"#tags\">Tags</a>.</p>\n<p><code class=\"language-text\">util.getCurrentLogicalTime(): TimeValue</code> Gets the current logical TimeValue. See <a href=\"#timed-behavior\">Time</a>.</p>\n<p><code class=\"language-text\">util.getCurrentPhysicalTime(): TimeValue</code> Gets the current physical TimeValue. See <a href=\"#timed-behavior\">Time</a>.</p>\n<p><code class=\"language-text\">util.getElapsedLogicalTime(): TimeValue</code> Gets the elapsed logical TimeValue from execution start. See <a href=\"#timed-behavior\">Time</a>.</p>\n<p><code class=\"language-text\">util.getElapsedPhysicalTime(): TimeValue</code> Gets the elapsed physical TimeValue from execution start. See <a href=\"#timed-behavior\">Time</a>.</p>\n<p><code class=\"language-text\">util.success(): void</code> Invokes the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> App’s default success callback. FIXME: Currently doesn’t do anything in Lingua Franca.</p>\n<p><code class=\"language-text\">util.failure(): void</code> Invokes the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a> App’s default failure callback. Throws an error.</p>\n<h2 id=\"summary-of-time-functions\" style=\"position:relative;\"><a href=\"#summary-of-time-functions\" aria-label=\"summary of time functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary of Time Functions</h2>\n<p>See <a href=\"#timed-behavior\">Time</a>. These time functions are defined in the <a href=\"https://github.com/lf-lang/reactor-ts/blob/master/src/core/time.ts\">time.ts</a> library of <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a>.</p>\n<p><code class=\"language-text\">UnitBasedTimeValue(value: number, unit:TimeUnit)</code> Constructor for <code class=\"language-text\">UnitBasedTimeValue</code>, a programmer-friendly subclass of TimeValue. Use a number and a <code class=\"language-text\">TimeUnit</code> enum.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">enum TimeUnit {\n    nsec,\n    usec,\n    msec,\n    sec,\n    secs,\n    minute,\n    minutes,\n    hour,\n    hours,\n    day,\n    days,\n    week,\n    weeks\n}</code></pre></div>\n<p><code class=\"language-text\">TimeValue.add(other: TimeValue): TimeValue</code> Adds <code class=\"language-text\">this</code> to <code class=\"language-text\">other</code>.</p>\n<p><code class=\"language-text\">TimeValue.subtract(other: TimeValue): TimeValue</code> Subtracts <code class=\"language-text\">other</code> from <code class=\"language-text\">this</code>. A negative result is an error.</p>\n<p><code class=\"language-text\">TimeValue.difference(other: TimeValue): TimeValue</code> Obtain absolute value of <code class=\"language-text\">other</code> minus <code class=\"language-text\">this</code>.</p>\n<p><code class=\"language-text\">TimeValue.isEqualTo(other: TimeValue): boolean</code> Returns true if <code class=\"language-text\">this</code> and <code class=\"language-text\">other</code> represents the same TimeValue. Otherwise false.</p>\n<p><code class=\"language-text\">TimeValue.isZero(): boolean</code> Returns true if <code class=\"language-text\">this</code> represents a 0 TimeValue.</p>\n<p><code class=\"language-text\">TimeValue.isEarlierThan(other: TimeValue): boolean</code> Returns true if <code class=\"language-text\">this</code> &#x3C; <code class=\"language-text\">other</code>. Otherwise false.</p>\n<p><code class=\"language-text\">Tag.isSmallerThan(other: Tag): boolean</code> Returns true if <code class=\"language-text\">this</code> &#x3C; <code class=\"language-text\">other</code>. Otherwise false.</p>\n<p><code class=\"language-text\">Tag.isSimultaneousWith(other: Tag): boolean</code> Returns true if <code class=\"language-text\">this</code> and <code class=\"language-text\">other</code> represents the same Tag. Otherwise false.</p>\n<p><code class=\"language-text\">Tag.getLaterTag(delay: TimeValue): Tag</code> Returns a tag with the time part of this TimeValue incremented by delay.</p>\n<p><code class=\"language-text\">Tag.getMicroStepLater(): Tag</code> Returns a tag with the microstep part of this TimeValue incremented by 1.</p>\n<p><code class=\"language-text\">getTimeDifference(other: Tag): TimeValue</code> Returns a TimeValue  that represents the absolute (i.e., positive) time difference between <code class=\"language-text\">this</code> and <code class=\"language-text\">other</code>.</p>\n<h2 id=\"building-reactor-ts-documentation\" style=\"position:relative;\"><a href=\"#building-reactor-ts-documentation\" aria-label=\"building reactor ts documentation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building Reactor-ts Documentation</h2>\n<p>FIXME: Host these docs somewhere.</p>\n<p>To build and view proper documentation for <code class=\"language-text\">time.ts</code> (and other reactor-ts libraries), install <a href=\"https://typedoc.org/\">typedoc</a> and run</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">typedoc --out docs src</code></pre></div>\n<p>from the root of the <a href=\"https://github.com/lf-lang/reactor-ts\">reactor-ts</a>. You probably already have the reactor-ts submodule at</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">lingua-franca/xtext/org.icyphy.linguafranca/src/lib/TS/reactor-ts/</code></pre></div>\n<p>You should see an output like.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Using TypeScript 3.8.3 from /usr/local/lib/node_modules/typescript/lib\nRendering [========================================] 100%\n\nDocumentation generated at /Users/&lt;username>/git/lingua-franca/xtext/org.icyphy.linguafranca/src/lib/TS/reactor-ts/docs</code></pre></div>\n<p>Open that path in a browser with <code class=\"language-text\">/index.html</code> appended to the end like</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/Users/&lt;username>/git/lingua-franca/xtext/org.icyphy.linguafranca/src/lib/TS/reactor-ts/docs/index.html</code></pre></div>\n<p>to navigate the docs.</p>","headings":[{"value":"Setup","depth":2},{"value":"A Minimal Example","depth":2},{"value":"The TypeScript Target Specification","depth":2},{"value":"Command-Line Arguments","depth":2},{"value":"Custom Command-Line Arguments","depth":3},{"value":"Additional types for Custom Command-Line Arguments","depth":3},{"value":"Imports","depth":2},{"value":"Preamble","depth":2},{"value":"Using Node Modules","depth":3},{"value":"Reactions","depth":2},{"value":"Types","depth":3},{"value":"Inputs and Outputs","depth":3},{"value":"Using State Variables","depth":3},{"value":"Using Parameters","depth":3},{"value":"Sending and Receiving Custom Types","depth":3},{"value":"Timed Behavior","depth":2},{"value":"Tags","depth":3},{"value":"Scheduling Delayed Reactions","depth":3},{"value":"Zero-Delay Actions","depth":3},{"value":"Actions With Values","depth":2},{"value":"Stopping Execution","depth":2},{"value":"Implementation Details","depth":2},{"value":"package.json","depth":3},{"value":"tsconfig.json","depth":3},{"value":"babel.config.js","depth":3},{"value":"Debugging Type Errors","depth":2},{"value":"Utility Function Reference","depth":2},{"value":"Summary of Time Functions","depth":2},{"value":"Building Reactor-ts Documentation","depth":2}],"frontmatter":{"permalink":"/docs/handbook/write-reactor-ts","title":"Writing Reactors in TypeScript","oneline":"Writing Reactors in TypeScript.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Future Proof Package/Import System","oneline":"A future proof package and import system","permalink":"/docs/handbook/proof-import"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Future Proof Package/Import System","oneline":"A future proof package and import system","permalink":"/docs/handbook/proof-import"}}}},"pageContext":{"slug":"/docs/handbook/write-reactor-ts","repoPath":"/packages/documentation/copy/en/topics/Writing Reactors in TypeScript.md","lang":"en","modifiedTime":"2022-04-17T15:37:44.767Z"}},
    "staticQueryHashes": []}