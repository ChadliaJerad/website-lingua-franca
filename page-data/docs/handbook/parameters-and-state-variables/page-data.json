{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/parameters-and-state-variables",
    "result": {"data":{"markdownRemark":{"id":"164c0391-60d3-5e59-b35f-acee2d40298e","excerpt":"$page-showing-target$ Parameter Declaration A reactor class definition can parameterized as follows: Each parameter has a type annotation, written , where  has…","html":"<p>$page-showing-target$</p>\n<h2 id=\"parameter-declaration\" style=\"position:relative;\"><a href=\"#parameter-declaration\" aria-label=\"parameter declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameter Declaration</h2>\n<p>A reactor class definition can parameterized as follows:</p>\n<div class=\"lf-c lf-cpp lf-ts lf-rs\">\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token operator\">&lt;</span>class<span class=\"token operator\">-</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>param<span class=\"token operator\">-</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>type<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>expr<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Each parameter has a <em>type annotation</em>, written <code class=\"language-text\">:&lt;type></code>, where <code class=\"language-text\">&lt;type></code> has one of the following forms:</p>\n<ul>\n<li>An identifier, such as <code class=\"language-text\">int</code><span class=\"lf-cpp\">, possibly followed by a type argument, e.g. <code class=\"language-text\">vector&lt;int></code></span>.</li>\n<li>An array type <code class=\"language-text\">type[]</code><span class=\"lf-c lf-cpp lf-rs\"> and <code class=\"language-text\">type[integer]</code></span>.</li>\n<li>The keyword $time$, which designates a time value.</li>\n<li>A code block delimitted by <code class=\"language-text\">{= ... =}</code>, where the contents is any valid type in the target language.</li>\n</ul>\n</div>\n<div class=\"lf-c lf-cpp\">\n<ul>\n<li>A pointer type, such as <code class=\"language-text\">int*</code>.</li>\n</ul>\n</div>\n<div class=\"lf-c\">\n<p>Types ending with a <code class=\"language-text\">*</code> are treated specially by the C target. See the <a href=\"/docs/handbook/target-language-reference\">Target Language Reference</a>.</p>\n<p>To use strings conveniently in the C target, the “type” <code class=\"language-text\">string</code> is an alias for <code class=\"language-text\">{=const char*=}</code>.</p>\n</div>\n<div class=\"lf-ts\">\n<p>For example, <code class=\"language-text\">{= int | null =}</code> defines nullable integer type in TypeScript.</p>\n</div>\n<div class=\"lf-py\">\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\"><span class=\"token lf_keywords\">reactor</span> <span class=\"token operator\">&lt;</span>class<span class=\"token operator\">-</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>param<span class=\"token operator\">-</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>expr<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</div>\n<p>Each parameter must have a <em>default value</em>, written <code class=\"language-text\">(&lt;expr>)</code>. An expression may be a numeric contant, a string enclosed in quotation marks, a time value such as <code class=\"language-text\">10 msec</code>, a list of values, or target-language code enclosed in <code class=\"language-text\">{= ... =}</code>, for example. See <a href=\"/docs/handbook/expressions\">Expressions</a> for full details on what expressions are valid.</p>\n<p>For example, the <code class=\"language-text\">Double</code> reactor on the <a href=\"/docs/handbook/inputs-and-outputs\">previous page</a> can be replaced with a more general parameterized reactor <code class=\"language-text\">Scale</code> as follows:</p>\n<p>$start(Scale)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Scale</span><span class=\"token punctuation\">(</span>factor<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x<span class=\"token operator\">-></span>value <span class=\"token operator\">*</span> self<span class=\"token operator\">-></span>factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Scale</span><span class=\"token punctuation\">(</span>factor<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        y<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>factor <span class=\"token operator\">*</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Scale<span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        y<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>value <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>factor<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token lf_keywords\">target</span> TypeScript<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Scale</span><span class=\"token punctuation\">(</span>factor<span class=\"token operator\">:</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> y <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> factor\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token lf_keywords\">target</span> <span class=\"token class-name\">Rust</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token class-name\">Scale</span><span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> <span class=\"token function\">factor</span><span class=\"token punctuation\">(</span>factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> x <span class=\"token operator\">*</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>factor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>$end(Scale)$</p>\n<p>This reactor, given any input event <code class=\"language-text\">x</code> will produce an output <code class=\"language-text\">y</code> with value equal to the input scaled by the <code class=\"language-text\">factor</code> parameter. The default value of the <code class=\"language-text\">factor</code> parameter is 2, but this can be changed when the <code class=\"language-text\">Scale</code> reactor is instantiated.</p>\n<p>Notice how, within the body of a reaction, the code accesses the parameter value. This is different for each target language. <span class=\"lf-c\">In the C target, a <code class=\"language-text\">self</code> struct is provided that contains the parameter values.</span></p>\n<h2 id=\"state-declaration\" style=\"position:relative;\"><a href=\"#state-declaration\" aria-label=\"state declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>State Declaration</h2>\n<p>A reactor declares a state variable as follows:</p>\n<div class=\"lf-c lf-cpp lf-ts lf-rs\">\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">state</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>type<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>value<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The type can any of the same forms as for a parameter.</p>\n</div>\n<div class=\"lf-py\">\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">state</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>value<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</div>\n<p>The <code class=\"language-text\">&lt;value></code> is an initial value and, like parameter values, can be given as an <a href=\"/docs/handbook/expressions\">expression</a> or target language code with delimiters <code class=\"language-text\">{= ... =}</code>. The initial value can also be given as a parameter name. The value can be accessed and modified in a target-language-dependent way as illustrated by the following example:</p>\n<p>$start(Count)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Count <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">reactor</span> Count <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        y<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Count <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> t<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        y<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token constant\">WARNING</span><span class=\"token operator\">:</span> No source file found<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>ts<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>Count<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token lf_keywords\">target</span> <span class=\"token class-name\">Rust</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token class-name\">Count</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> count<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>$end(Count)$</p>\n<p>This reactor has an integer state variable named <code class=\"language-text\">count</code>, and each time its reaction is invoked, it outputs the value of that state variable and increments it. The reaction is triggered by a $timer$, discussed in the next section.</p>","headings":[{"value":"Parameter Declaration","depth":2},{"value":"State Declaration","depth":2}],"frontmatter":{"permalink":"/docs/handbook/parameters-and-state-variables","title":"Parameters and State Variables","oneline":"Parameters and state variables in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Inputs and Outputs","oneline":"Inputs, outputs, and reactions in Lingua Franca.","permalink":"/docs/handbook/inputs-and-outputs"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Time and Timers","oneline":"Time and timers in Lingua Franca.","permalink":"/docs/handbook/time-and-timers"}}}},"pageContext":{"id":"1-parameters-and-state-variables","slug":"/docs/handbook/parameters-and-state-variables","repoPath":"/packages/documentation/copy/en/topics/Parameters and State Variables.md","previousID":"5d1875d0-58bf-5599-bfed-01fbe73bd688","nextID":"05e1d427-98f3-543e-8306-45b727f31f46","lang":"en","modifiedTime":"2022-04-27T14:07:54.236Z"}},
    "staticQueryHashes": []}