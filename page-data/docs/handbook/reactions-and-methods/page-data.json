{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/reactions-and-methods",
    "result": {"data":{"markdownRemark":{"id":"b6dc71c4-2139-5c7e-807c-15e9021ef11f","excerpt":"Reaction Order A reactor may have multiple reactions, and more than one reaction may be enabled at any given tag. In Lingua Franca semantics, if two or moreâ€¦","html":"<h2 id=\"reaction-order\" style=\"position:relative;\"><a href=\"#reaction-order\" aria-label=\"reaction order permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reaction Order</h2>\n<p>A reactor may have multiple reactions, and more than one reaction may be enabled at any given tag. In Lingua Franca semantics, if two or more reactions of the same reactor are <strong>simultaneously enabled</strong>, then they will be invoked sequentially in the order in which they are declared. More strongly, the reactions of a reactor are <strong>mutually exclusive</strong> and are invoked in tag order primarily and declaration order secondarily. Consider the following example:</p>\n<p>$start(Alignment)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token lf_keywords\">secs</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Alignment <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> s<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t4</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        self<span class=\"token operator\">-></span>s <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        self<span class=\"token operator\">-></span>s <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s = %d\\n\"</span><span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">3</span>s\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Alignment <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> s<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span>ms<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span>ms<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t4</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span>ms<span class=\"token punctuation\">,</span> <span class=\"token number\">400</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        s <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        s <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"s = \"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token lf_keywords\">secs</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Alignment <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> s<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> t1<span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> t2<span class=\"token punctuation\">(</span><span class=\"token number\">200</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> t4<span class=\"token punctuation\">(</span><span class=\"token number\">400</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        self<span class=\"token punctuation\">.</span>s <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        self<span class=\"token punctuation\">.</span>s <span class=\"token operator\">-=</span> <span class=\"token number\">2</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"s = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token lf_keywords\">target</span> TypeScript <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token operator\">:</span> 3s\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Alignment <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> s<span class=\"token operator\">:</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span>100ms<span class=\"token punctuation\">,</span> 100ms<span class=\"token punctuation\">)</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span>200ms<span class=\"token punctuation\">,</span> 200ms<span class=\"token punctuation\">)</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t4</span><span class=\"token punctuation\">(</span>400ms<span class=\"token punctuation\">,</span> 400ms<span class=\"token punctuation\">)</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        s <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        s <span class=\"token operator\">-=</span> <span class=\"token number\">2</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">s = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>s<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token lf_keywords\">target</span> <span class=\"token class-name\">Rust</span> <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token lf_keywords\">secs</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token class-name\">Alignment</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> s<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t4</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s = {}\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>$end(Alignment)$</p>\n<p>Every 100 ms, this increments the state variable <code class=\"language-text\">s</code> by 1, every 200 ms, it decrements <code class=\"language-text\">s</code> by 2, and every 400 ms, it prints the value of <code class=\"language-text\">s</code>. When these reactions align, they are invoked in declaration order, and, as a result, the printed value of <code class=\"language-text\">s</code> is always 0.</p>\n<h2 id=\"overwriting-outputs\" style=\"position:relative;\"><a href=\"#overwriting-outputs\" aria-label=\"overwriting outputs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overwriting Outputs</h2>\n<p>Just as the reactions of the <code class=\"language-text\">Alignment</code> reactor overwrite the state variable <code class=\"language-text\">s</code>, logically simultaneous reactions can overwrite outputs. Consider the following example:</p>\n<p>$start(Overwriting)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Overwriting <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> s<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        self<span class=\"token operator\">-></span>s <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        self<span class=\"token operator\">-></span>s <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">SET</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> self<span class=\"token operator\">-></span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Overwriting <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> s<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span>ms<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span>ms<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        s <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        y<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        s <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        y<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Overwriting <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> s<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> t1<span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> t2<span class=\"token punctuation\">(</span><span class=\"token number\">200</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        self<span class=\"token punctuation\">.</span>s <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        y<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        self<span class=\"token punctuation\">.</span>s <span class=\"token operator\">-=</span> <span class=\"token number\">2</span>\n        y<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token lf_keywords\">target</span> TypeScript\n<span class=\"token lf_keywords\">reactor</span> Overwriting <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span>\n    <span class=\"token lf_keywords\">state</span> s<span class=\"token operator\">:</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        s <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        y <span class=\"token operator\">=</span> s\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        s <span class=\"token operator\">-=</span> <span class=\"token number\">2</span>\n        y <span class=\"token operator\">=</span> s\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token lf_keywords\">target</span> <span class=\"token class-name\">Rust</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token class-name\">Overwriting</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">state</span> s<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t1</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">timer</span> <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> y <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">-=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>$end(Overwriting)$</p>\n<p>Here, the reaction to <code class=\"language-text\">t1</code> will set the output to 1 or 2, but every time it sets it to 2, the second reaction (to <code class=\"language-text\">t2</code>) will overwrite the output with the value 0. As a consequence, the outputs will be 1, 0, 1, 0, â€¦ deterministically.</p>\n<h2 id=\"reacting-to-outputs-of-contained-reactors\" style=\"position:relative;\"><a href=\"#reacting-to-outputs-of-contained-reactors\" aria-label=\"reacting to outputs of contained reactors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reacting to Outputs of Contained Reactors</h2>\n<p>A reaction may be triggered by the an input to the reactor, but also by an output of a contained reactor, as illustrated in the following example:</p>\n<p>$start(Contained)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> Overwriting <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Overwriting.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token function\">Overwriting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>y<span class=\"token operator\">-></span>value <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span>y<span class=\"token operator\">-></span>value <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">error_print_and_exit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Outputs should only be 0 or 1!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">Overwriting</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Overwriting.lf\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Overwriting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">auto</span> is_correct <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> value <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> value <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">is_present</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">is_correct</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Output shoudl only be 0 or 1!\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> Overwriting <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Overwriting.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> Overwriting<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> s<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span>value <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            sys<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"ERROR: Outputs should only be 0 or 1!\\n\"</span><span class=\"token punctuation\">)</span>\n            exit<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token lf_keywords\">target</span> TypeScript\n<span class=\"token keyword\">import</span> Overwriting <span class=\"token keyword\">from</span> <span class=\"token string\">\"Overwriting.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Overwriting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>y <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span>y <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            util<span class=\"token punctuation\">.</span><span class=\"token function\">requestErrorStop</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Outputs should only be 0 or 1!\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token lf_keywords\">target</span> <span class=\"token class-name\">Rust</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> <span class=\"token class-name\">Overwriting</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Overwriting.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token class-name\">Overwriting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>s__y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">eprintln!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Output schould only be 0 or 1!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ctx<span class=\"token punctuation\">.</span><span class=\"token function\">request_stop</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Asap</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>$end(Contained)$</p>\n<img alt=\"Lingua Franca diagram\" src=\"/664a20244a195c769a48b828fc063c97/Contained.svg\" width=\"300\">\n<p>This instantiates the above <code class=\"language-text\">Overwriting</code> reactor and monitors its outputs.</p>\n<h2 id=\"method-declaration\" style=\"position:relative;\"><a href=\"#method-declaration\" aria-label=\"method declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Method Declaration</h2>\n<div class=\"lf-c lf-py lf-ts lf-rs\">\n<p>The $target-language$ target does not currently support methods.</p>\n</div>\n<div class=\"lf-cpp\">\n<p>A method declaration has one of the forms:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">  <span class=\"token lf_keywords\">method</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token lf_keywords\">method</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>type<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token lf_keywords\">method</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>argument_name<span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>type<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token lf_keywords\">method</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>argument_name<span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>type<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>type<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The first form defines a method with no arguments and no return value. The second form defines a method with the return type <code class=\"language-text\">&lt;type></code> but no arguments. The third form defines a method with a comma-separated list of arguments given by their name and type, but without a return value. Finally, the fourth form is similar to the third, but adds a return type.</p>\n<p>The $method$ keywork can optionally be prefixed with the $const$ qualifier, which indicates that the method is read only.</p>\n<p>Methods are particularly useful in reactors that need to perform certain operations on state variables and/or parameters that are shared between reactions or that are too complex to be implemented in a single reaction. Analogous to class methods, methods in LF can access all state variables and parameters, and can be invoked from all reaction bodies or from other methods. Consider the following example:</p>\n<p>$start(Methods)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\">WARNING<span class=\"token operator\">:</span> No source file found<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>c<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>Methods<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Methods <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> foo<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token lf_keywords\">method</span> <span class=\"token function\">getFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">return</span> foo<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">method</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        foo <span class=\"token operator\">+=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Foo is initialized to \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"2 + 40 = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\">WARNING<span class=\"token punctuation\">:</span> No source <span class=\"token builtin\">file</span> found<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>py<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>Methods<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token constant\">WARNING</span><span class=\"token operator\">:</span> No source file found<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>ts<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span>Methods<span class=\"token punctuation\">.</span>lf</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token constant\">WARNING</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">No</span> source file found<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">..</span><span class=\"token operator\">/</span>code<span class=\"token operator\">/</span>rs<span class=\"token operator\">/</span>src<span class=\"token operator\">/</span><span class=\"token class-name\">Methods</span><span class=\"token punctuation\">.</span>lf</code></pre></div>\n<p>$end(Methods)$</p>\n<p>This reactor defines two methods <code class=\"language-text\">getFoo</code> and <code class=\"language-text\">add</code>. <code class=\"language-text\">getFoo</code> is qualified as a const method, which indicates that it has read-only access to the state variables. This is direclty translated to a C++ const method in the code generation process. The <code class=\"language-text\">getFoo</code> method receives no arguments and returns an integer (<code class=\"language-text\">int</code>) indicating the current value of the <code class=\"language-text\">foo</code> state variable. The <code class=\"language-text\">add</code> method returns nothing (<code class=\"language-text\">void</code>) and receives one interger argument, which it uses to increment <code class=\"language-text\">foo</code>. Both methods are visible in all reactions of the reactor. In this example, the reaction to startup calls both methods in order to read and modify its state.</p>\n</div>","headings":[{"value":"Reaction Order","depth":2},{"value":"Overwriting Outputs","depth":2},{"value":"Reacting to Outputs of Contained Reactors","depth":2},{"value":"Method Declaration","depth":2}],"frontmatter":{"permalink":"/docs/handbook/reactions-and-methods","title":"Reactions and Methods","oneline":"Reactions and methods in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Composing Reactors","oneline":"Composing reactors in Lingua Franca.","permalink":"/docs/handbook/composing-reactors"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Causality Loops","oneline":"Causality loops in Lingua Franca.","permalink":"/docs/handbook/causality-loops"}}}},"pageContext":{"id":"1-reactions-and-methods","slug":"/docs/handbook/reactions-and-methods","repoPath":"/packages/documentation/copy/en/topics/Reactions and Methods.md","previousID":"08fb8f5c-dc63-5d8d-9f97-3b7f11efbe4d","nextID":"f11d5336-c064-50ed-8ec9-7767fe8803bc","lang":"en","modifiedTime":"2022-04-27T14:45:22.069Z"}},
    "staticQueryHashes": []}