{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/composing-reactors",
    "result": {"data":{"markdownRemark":{"id":"14e003e3-5805-5ef5-b27f-382d4f57c8a7","excerpt":"$page-showing-target$ Contained Reactors Reactors can contain instances of other reactors defined in the same file or in an imported file. Assume the  andâ€¦","html":"<p>$page-showing-target$</p>\n<h2 id=\"contained-reactors\" style=\"position:relative;\"><a href=\"#contained-reactors\" aria-label=\"contained reactors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contained Reactors</h2>\n<p>Reactors can contain instances of other reactors defined in the same file or in an imported file. Assume the <code class=\"language-text\">Count</code> and <code class=\"language-text\">Scale</code> reactors defined in <a href=\"/docs/handbook/parameters-and-state-variables\">Parameters and State Variables</a> are stored in files <code class=\"language-text\">Count.lf</code> and <code class=\"language-text\">Scale.lf</code>, respectively,\nand that the <code class=\"language-text\">TestCount</code> reactor from <a href=\"/docs/handbook/time-and-timers\">Time and Timers</a> is stored in <code class=\"language-text\">TestCount.lf</code>. Then the following program composes one instance of each of the three:</p>\n<p>$start(RegressionTest)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">,</span>\n    fast<span class=\"token operator\">:</span> true\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">import</span> Count <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Count.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> Scale <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Scale.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> TestCount <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"TestCount.lf\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> RegressionTest <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token function\">Scale</span><span class=\"token punctuation\">(</span>factor <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token function\">TestCount</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> num_inputs <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-></span> t<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">,</span>\n    fast<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token module\">Count</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Count.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">Scale</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Scale.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">TestCount</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"TestCount.lf\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> RegressionTest <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Scale</span><span class=\"token punctuation\">(</span>factor <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TestCount</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> num_inputs <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-></span> t<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">,</span>\n    fast<span class=\"token punctuation\">:</span> true\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">import</span> Count <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Count.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> Scale <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Scale.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> TestCount <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"TestCount.lf\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> RegressionTest <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> Count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> Scale<span class=\"token punctuation\">(</span>factor <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> TestCount<span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> num_inputs <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token lf_keywords\">target</span> TypeScript <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">,</span>\n    fast<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">import</span> Count <span class=\"token keyword\">from</span> <span class=\"token string\">\"Count.lf\"</span>\n<span class=\"token keyword\">import</span> Scale <span class=\"token keyword\">from</span> <span class=\"token string\">\"Scale.lf\"</span>\n<span class=\"token keyword\">import</span> TestCount <span class=\"token keyword\">from</span> <span class=\"token string\">\"TestCount.lf\"</span>\n\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> RegressionTest <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scale</span><span class=\"token punctuation\">(</span>factor <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestCount</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> numInputs <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>x\n    s<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">.</span>x\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token lf_keywords\">target</span> <span class=\"token class-name\">Rust</span> <span class=\"token punctuation\">{</span>\n    timeout<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">sec</span><span class=\"token punctuation\">,</span>\n    fast<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">import</span> <span class=\"token class-name\">Count</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Count.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> <span class=\"token class-name\">Scale</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Scale.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> <span class=\"token class-name\">TestCount</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"TestCount.lf\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token class-name\">RegressionTest</span> <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token class-name\">Count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token class-name\">Scale</span><span class=\"token punctuation\">(</span>factor <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token class-name\">TestCount</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> num_inputs <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">-></span> s<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">-></span> t<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>$end(RegressionTest)$</p>\n<h2 id=\"diagrams\" style=\"position:relative;\"><a href=\"#diagrams\" aria-label=\"diagrams permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Diagrams</h2>\n<p>As soon as programs consist of more than one reactor, it becomes particularly useful to reference the diagrams that are automatically created and displayed by the Lingua Franca IDEs. The diagram for the above program is as follows:</p>\n<img alt=\"Lingua Franca diagram\" src=\"/21c44c96635cb46b9c6c593184671868/RegressionTest.svg\" width=\"500\">\n<p>In this diagram, the timer is represented by a clock-like icon, the reactions by chevron shapes, and the $shutdown$ event by a diamond. If there were a $startup$ event in this program, it would appear as a circle.</p>\n<h2 id=\"creating-reactor-instances\" style=\"position:relative;\"><a href=\"#creating-reactor-instances\" aria-label=\"creating reactor instances permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating Reactor Instances</h2>\n<p>An instance is created with the syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token operator\">&lt;</span>instance_name<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token operator\">&lt;</span>class_name<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>parameters<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>A bank with several instances can be created in one such statement, as explained in the <a href=\"/docs/handbook/multiports-banks#banks-of-reactors\">banks of reactors documentation</a>.</p>\n<p>The <code class=\"language-text\">&lt;parameters></code> argument is a comma-separated list of assignments:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token operator\">&lt;</span>parameter_name<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>value<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>Like the default value for parameters, <code class=\"language-text\">&lt;value></code> can be a numeric contant, a string enclosed in quotation marks, a time value such as <code class=\"language-text\">10 msec</code>, target-language code enclosed in <code class=\"language-text\">{= ... =}</code>, or any of the list forms described in <a href=\"/docs/handbook/expressions\">Expressions</a>.</p>\n<h2 id=\"connections\" style=\"position:relative;\"><a href=\"#connections\" aria-label=\"connections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connections</h2>\n<p>Connections between ports are specified with the syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token operator\">&lt;</span>source_port_reference<span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>destination_port_reference<span class=\"token operator\">></span></code></pre></div>\n<p>where the port references are either <code class=\"language-text\">&lt;instance_name>.&lt;port_name></code> or just <code class=\"language-text\">&lt;port_name></code>, where the latter form is used for connections that cross hierarchical boundaries, as illustrated in the next section.</p>\n<p>On the left and right of a connection statement, you can put a comma-separated list. For example, the above pair of connections can be written,</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    c<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>x</code></pre></div>\n<p>The only constraint is that the total number of channels on the left match the total number on the right.</p>\n<p>A destination port (on the right) can only be connected to a single source port (on the left). However, a source port may be connected to multiple destinations, as in the following example:</p>\n<div class=\"lf-py\">\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\"><span class=\"token lf_keywords\">reactor</span> A <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> y\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">reactor</span> B <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    b1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    b2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> b1<span class=\"token punctuation\">.</span>x\n    a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> b2<span class=\"token punctuation\">.</span>x\n<span class=\"token punctuation\">}</span></code></pre></div>\n</div>\n<div class=\"lf-c lf-cpp lf-ts lf-rs\">\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\"><span class=\"token lf_keywords\">reactor</span> A <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token punctuation\">:</span>int\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">reactor</span> B <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">:</span>int\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    b1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    b2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> b1<span class=\"token punctuation\">.</span>x\n    a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> b2<span class=\"token punctuation\">.</span>x\n<span class=\"token punctuation\">}</span></code></pre></div>\n</div>\n<img alt=\"Lingua Franca diagram\" src=\"/c0bbc812d826bbcf70fc4b02a301e65e/Multicast.svg\" width=\"250\">\n<p>Lingua Franca provides a convenient shortcut for such multicast connections, where the above two lines can be replaced by one as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> b1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">.</span>x</code></pre></div>\n<p>The enclosing <code class=\"language-text\">( ... )+</code> means to repeat the enclosed comma-separated list of sources however many times is needed to provide inputs to all the sinks on the right of the connection <code class=\"language-text\">-></code>.</p>\n<h2 id=\"import-statement\" style=\"position:relative;\"><a href=\"#import-statement\" aria-label=\"import statement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Import Statement</h2>\n<p>An import statement has the form:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">import</span> <span class=\"token operator\">&lt;</span><span class=\"token lf_keywords\">reactor</span> class<span class=\"token operator\">></span> <span class=\"token lf_keywords\">as</span> <span class=\"token operator\">&lt;</span>alias2<span class=\"token operator\">></span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"&lt;path>\"</span></code></pre></div>\n<p>where <code class=\"language-text\">&lt;reactor class></code> and <code class=\"language-text\">&lt;alias></code> can be a comma-separated list to import multiple reactors from the same file. The <code class=\"language-text\">&lt;path></code> specifies another <code class=\"language-text\">.lf</code> file relative to the location of the current file. The <code class=\"language-text\">as &lt;alias></code> portion is optional and specifies alternative class names to use in the $new$ statements.</p>\n<h2 id=\"hierarchy\" style=\"position:relative;\"><a href=\"#hierarchy\" aria-label=\"hierarchy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hierarchy</h2>\n<p>Reactors can be composed in arbitrarily deep hierarchies. For example, the following program combines the <code class=\"language-text\">Count</code> and <code class=\"language-text\">Scale</code> reactors within on <code class=\"language-text\">Container</code>:</p>\n<p>$start(Hierarchy)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> Count <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Count.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> Scale <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Scale.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> TestCount <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"TestCount.lf\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Container</span><span class=\"token punctuation\">(</span>stride<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token function\">Scale</span><span class=\"token punctuation\">(</span>factor <span class=\"token operator\">=</span> stride<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-></span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Hierarchy <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token function\">Container</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token function\">TestCount</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> num_inputs <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-></span> t<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">Count</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Count.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">Scale</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Scale.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">TestCount</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"TestCount.lf\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Container</span><span class=\"token punctuation\">(</span>stride<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Scale</span><span class=\"token punctuation\">(</span>factor <span class=\"token operator\">=</span> stride<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-></span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Hierarchy <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Container</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TestCount</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> num_inputs <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-></span> t<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> Count <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Count.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> Scale <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Scale.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> TestCount <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"TestCount.lf\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">reactor</span> Container<span class=\"token punctuation\">(</span>stride<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> Count<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> Scale<span class=\"token punctuation\">(</span>factor <span class=\"token operator\">=</span> stride<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Hierarchy <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> Container<span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> TestCount<span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> num_inputs <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token lf_keywords\">target</span> TypeScript\n<span class=\"token keyword\">import</span> Count <span class=\"token keyword\">from</span> <span class=\"token string\">\"Count.lf\"</span>\n<span class=\"token keyword\">import</span> Scale <span class=\"token keyword\">from</span> <span class=\"token string\">\"Scale.lf\"</span>\n<span class=\"token keyword\">import</span> TestCount <span class=\"token keyword\">from</span> <span class=\"token string\">\"TestCount.lf\"</span>\n\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token function\">Container</span><span class=\"token punctuation\">(</span>stride<span class=\"token operator\">:</span><span class=\"token function\">number</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span>\n    c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scale</span><span class=\"token punctuation\">(</span>factor <span class=\"token operator\">=</span> stride<span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>x\n    s<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> y\n<span class=\"token punctuation\">}</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> Hierarchy <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestCount</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> numInputs <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">.</span>x\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token lf_keywords\">target</span> <span class=\"token class-name\">Rust</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> <span class=\"token class-name\">Count</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Count.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> <span class=\"token class-name\">Scale</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"Scale.lf\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">import</span> <span class=\"token class-name\">TestCount</span> <span class=\"token lf_keywords\">from</span> <span class=\"token string\">\"TestCount.lf\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">(</span>stride<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">output</span> y<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span>\n    c <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token class-name\">Count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token class-name\">Scale</span><span class=\"token punctuation\">(</span>factor <span class=\"token operator\">=</span> stride<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">-></span> s<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">-></span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token class-name\">Hierarchy</span> <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token class-name\">Container</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">=</span> <span class=\"token lf_keywords\">new</span> <span class=\"token class-name\">TestCount</span><span class=\"token punctuation\">(</span>stride <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> num_inputs <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">-></span> t<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>$end(Hierarchy)$</p>\n<img alt=\"Lingua Franca diagram\" src=\"/3a7b3985c4be7836e4478b4e039680ba/Hierarchy.svg\" width=\"500\">\n<p>The <code class=\"language-text\">Container</code> has a parameter named <code class=\"language-text\">stride</code>, whose value is passed to the <code class=\"language-text\">factor</code> parameter of the <code class=\"language-text\">Scale</code> reactor. The line</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    s<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span><span class=\"token operator\">></span> y<span class=\"token punctuation\">;</span></code></pre></div>\n<p>establishes a connection across levels of the hierarchy. This propagates the output of a contained reactor to the output of the container. A similar notation may be used to propagate the input of a container to the input of a contained reactor,</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    x <span class=\"token operator\">-</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"connections-with-logical-delays\" style=\"position:relative;\"><a href=\"#connections-with-logical-delays\" aria-label=\"connections with logical delays permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connections with Logical Delays</h2>\n<p>Connections may include a <strong>logical delay</strong> using the $after$ keyword, as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token operator\">&lt;</span>source_port_reference<span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>destination_port_reference<span class=\"token operator\">></span> <span class=\"token lf_keywords\">after</span> <span class=\"token operator\">&lt;</span>time_value<span class=\"token operator\">></span></code></pre></div>\n<p>where <code class=\"language-text\">&lt;time_value></code> can be any of the forms described in <a href=\"/docs/handbook/expressions\">Expressions</a>.</p>\n<p>The $after$ keyword specifies that the logical time of the event delivered to the destination port will be larger than the logical time of the reaction that wrote to source port. The time value is required to be non-negative, but it can be zero, in which case the input event at the receiving end will be one <a href=\"/docs/handbook/actions#superdense-time\">microstep</a> later than the event that triggered it.</p>\n<h2 id=\"physical-connections\" style=\"position:relative;\"><a href=\"#physical-connections\" aria-label=\"physical connections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Physical Connections</h2>\n<p>A subtle and rarely used variant of the <code class=\"language-text\">-></code> connection is a <strong>physical connection</strong>, denoted <code class=\"language-text\">~></code>. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\"><span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">~</span><span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is rendered in by the diagram synthesizer as follows:</p>\n<img alt=\"Lingua Franca diagram\" src=\"/dfffe82cc937aabc9740abbc27dde18f/PhysicalConnection.svg\" width=\"200\">\n<p>In such a connection, the logical time at the recipient is derived from the local physical clock rather than being equal to the logical time at the sender. The physical time will always exceed the logical time of the sender (unless fast is set to <code class=\"language-text\">true</code>), so this type of connection incurs a nondeterministic positive logical time delay. Physical connections are useful sometimes in <a href=\"/docs/handbook/distributed-execution\">Distributed-Execution</a> in situations where the nondeterministic logical delay is tolerable. Such connections are more efficient because timestamps need not be transmitted and messages do not need to flow through through a centralized coordinator (if a centralized coordinator is being used).</p>","headings":[{"value":"Contained Reactors","depth":2},{"value":"Diagrams","depth":2},{"value":"Creating Reactor Instances","depth":2},{"value":"Connections","depth":2},{"value":"Import Statement","depth":2},{"value":"Hierarchy","depth":2},{"value":"Connections with Logical Delays","depth":2},{"value":"Physical Connections","depth":2}],"frontmatter":{"permalink":"/docs/handbook/composing-reactors","title":"Composing Reactors","oneline":"Composing reactors in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Time and Timers","oneline":"Time and timers in Lingua Franca.","permalink":"/docs/handbook/time-and-timers"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Reactions and Methods","oneline":"Reactions and methods in Lingua Franca.","permalink":"/docs/handbook/reactions-and-methods"}}}},"pageContext":{"id":"1-composing-reactors","slug":"/docs/handbook/composing-reactors","repoPath":"/packages/documentation/copy/en/topics/Composing Reactors.md","previousID":"05e1d427-98f3-543e-8306-45b727f31f46","nextID":"2b545b73-e864-5e76-b7ca-cca7461a40a3","lang":"en","modifiedTime":"2022-04-28T16:35:36.677Z"}},
    "staticQueryHashes": []}