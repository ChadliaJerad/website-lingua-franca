{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/target-specification",
    "result": {"data":{"markdownRemark":{"id":"1ee38e1b-5eed-575d-a361-bfaf132c9797","excerpt":"Every Lingua Franca program begins with a statement of this form: The  gives the name of some Lingua Franca target language, which is the language in which…","html":"<p>Every Lingua Franca program begins with a statement of this form:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">target</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>parameters<span class=\"token operator\">></span></code></pre></div>\n<p>The <code class=\"language-text\">&lt;name></code> gives the name of some Lingua Franca target language, which is the language in which reactions are written. This is also the language of the program(s) generated by the Lingua Franca compiler. The target languages currently supported are <a href=\"c-reactors\"><strong>C</strong></a>, <a href=\"cpp-reactors\"><strong>C++</strong></a>, <a href=\"python-reactors\"><strong>Python</strong></a>, <a href=\"typescript-reactors\"><strong>TypeScript</strong></a>, and<a href=\"rust-reactors\"><strong>Rust</strong></a>.</p>\n<h1 id=\"summary-of-parameters\" style=\"position:relative;\"><a href=\"#summary-of-parameters\" aria-label=\"summary of parameters permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary of Parameters</h1>\n<p>A target specification may have optional parameters, the names and values of which depend on which specific target you are using. Each parameter is a key-value pair, where the supported keys are some subset of the following:</p>\n<ul>\n<li><a href=\"#build\"><strong>build</strong></a>: A command to execute after code generation instead of the default compile command.</li>\n<li><a href=\"#cmake\"><strong>cmake</strong></a>: Whether to use cmake for building.</li>\n<li><a href=\"#cmake\"><strong>cmake-include</strong></a>: List of paths to cmake files to guide compilation.</li>\n<li><a href=\"#compiler\"><strong>compiler</strong></a>: A string giving the name of the target language compiler to use.</li>\n<li><a href=\"#fast\"><strong>fast</strong></a>: A boolean specifying to execute as fast as possible without waiting for physical time to match logical time.</li>\n<li><a href=\"#files\"><strong>files</strong></a>: An array of paths to files or directories to be copied to the directory that contains the generated sources.</li>\n<li><a href=\"#flags\"><strong>flags</strong></a>: An arrays of strings giving options to be passed to the target compiler.</li>\n<li><a href=\"#logging\"><strong>logging</strong></a>: An indicator of how much information to print when executing the program.</li>\n<li><a href=\"#no-compile\"><strong>no-compile</strong></a>: If true, then do not invoke a target language compiler. Just generate code.</li>\n<li><a href=\"#protobufs\"><strong>protobufs</strong></a>: An array of .proto files that are to be compiled and included in the generated code.</li>\n<li><a href=\"#threading\"><strong>threading</strong></a>: Whether to use multiple threads.</li>\n<li><a href=\"#timeout\"><strong>timeout</strong></a>: A time value (with units) specifying the logical stop time of execution. See [[Termination]].</li>\n<li><a href=\"#workers\"><strong>workers</strong></a>: If using multiple threads, how many worker threads to create.</li>\n</ul>\n<p>Not all targets support all target parameters. The full set of target parameters supported by the $target-language$ target is:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C <span class=\"token punctuation\">{</span>\n    build<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    cmake<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>true or false<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    cmake<span class=\"token operator\">-</span>include<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>string or list of strings<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    compiler<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    fast<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>true or false<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    files<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>string or list of strings<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    flags<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>string or list of strings<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    logging<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>error<span class=\"token punctuation\">,</span> warning<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">,</span> log<span class=\"token punctuation\">,</span> debug<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    no<span class=\"token operator\">-</span>compile<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>true or false<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    protobufs<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>string or list of strings<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token lf_keywords\">time</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    threading<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>true or false<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    workers<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>non<span class=\"token operator\">-</span>negative integer<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\">FIXME</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\">FIXME</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token constant\">FIXME</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token constant\">FIXME</span></code></pre></div>\n<div class=\"lf-c\">\nFor example:\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C <span class=\"token punctuation\">{</span>\n    cmake<span class=\"token operator\">:</span> false<span class=\"token punctuation\">,</span>\n    compiler<span class=\"token operator\">:</span> <span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">,</span>\n    flags<span class=\"token operator\">:</span> <span class=\"token string\">\"-O3\"</span><span class=\"token punctuation\">,</span>\n    fast<span class=\"token operator\">:</span> true<span class=\"token punctuation\">,</span>\n    logging<span class=\"token operator\">:</span> log<span class=\"token punctuation\">,</span>\n    timeout<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token lf_keywords\">secs</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The comma on the last parameter is optional, as is the semicolon on the last line.</p>\n<p>This specifies to use compiler <code class=\"language-text\">cc</code> instead of the default <code class=\"language-text\">gcc</code>, to use optimization level 3, to execute as fast as possible, and to exit execution when logical time has advanced to 10 seconds. Note that all events at logical time 10 seconds greater than the starting logical time will be executed.</p>\n</div>\n<p>A target may support overriding the target parameters on the <a href=\"#command-line-overrides\">command line</a> when invoking the compiled program.</p>\n<h2 id=\"build\" style=\"position:relative;\"><a href=\"#build\" aria-label=\"build permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>build</h2>\n<div class=\"lf-c\">\n<p>A command to execute after code generation instead of the default compile command. This is either a single string or an array of strings. The specified command(s) will be executed an environment that has the following environment variables defined:</p>\n<ul>\n<li><code class=\"language-text\">LF_CURRENT_WORKING_DIRECTORY</code>: The directory in which the command is invoked.</li>\n<li><code class=\"language-text\">LF_SOURCE_DIRECTORY</code>: The directory containing the .lf file being compiled.</li>\n<li><code class=\"language-text\">LF_SOURCE_GEN_DIRECTORY</code>: The directory in which generated files are placed.</li>\n<li><code class=\"language-text\">LF_BIN_DIRECTORY</code>: The directory into which to put binaries.</li>\n</ul>\n<p>The command will be executed in the same directory as the <code class=\"language-text\">.lf</code> file being compiled. For example, if you specify</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C <span class=\"token punctuation\">{</span>\n    build<span class=\"token operator\">:</span> <span class=\"token string\">\"./compile.sh Foo\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>then instead of invoking the C compiler after generating code, the code generator will invoke your <code class=\"language-text\">compile.sh</code> script, which could look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\n# Build the generated code.\ncd ${LF_SOURCE_GEN_DIRECTORY}\ncmake .\nmake\n\n# Move the executable to the bin directory.\nmv $1 ${LF_BIN_DIRECTORY}\n\n# Invoke the executable.\n${LF_BIN_DIRECTORY}/$1\n\n# Plot the results, which have appeared in the src-gen directory.\ngnuplot ${LF_SOURCE_DIRECTORY}/$1.gnuplot\nopen $1.pdf</code></pre></div>\n<p>The first few lines of this script do the same thing that is normally done when there is no <code class=\"language-text\">build</code> option in the target. Specifically, they use <code class=\"language-text\">cmake</code> to create a makefile, invoke <code class=\"language-text\">make</code>, and then move the executable to the <code class=\"language-text\">bin</code> directory. The next line, however, gives new functionality. It executes the compiled code! The final two lines assume that the program has produced a file with data to be plotted and use <code class=\"language-text\">gnuplot</code> to plot the data. This requires, of course, that you have <code class=\"language-text\">gnuplot</code> installed, and that there is a file called <code class=\"language-text\">Foo.gnuplot</code> in the same directory as <code class=\"language-text\">Foo.lf</code>. The file <code class=\"language-text\">Foo.gnuplot</code> contains the commands to plot the data, and might look something like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">set title 'My Title'\nset xrange [0:3]\nset yrange [-2:2]\nset xlabel \"Time (seconds)\"\nset terminal pdf size 5, 3.5\nset output 'Foo.pdf'\nplot 'mydata1.data' using 1:2 with lines, \\\n     'mydata2.data' using 1:2 with lines</code></pre></div>\n<p>This assumes that your program has written two files, <code class=\"language-text\">mydata1.data</code> and <code class=\"language-text\">mydata2.data</code> containing two columns, time and value.</p>\n</div>\n<div class=\"lf-cpp lf-py lf-ts lf-rs warning\">\n<p><strong>FIXME:</strong> Does this target support this?</p>\n</div>\n<h2 id=\"cmake\" style=\"position:relative;\"><a href=\"#cmake\" aria-label=\"cmake permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cmake</h2>\n<div class=\"lf-c\">\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C <span class=\"token punctuation\">{</span>\n    cmake<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>true or false<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will enable or disable the CMake-based build system (the default is <code class=\"language-text\">true</code>). Enabling the CMake build system will result in a <code class=\"language-text\">CMakeLists.txt</code> being generated in the <code class=\"language-text\">src-gen</code> directory. This <code class=\"language-text\">CMakeLists.txt</code> is then used when <code class=\"language-text\">cmake</code> is invoked by the LF runtime (either the <code class=\"language-text\">lfc</code> or the IDE). Alternatively, the generated program can be built manually. To do so, in the <code class=\"language-text\">src-gen/ProgramName</code> directory, run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir build &amp;&amp; cd build\ncmake ../\nmake</code></pre></div>\n<p>If <code class=\"language-text\">cmake</code> is disabled, <code class=\"language-text\">gcc</code> is directly invoked after code generation by default. In this case, additional target properties, such as <a href=\"#compiler\">compiler</a> and <a href=\"#flags\">flags</a> can be used to gain finer control over the compilation process.</p>\n</div>\n<div class=\"lf-cpp lf-py lf-ts lf-rs warning\">\n<p><strong>FIXME:</strong> Does this target support this?</p>\n</div>\n<h2 id=\"cmake-include\" style=\"position:relative;\"><a href=\"#cmake-include\" aria-label=\"cmake include permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cmake-include</h2>\n<div class=\"lf-c\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target C {\n    cmake-include: [\"relative/path/to/foo.txt\", \"relative/path/to/bar.txt\", ...]\n};</code></pre></div>\n<p>This will optionally append additional custom CMake instructions to the generated <code class=\"language-text\">CMakeLists.txt</code>, drawing these instructions from the specified text files (e.g, <code class=\"language-text\">foo.txt</code>). The specified files are resolved using the same file search algorithm as used for the <a href=\"#files\">files</a> target parameter. Those files will be copied into the <code class=\"language-text\">src-gen</code> directory that contains the generated sources. This is done to make the generated code more portable (a feature that is useful in <a href=\"/docs/handbook/distributed-execution\">federated execution</a>.</p>\n<p>The cmake-include target property can be used, for example, to add dependencies on various packages (e.g., by using the <a href=\"https://cmake.org/cmake/help/latest/command/find_package.html\"><code class=\"language-text\">find_package</code></a> and <a href=\"https://cmake.org/cmake/help/latest/command/target_link_libraries.html\"><code class=\"language-text\">target_link_libraries</code></a> commands). <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/target/CMakeInclude.lf\">CMakeInclude.lf</a> is an example that uses this feature. A more sophisticated example of the usage of this target parameter can be found in <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/example/C/src/Rhythm/Rhythm.lf\">Rhythm.lf</a>.</p>\n<p>A CMake variable called <code class=\"language-text\">${LF_MAIN_TARGET}</code> can be used in the included text file(s) for convenience. This variable will contain the name of the CMake target (i.e., the name of the main reactor). For example, a <code class=\"language-text\">foo.txt</code> file can contain:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">find_package(m REQUIRED) # Finds the m library\n\ntarget_link_libraries( ${LF_MAIN_TARGET} m ) # Links the m library</code></pre></div>\n<p><code class=\"language-text\">foo.txt</code> can then be included:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target C {\n    cmake-include: \"foo.txt\"\n};</code></pre></div>\n<p>In this case, “foo.txt” is in the same <code class=\"language-text\">src</code> folder as the main <code class=\"language-text\">.lf</code> file.</p>\n<p><strong>Note</strong>: For a general tutorial on finding packages in CMake, see <a href=\"https://cmake.org/cmake/help/latest/command/find_package.html\">this</a> external documentation entry. For a list of CMake find modules, see <a href=\"https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html#find-modules\">this</a>.</p>\n<p>The <code class=\"language-text\">cmake-include</code> parameter works in conjunction with the $import$ statement. If any imported <code class=\"language-text\">.lf</code> file has <code class=\"language-text\">cmake-include</code> among its target properties, the specified text files will be appended to the current list of <code class=\"language-text\">cmake-include</code>s. These files will be resolved relative to the imported <code class=\"language-text\">.lf</code> file using the same search procedure as for the <a href=\"#files\">files</a> parameter. This helps resolve dependencies in imported reactors automatically and makes the code more modular. <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/target/DistributedCMakeInclude.lf\">DistributedCMakeInclude.lf</a> is a test that uses this feature.</p>\n<p><strong>Note</strong>: For <a href=\"/docs/handbook/distributed-execution\">federated execution</a>, both <code class=\"language-text\">cmake-include</code> and <a href=\"#files\">files</a> are kept separate for each federate as much as possible. This means that if one federate is imported, or uses an imported reactor that other federates don’t use, it will only have access to <code class=\"language-text\">cmake-include</code>s and <code class=\"language-text\">files</code> defined in the main <code class=\"language-text\">.lf</code> file, plus the selectively imported <code class=\"language-text\">.lf</code> files. <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/test/C/src/target/DistributedCMakeIncludeSeparateCompile.lf\">DistributedCMakeIncludeSeparateCompile.lf</a> is a test that demonstrates this feature.</p>\n</div>\n<div class=\"lf-cpp lf-py lf-ts lf-rs warning\">\n<p><strong>FIXME:</strong> Does this target support this?</p>\n</div>\n<h2 id=\"compiler\" style=\"position:relative;\"><a href=\"#compiler\" aria-label=\"compiler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>compiler</h2>\n<div class=\"lf-c\">\n<p>This parameter is a string giving the name of the target language compiler to use.\nIt is used only when <a href=\"#cmake\">cmake</a> is set to <code class=\"language-text\">false</code>. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C <span class=\"token punctuation\">{</span>\n    cmake<span class=\"token operator\">:</span> false<span class=\"token punctuation\">,</span>\n    compiler<span class=\"token operator\">:</span> <span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">compiler</code> option here specifies to use <code class=\"language-text\">cc</code> rather than <code class=\"language-text\">gcc</code>.</p>\n</div>\n<div class=\"lf-cpp lf-py lf-ts lf-rs warning\">\n<p><strong>FIXME:</strong> Does this target support this?</p>\n</div>\n<h2 id=\"fast\" style=\"position:relative;\"><a href=\"#fast\" aria-label=\"fast permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fast</h2>\n<p>By default, the execution of a Lingua Franca program is slowed down, if necessary, so that logical time does not elapse faster than physical time. If you wish to execute the program as fast as possible without this constraint, then specify the <code class=\"language-text\">fast</code> target parameter with value <code class=\"language-text\">true</code>.</p>\n<h2 id=\"files\" style=\"position:relative;\"><a href=\"#files\" aria-label=\"files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>files</h2>\n<div class=\"lf-c\">\n<p>The <code class=\"language-text\">files</code> target parameter specifies array of files or directories to be copied to the directory that contains the generated sources.</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C <span class=\"token punctuation\">{</span>\n    files<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"file1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"file2\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The lookup procedure for these files and directories is as follows:</p>\n<p>1- Search in the directory containing the <code class=\"language-text\">.lf</code> file that has the <strong>target</strong> directive.</p>\n<p>2- If not found, search in <code class=\"language-text\">LF_CLASSPATH</code>.</p>\n<p>3- If still not found, search in <code class=\"language-text\">CLASSPATH</code>.</p>\n<p>4- If still not found, search for the file as a resource. Specifically, if a file begins with a forward slash <code class=\"language-text\">/</code>, then the path is assumed to be relative to the root directory of the Lingua Franca source tree. For example, if you wish to use audio on a Mac, you can specify:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">target C {\n    files: [\"/lib/C/util/audio_loop_mac.c\", \"/lib/C/util/audio_loop.h\"]\n}</code></pre></div>\n<p>Your preamble code can then include these files, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">preamble {=\n    #include \"audio_loop_mac.c\"\n=}</code></pre></div>\n<p>Your reactions can then invoke functions defined in that <code class=\"language-text\">.c</code> file.</p>\n<p>Sometimes, you will need access to these files from target code in a reaction. For the C target (at least), the generated program will contain a line like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    #define TARGET_FILES_DIRECTORY \"path\"</code></pre></div>\n<p>where <code class=\"language-text\">path</code> is the full path to the directory containing these files. This can be used in reactions, for example, to read those files.</p>\n<p>Moreover, the <code class=\"language-text\">files</code> target specification works in conjunction with the $import$ statement. If a <code class=\"language-text\">.lf</code> file is imported and has designated supporting files using the <code class=\"language-text\">files</code> target parameter, those files will be resolved relative to that <code class=\"language-text\">.lf</code> file and copied to the directory that contains the generated sources. This is done to make code that imports other <code class=\"language-text\">.lf</code> files more modular. <a href=\"https://github.com/lf-lang/lingua-franca/blob/master/example/C/src/Rhythm/Rhythm.lf\">Rhythm.lf</a> is an example that demonstrates most of these features.</p>\n</div>\n<div class=\"lf-cpp lf-py lf-ts lf-rs warning\">\n<p><strong>FIXME:</strong> Does this target support this?</p>\n</div>\n<h2 id=\"flags\" style=\"position:relative;\"><a href=\"#flags\" aria-label=\"flags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>flags</h2>\n<div class=\"lf-c\">\n<p>This parameter is a list of strings giving additional arguments to pass to the target language compiler.\nIt is used only when <a href=\"#cmake\">cmake</a> is set to <code class=\"language-text\">false</code>. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C <span class=\"token punctuation\">{</span>\n    cmake<span class=\"token operator\">:</span> false<span class=\"token punctuation\">,</span>\n    flags<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"-g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-I/usr/local/include\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-L/usr/local/lib\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-lpaho-mqtt3c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">flags</code> option specifies to include debug information in the compiled code (<code class=\"language-text\">-g</code>); a directory to search for include files (<code class=\"language-text\">-I/usr/local/include</code>); a directory to search for library files (<code class=\"language-text\">-L/usr/local/lib</code>); a library to link with (<code class=\"language-text\">-lpaho-mqtt3c</code>, which will link with file <code class=\"language-text\">libpaho-mqtt3c.so</code>).</p>\n<p><strong>Note</strong>: Using the <code class=\"language-text\">flags</code> standard parameter when <code class=\"language-text\">cmake</code> is enabled is strongly discouraged, although supported. Flags are compiler-specific, and thus interfere with CMake’s ability to find the most suitable compiler for each platform. In a similar fashion, we recommend against the use of the <code class=\"language-text\">compiler</code> standard parameter for the same reason. A better solution is to provide a <code class=\"language-text\">cmake-include</code> file, as described next.</p>\n</div>\n<div class=\"lf-cpp lf-py lf-ts lf-rs warning\">\n<p><strong>FIXME:</strong> Does this target support this?</p>\n</div>\n<h2 id=\"logging\" style=\"position:relative;\"><a href=\"#logging\" aria-label=\"logging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>logging</h2>\n<div class=\"lf-c\">\n<p>By default, when executing a generated Lingua Franca program, error messages, warnings, and informational messages are printed to standard out. You can get additional information printed by setting the <code class=\"language-text\">logging</code> parameter to <code class=\"language-text\">LOG</code> or <code class=\"language-text\">DEBUG</code> (or <code class=\"language-text\">log</code> or <code class=\"language-text\">debug</code>). The latter is more verbose. If you set the <code class=\"language-text\">logging</code> parameter to <code class=\"language-text\">warn</code>, then warnings and errors will be printed, but informational messages will not (e.g. message produced using the <code class=\"language-text\">info_print</code> utility function). If you set <code class=\"language-text\">logging</code> to <code class=\"language-text\">error</code>, then warning messages will also not be printed.</p>\n<p>The C target also supports <a href=\"/docs/handbook/tracing\">tracing</a>, which outputs binary traces of an execution rather than human-readable text and is designed to have minimal impact on performance.</p>\n</div>\n<div class=\"lf-cpp lf-py lf-ts lf-rs warning\">\n<p><strong>FIXME:</strong> Does this target support this?</p>\n</div>\n<h2 id=\"no-compile\" style=\"position:relative;\"><a href=\"#no-compile\" aria-label=\"no compile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>no-compile</h2>\n<div class=\"lf-c\">\n<p>If true, then do not invoke a target language compiler nor cmake. Just generate code.</p>\n</div>\n<div class=\"lf-cpp lf-py lf-ts lf-rs warning\">\n<p><strong>FIXME:</strong> Does this target support this?</p>\n</div>\n<h2 id=\"protobufs\" style=\"position:relative;\"><a href=\"#protobufs\" aria-label=\"protobufs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>protobufs</h2>\n<p>Protobufs is a serialization protocol by which data in a target language can be copied over the network to a remote location. The <code class=\"language-text\">protobufs</code> target parameter gives an array of .proto files that are to be compiled and included in the generated code.</p>\n<div class=\"lf-c warning\">\n<p><strong>FIXME:</strong> Do we have an example of this to point to?</p>\n</div>\n<div class=\"lf-cpp lf-py lf-ts lf-rs warning\">\n<p><strong>FIXME:</strong> Does this target support this?</p>\n</div>\n<h2 id=\"threading\" style=\"position:relative;\"><a href=\"#threading\" aria-label=\"threading permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>threading</h2>\n<div class=\"lf-c lf-cpp\">\n<p>If threading is turned on (the default), then the generated code will use a target platform thread library and generate multi-threaded code. This can transparently execute execute reactions that have no dependence on one another in parallel on multiple cores. By default, threading is turned on, and the <code class=\"language-text\">workers</code> property is set to 0, which means that the number of workers is determined by the runtime system. Typically, it will be set to the number of cores on the machine running the code. To use a different number of worker threads, the following target parameters can be specified:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C <span class=\"token punctuation\">{</span>\n    threading<span class=\"token operator\">:</span> true<span class=\"token punctuation\">,</span>\n    workers<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp <span class=\"token punctuation\">{</span>\n    threading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    workers<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>integer<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>A reasonable choice for the number of workers is the number of cores on the target machine. The default is <code class=\"language-text\">0</code>, which means that the runtime engine is free to choose the number of worker threads to use. Currently, the C target defaults to using only a single worker thread.</p>\n<p>If threading is disabled (by setting <code class=\"language-text\">threading</code> to <code class=\"language-text\">false</code>), then no thread library is used, and the <code class=\"language-text\">schedule()</code> function is not thread safe. This setting is incompatible with asynchronously scheduling any physical actions and hence this parameter will be ignored for programs that have physical actions.</p>\n</div>\n<div class=\"lf-py lf-ts\">\n<p>The $target-language$ target does not support multithreaded execution.</p>\n</div>\n<div class=\"lf-rs warning\">\n<p><strong>FIXME:</strong> Does this target support this?</p>\n</div>\n<h2 id=\"timeout\" style=\"position:relative;\"><a href=\"#timeout\" aria-label=\"timeout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>timeout</h2>\n<p>A time value (with units) specifying the logical stop time of execution. See <a href=\"/docs/handbook/termination\">Termination</a>.</p>\n<h2 id=\"workers\" style=\"position:relative;\"><a href=\"#workers\" aria-label=\"workers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>workers</h2>\n<p>See <a href=\"#threading\">threading</a>.</p>\n<h1 id=\"command-line-arguments\" style=\"position:relative;\"><a href=\"#command-line-arguments\" aria-label=\"command line arguments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Command-Line Arguments</h1>\n<div class=\"lf-c\">\n<p>The generated C program understands the following command-line arguments, each of which has a short form (one character) and a long form:</p>\n<ul>\n<li><code class=\"language-text\">-f, --fast [true | false]</code>: Specifies whether to wait for physical time to match logical time. The default is <code class=\"language-text\">false</code>. If this is <code class=\"language-text\">true</code>, then the program will execute as fast as possible, letting logical time advance faster than physical time.</li>\n<li><code class=\"language-text\">-o, --timeout &lt;duration> &lt;units></code>: Stop execution when logical time has advanced by the specified <em>duration</em>. The units can be any of nsec, usec, msec, sec, minute, hour, day, week, or the plurals of those.</li>\n<li><code class=\"language-text\">-w, --workers &lt;n></code>: Executed using <n> worker threads if possible. This option is ignored in the single-threaded version. That is, it is ignored if a <code class=\"language-text\">threading</code> option was given in the target properties with value <code class=\"language-text\">false</code>.</li>\n<li><code class=\"language-text\">-i, --id &lt;n></code>: The ID of the federation that this reactor will join.</li>\n</ul>\n<p>Any other command-line arguments result in printing the above information.</p>\n</div>\n<div class=\"lf-cpp lf-py lf-ts lf-rs warning\">\n<p><strong>FIXME:</strong> Does this target support this?</p>\n</div>","headings":[{"value":"Summary of Parameters","depth":1},{"value":"build","depth":2},{"value":"cmake","depth":2},{"value":"cmake-include","depth":2},{"value":"compiler","depth":2},{"value":"fast","depth":2},{"value":"files","depth":2},{"value":"flags","depth":2},{"value":"logging","depth":2},{"value":"no-compile","depth":2},{"value":"protobufs","depth":2},{"value":"threading","depth":2},{"value":"timeout","depth":2},{"value":"workers","depth":2},{"value":"Command-Line Arguments","depth":1}],"frontmatter":{"permalink":"/docs/handbook/target-specification","title":"Target Specification","oneline":"The target specification in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Expressions","oneline":"Expressions in Lingua Franca.","permalink":"/docs/handbook/expressions"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"C Reactors","oneline":"Writing reactors using the C target in Lingua Franca.","permalink":"/docs/handbook/c-reactors"}}}},"pageContext":{"id":"3-target-specification","slug":"/docs/handbook/target-specification","repoPath":"/packages/documentation/copy/en/reference/Target Specification.md","previousID":"5817fb5d-42b0-5ef3-aafd-1729ad415a8f","nextID":"c449a37c-ee78-5d84-93d7-25359468889c","lang":"en","modifiedTime":"2022-04-12T00:49:47.587Z"}},
    "staticQueryHashes": []}