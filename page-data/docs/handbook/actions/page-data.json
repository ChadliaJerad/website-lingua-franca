{
    "componentChunkName": "component---src-templates-documentation-tsx",
    "path": "/docs/handbook/actions",
    "result": {"data":{"markdownRemark":{"id":"acb100f2-5131-57e7-9f1b-314b9b7c1ed7","excerpt":"$page-showing-target$ Action Declaration An action declaration has one of the following forms: The , , and  are all optional. If only one argument is given inâ€¦","html":"<p>$page-showing-target$</p>\n<h2 id=\"action-declaration\" style=\"position:relative;\"><a href=\"#action-declaration\" aria-label=\"action declaration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action Declaration</h2>\n<p>An action declaration has one of the following forms:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>min_delay<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>min_spacing<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>policy<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n    <span class=\"token lf_keywords\">physical</span> <span class=\"token lf_keywords\">action</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>min_delay<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>min_spacing<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>policy<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">min_delay</code>, <code class=\"language-text\">min_spacing</code>, and <code class=\"language-text\">policy</code> are all optional. If only one argument is given in parentheses, then it is interpreted as an <code class=\"language-text\">min_delay</code>, if two are given, then they are interpreted as <code class=\"language-text\">min_delay</code> and <code class=\"language-text\">min_spacing</code>. The <code class=\"language-text\">min_delay</code> and <code class=\"language-text\">min_spacing</code> are time values. The <code class=\"language-text\">policy</code> argument is a string that can be one of the following: <code class=\"language-text\">\"defer\"</code> (the default), <code class=\"language-text\">\"drop\"</code>, or <code class=\"language-text\">\"replace\"</code>. Note that the quotation marks are needed.</p>\n<div class=\"lf-c lf-cpp lf-ts lf-rs\">\n<p>If the action is to carry a payload, then a type must be given as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"lf\"><pre class=\"language-lf\"><code class=\"language-lf\">    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>min_delay<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>min_spacing<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>policy<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>type<span class=\"token operator\">></span>\n    <span class=\"token lf_keywords\">physical</span> <span class=\"token lf_keywords\">action</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>min_delay<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>min_spacing<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>policy<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token operator\">&lt;</span>type<span class=\"token operator\">></span></code></pre></div>\n</div>\n<h2 id=\"logical-actions\" style=\"position:relative;\"><a href=\"#logical-actions\" aria-label=\"logical actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Logical Actions</h2>\n<p>Timers are useful to trigger reactions once or periodically. Actions are used to trigger reactions more irregularly. An action, like an output or input port, can carry data, but unlike a port, an action is visible only within the reactor that defines it.</p>\n<p>There are two kinds of actions, <strong>logical</strong> and <strong>physical</strong>. A $logical$ $action$ is used by a reactor to schedule a trigger at a fixed logical time interval <em>d</em> into the future. The time interval <em>d</em>, which is called a <strong>delay</strong>, is relative to the logical time <em>t</em> at which the scheduling occurs. If a reaction executes at logical time <em>t</em> and schedules an action <code class=\"language-text\">a</code> with delay <em>d</em>, then any reaction that is triggered by <code class=\"language-text\">a</code> will be invoked at logical time <em>t</em> + <em>d</em>. For example, the following reaction schedules something (printing the current elapsed logical time) 200 msec after an input <code class=\"language-text\">x</code> arrives:</p>\n<p>$start(Schedule)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Schedule <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">lf_schedule</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">MSEC</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token class-name\">interval_t</span> elapsed_time <span class=\"token operator\">=</span> <span class=\"token function\">lf_time_logical_elapsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Action triggered at logical time %lld nsec after start.\\n\"</span><span class=\"token punctuation\">,</span> elapsed_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">reactor</span> Schedule <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">auto</span> elapsed_time <span class=\"token operator\">=</span> <span class=\"token function\">get_elapsed_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Action triggered at logical time \"</span> <span class=\"token operator\">&lt;&lt;</span> elapsed_time <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  nsec after start.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Schedule <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        a<span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">(</span>MSEC<span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        elapsed_time <span class=\"token operator\">=</span> lf<span class=\"token punctuation\">.</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">.</span>logical_elapsed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Action triggered at logical time </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>elapsed_time<span class=\"token punctuation\">}</span></span><span class=\"token string\"> nsec after start.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token lf_keywords\">target</span> TypeScript\n<span class=\"token lf_keywords\">reactor</span> Schedule <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token builtin\">number</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        actions<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>TimeValue<span class=\"token punctuation\">.</span><span class=\"token function\">nsecs</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Action triggered at logical time </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>util<span class=\"token punctuation\">.</span><span class=\"token function\">getElapsedLogicalTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> after start.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token lf_keywords\">target</span> <span class=\"token class-name\">Rust</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token class-name\">Schedule</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">logical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token lf_keywords\">after</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\n            Action triggered at logical time {} nsec after start.\"</span><span class=\"token punctuation\">,</span>\n            ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get_elapsed_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as_nanos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>$end(Schedule)$</p>\n<img alt=\"Lingua Franca diagram\" src=\"/5130028346aef2a24dae6996d8b51ea1/Schedule.svg\" width=\"200\">\n<p>Here, the delay is specified in the call to schedule within the target language code. Notice that in the diagram, a logical action is shown as a triangle with an <strong>L</strong>. Logical actions are always scheduled within a reaction of the reactor that declares the action.</p>\n<p>The time argument is required to be non-negative. If it is zero, then the action will be scheduled one <strong>microstep</strong> later. See <a href=\"/docs/handbook/superdense-time\">Superdense Time</a>.</p>\n<div class=\"lf-c\">\n<p>The arguments to the <code class=\"language-text\">lf_schedule()</code> function are the action named <code class=\"language-text\">a</code> and a time. The action <code class=\"language-text\">a</code> has to be declared as an effect of the reaction in order to reference it in the call to <code class=\"language-text\">lf_schedule()</code>. If you fail to declare it as an effect (after the <code class=\"language-text\">-></code> in the reaction signature), then you will get an error message.</p>\n<p>The time argument to the <code class=\"language-text\">lf_schedule()</code> function has data type <code class=\"language-text\">interval_t</code>, which, with the exception of some embedded platforms, is a C <code class=\"language-text\">int64_t</code>. A collection of convenience macros is provided like the <code class=\"language-text\">MSEC</code> macro above to specify time values in a more readable way. The provided macros are <code class=\"language-text\">NSEC</code>, <code class=\"language-text\">USEC</code> (for microseconds), <code class=\"language-text\">MSEC</code>, <code class=\"language-text\">SEC</code>, <code class=\"language-text\">MINUTE</code>, <code class=\"language-text\">HOUR</code>, <code class=\"language-text\">DAY</code>, and <code class=\"language-text\">WEEK</code>. You may also use the plural of any of these, e.g. <code class=\"language-text\">WEEKS(2)</code>.</p>\n<p>An action may have a data type, in which case, a variant of the <code class=\"language-text\">lf_schedule()</code> function can be used to specify a <strong>payload</strong>, a data value that is carried from where the <code class=\"language-text\">lf_schedule()</code> function is called to the reaction that is triggered by the action. See the <a href=\"/docs/handbook/target-language-details\">Target Language Details</a>.</p>\n</div>\n<div class=\"lf-cpp\">\n<p>An action may have a data type, in which case, a variant of the <code class=\"language-text\">schedule()</code> function can be used to specify a <strong>payload</strong>, a data value that is carried from where the <code class=\"language-text\">schedule()</code> function is called to the reaction that is triggered by the action. See the <a href=\"/docs/handbook/target-languate-details\">Target Language Details</a>.</p>\n</div>\n<div class=\"lf-py\">\n<p>The arguments to the <code class=\"language-text\">a.schedule()</code> method is a time. The action <code class=\"language-text\">a</code> has to be\ndeclared as an effect of the reaction in order to reference it in the body of\nthe reaction. If you fail to declare it as an effect (after the <code class=\"language-text\">-></code> in the\nreaction signature), then you will get a runtime error message.</p>\n<p>The time argument to the <code class=\"language-text\">a.schedule()</code> method expects an integer. A collection\nof convenience functions is provided like the <code class=\"language-text\">MSEC</code> function above to specify\ntime values in a more readable way. The provided functions are <code class=\"language-text\">NSEC</code>, <code class=\"language-text\">USEC</code>\n(for microseconds), <code class=\"language-text\">MSEC</code>, <code class=\"language-text\">SEC</code>, <code class=\"language-text\">MINUTE</code>, <code class=\"language-text\">HOUR</code>, <code class=\"language-text\">DAY</code>, and <code class=\"language-text\">WEEK</code>. You may\nalso use the plural of any of these, e.g. <code class=\"language-text\">WEEKS(2)</code>.</p>\n<p>An action may carry data, in which case, the <strong>payload</strong> data value is just given as a second argument to the <code class=\"language-text\">.schedule()</code> method. See the <a href=\"/docs/handbook/target-languate-details\">Target Language Details</a>.</p>\n</div>\n<div class=\"lf-ts\">\n<p>The <code class=\"language-text\">schedule()</code> method of an action takes two arguments, a <code class=\"language-text\">TimeValue</code> and an (optional) payload. If a payload is given and a type is given for the action, then the type of the payload must match the type of the action. See the <a href=\"/docs/handbook/target-languate-details\">Target Language Details</a> for details.</p>\n</div>\n<div class=\"lf-rs\">\n<p><span class=\"warning\">FIXME</span></p>\n<p>An action may have a data type, in which case, a variant of the <code class=\"language-text\">schedule()</code> function can be used to specify a <strong>payload</strong>, a data value that is carried from where the <code class=\"language-text\">schedule()</code> function is called to the reaction that is triggered by the action. See the <a href=\"/docs/handbook/target-languate-details\">Target Language Details</a>.</p>\n</div>\n<h2 id=\"physical-actions\" style=\"position:relative;\"><a href=\"#physical-actions\" aria-label=\"physical actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Physical Actions</h2>\n<p>A $physical$ $action$ is used to schedule reactions at logical times determined by the local physical clock. If a physical action with delay <em>d</em> is scheduled at <em>physical</em> time <em>T</em>, then the <em>logical time</em> assigned to the event is <em>T</em> + <em>d</em>. For example, the following reactor schedules the physical action <code class=\"language-text\">p</code> to trigger at a <strong>logical time</strong> equal to the <strong>physical time</strong> at which the input <code class=\"language-text\">x</code> arrives:</p>\n<p>$start(Physical)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Physical <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">physical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token function\">lf_schedule</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token class-name\">interval_t</span> elapsed_time <span class=\"token operator\">=</span> <span class=\"token function\">lf_time_logical_elapsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Action triggered at logical time %lld nsec after start.\\n\"</span><span class=\"token punctuation\">,</span> elapsed_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span>\n\n<span class=\"token lf_keywords\">reactor</span> Physical <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">physical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">auto</span> elapsed_time <span class=\"token operator\">=</span> <span class=\"token function\">get_elapsed_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Action triggered at logical time \"</span> <span class=\"token operator\">&lt;&lt;</span> elapsed_time <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" nsec after start.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> Physical <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">physical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        a<span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        elapsed_time <span class=\"token operator\">=</span> lf<span class=\"token punctuation\">.</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">.</span>logical_elapsed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Action triggered at logical time </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>elapsed_time<span class=\"token punctuation\">}</span></span><span class=\"token string\"> nsec after start.\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token lf_keywords\">target</span> TypeScript\n<span class=\"token lf_keywords\">reactor</span> Physical <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token operator\">:</span>int\n    <span class=\"token lf_keywords\">physical</span> <span class=\"token lf_keywords\">action</span> a\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        actions<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>TimeValue<span class=\"token punctuation\">.</span><span class=\"token function\">zero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Action triggered at logical time </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>util<span class=\"token punctuation\">.</span><span class=\"token function\">getElapsedLogicalTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> nsec after start.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token lf_keywords\">target</span> <span class=\"token class-name\">Rust</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">reactor</span> <span class=\"token class-name\">Physical</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">input</span> x<span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">physical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">let</span> phys_action <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">spawn_physical_thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>link<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            link<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>phys_action<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Asap</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n    <span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"Action triggered at logical time {} nsec after start.\"</span><span class=\"token punctuation\">,</span>\n            ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get_elapsed_logical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">as_nanos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>$end(Physical)$</p>\n<img alt=\"Lingua Franca diagram\" src=\"/c522350c03ba8eeee028b48f0ef456b1/Physical.svg\" width=\"200\">\n<p>If you drive this with a timer, using for example the following structure:</p>\n<img alt=\"Lingua Franca diagram\" src=\"/fd2b2f93418cb57a22fef591b635c9ed/PhysicalTest.svg\" width=\"400\">\n<p>then running the program will yield an output something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Action triggered at logical time 201491000 nsec after start.\nAction triggered at logical time 403685000 nsec after start.\nAction triggered at logical time 603669000 nsec after start.\n...</code></pre></div>\n<p>Here, logical time is lagging physical time by a few milliseconds. Note that, unless the <a href=\"/docs/handbook/target-declaration#fast\">fast option</a> is given, logical time <em>t</em> chases physical time <em>T</em>, so <em>t</em> &#x3C; <em>T</em>. Hence, the event being scheduled in the reaction to input <code class=\"language-text\">x</code> is assured of being in the future in logical time.</p>\n<p>Whereas logical actions are required to be scheduled within a reaction of the reactor that declares the action, physical actions can be scheduled by code that is outside the Lingua Franca system. For example, some other thread or a callback function may call <code class=\"language-text\">schedule()</code>, passing it a physical action. For example:</p>\n<p>$start(Asynchronous)$</p>\n<div class=\"gatsby-highlight\" data-language=\"lf-c\"><pre class=\"language-lf-c\"><code class=\"language-lf-c\"><span class=\"token lf_keywords\">target</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n\t\t<span class=\"token comment\">// Schedule an event roughly every 200 msec.</span>\n\t\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">external</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t\t\t<span class=\"token function\">lf_nanosleep</span><span class=\"token punctuation\">(</span><span class=\"token function\">MSEC</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t\t\t<span class=\"token function\">lf_schedule</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token lf_keywords\">state</span> thread_id<span class=\"token operator\">:</span><span class=\"token class-name\">lf_thread_t</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">physical</span> <span class=\"token lf_keywords\">action</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n\t\t<span class=\"token comment\">// Start a thread to schedule physical actions.</span>\n\t\t<span class=\"token function\">lf_thread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>self<span class=\"token operator\">-></span>thread_id<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>external<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token class-name\">interval_t</span> elapsed_time <span class=\"token operator\">=</span> <span class=\"token function\">lf_time_logical_elapsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Action triggered at logical time %lld nsec after start.\\n\"</span><span class=\"token punctuation\">,</span> elapsed_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-cpp\"><pre class=\"language-lf-cpp\"><code class=\"language-lf-cpp\"><span class=\"token lf_keywords\">target</span> Cpp<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token lf_keywords\">state</span> thread<span class=\"token operator\">:</span> std<span class=\"token double-colon punctuation\">::</span>thread<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">physical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token operator\">:</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n\t\t<span class=\"token comment\">// Start a thread to schedule physical actions.</span>\n        thread <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                std<span class=\"token double-colon punctuation\">::</span>this_thread<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sleep_for</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// the value that we give it really doesn't matter</span>\n                <span class=\"token comment\">// but we the action should is scheduled for 100ms into the future</span>\n    \t\t\ta<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">auto</span> elapsed_time <span class=\"token operator\">=</span> <span class=\"token function\">get_physical_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Action triggered at logical time\"</span> <span class=\"token operator\">&lt;&lt;</span> elapsed_time <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"nsec after start.\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-py\"><pre class=\"language-lf-py\"><code class=\"language-lf-py\"><span class=\"token lf_keywords\">target</span> Python<span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token lf_keywords\">preamble</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n\t\t<span class=\"token lf_keywords\">import</span> <span class=\"token lf_keywords\">time</span>\n\t\t<span class=\"token lf_keywords\">import</span> threading\n\t\t<span class=\"token comment\"># Schedule an event roughly every 200 msec.</span>\n\t\t<span class=\"token keyword\">def</span> <span class=\"token function\">external</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t\tself<span class=\"token punctuation\">.</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span>\n\t\t\t\ta<span class=\"token punctuation\">.</span>schedule<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token lf_keywords\">state</span> thread<span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">physical</span> <span class=\"token lf_keywords\">action</span> a<span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n\t\t<span class=\"token comment\"># Start a thread to schedule physical actions.</span>\n\t\tself<span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">target</span><span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>external<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tself<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        elapsed_time <span class=\"token operator\">=</span> lf<span class=\"token punctuation\">.</span><span class=\"token lf_keywords\">time</span><span class=\"token punctuation\">.</span>logical_elapsed<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Action triggered at logical time </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>elapsed_time<span class=\"token punctuation\">}</span></span><span class=\"token string\"> nsec after start.\"</span></span><span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-ts\"><pre class=\"language-lf-ts\"><code class=\"language-lf-ts\"><span class=\"token lf_keywords\">target</span> TypeScript\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token lf_keywords\">physical</span> <span class=\"token lf_keywords\">action</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n\t\t<span class=\"token comment\">// Have asynchronous callback schedule physical action.</span>\n\t\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            actions<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span>TimeValue<span class=\"token punctuation\">.</span><span class=\"token function\">zero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Action triggered at logical time </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>util<span class=\"token punctuation\">.</span><span class=\"token function\">getElapsedLogicalTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> nsec after start.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lf-rs\"><pre class=\"language-lf-rs\"><code class=\"language-lf-rs\"><span class=\"token lf_keywords\">target</span> <span class=\"token class-name\">Rust</span><span class=\"token punctuation\">;</span>\n<span class=\"token lf_keywords\">main</span> <span class=\"token lf_keywords\">reactor</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token lf_keywords\">state</span> start_time<span class=\"token punctuation\">:</span><span class=\"token class-name\">Instant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token operator\">=</span><span class=\"token class-name\">Instant</span><span class=\"token punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token lf_keywords\">physical</span> <span class=\"token lf_keywords\">action</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token lf_keywords\">msec</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">u32</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span><span class=\"token lf_keywords\">startup</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> a <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">let</span> phys_action <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// clone to move it into other thread</span>\n\t\t<span class=\"token comment\">// Start a thread to schedule physical actions.</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">spawn_physical_thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>link<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>thread<span class=\"token punctuation\">::</span></span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_millis</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                link<span class=\"token punctuation\">.</span><span class=\"token function\">schedule_physical</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>phys_action<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Asap</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token lf_keywords\">reaction</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">=</span>\n        <span class=\"token keyword\">let</span> elapsed_time <span class=\"token operator\">=</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>start_time<span class=\"token punctuation\">.</span><span class=\"token function\">elapsed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Action triggered at logical time {} nsecs after start.\"</span><span class=\"token punctuation\">,</span> elapsed_time<span class=\"token punctuation\">.</span><span class=\"token function\">as_nanos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">=</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>$end(Asynchronous)$</p>\n<img alt=\"Lingua Franca diagram\" src=\"/a2c95a35fe91c6f4c67a8317c4813319/Asynchronous.svg\" width=\"350\">\n<p>Physical actions are the mechanism for obtaining input from the outside world. Because they are assigned a logical time derived from the physical clock, their logical time can be interpreted as a measure of the time at which some external event occurred.</p>\n<div class=\"lf-c\">\n<p>In the above example, at $startup$, the main reactor creates an external thread that schedules a physical action roughly every 200 msec. The thread uses a built-in function <code class=\"language-text\">lf_nanosleep()</code>, which abstracts platform-specific mechanisms for stalling the thread for a specified amount of time. The thread is created with a built-in function <code class=\"language-text\">lf_thread_create()</code>, which similarly abstracts platform-specific mechanisms for creating threads.</p>\n<p>The code executed by the thread is defined in a $preamble$ section. See <a href=\"/docs/handbook/preambles-and-methods\">Preambles and Methods</a>.</p>\n<p><strong>Important Note:</strong> Asynchronous calls to <code class=\"language-text\">lf_schedule()</code> will not work if you set the <a href=\"/docs/handbook/target-declaration#threading\"><code class=\"language-text\">threading</code> target parameter</a> to <code class=\"language-text\">false</code>. You must use a threaded runtime for such asynchronous calls to work correctly.</p>\n</div>\n<h2 id=\"triggering-time-for-actions\" style=\"position:relative;\"><a href=\"#triggering-time-for-actions\" aria-label=\"triggering time for actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Triggering Time for Actions</h2>\n<p>An action will trigger at a logical time that depends on the arguments given to the schedule function, the <code class=\"language-text\">&lt;min_delay></code>, <code class=\"language-text\">&lt;min_spacing></code>, and <code class=\"language-text\">&lt;policy></code> arguments in the action declaration, and whether the action is physical or logical.</p>\n<p>For a $logical$ action <code class=\"language-text\">a</code>, the tag assigned to the event resulting from a call to <code class=\"language-text\">schedule()</code> is computed as follows. First, let <em>t</em> be the <em>current logical time</em>. For a logical action, <em>t</em> is just the logical time at which the reaction calling <code class=\"language-text\">schedule()</code> is called. The <strong>preliminary time</strong> of the action is then just <em>t</em> + <code class=\"language-text\">&lt;min_delay></code> + <code class=\"language-text\">&lt;offset></code>. This preliminary time may be further modified, as explained below.</p>\n<p>For a <strong>physical</strong> action, the preliminary time is similar, except that <em>t</em> is replaced by the current <em>physical</em> time <em>T</em> when <code class=\"language-text\">schedule()</code> is called.</p>\n<p>If a <code class=\"language-text\">&lt;min_spacing></code> has been declared, then it gives a minimum logical time\ninterval between the tags of two subsequently scheduled events. If the\npreliminary time is closer than <code class=\"language-text\">&lt;min_spacing></code> to the time of the previously\nscheduled event (if there is one), then <code class=\"language-text\">&lt;policy></code> (if supported by the target)\ndetermines how the minimum spacing constraint is enforced.</p>\n<div class=\"lf-c lf-py\">\n<p>The <code class=\"language-text\">&lt;policy></code> is one of the following:</p>\n<ul>\n<li><code class=\"language-text\">\"defer\"</code>: (<strong>the default</strong>) The event is added to the event queue with a tag that is equal to earliest time that satisfies the minimal spacing requirement. Assuming the time of the preceding event is <em>t_prev</em>, then the tag of the new event simply becomes <em>t_prev</em> + <code class=\"language-text\">&lt;min_spacing></code>.</li>\n<li><code class=\"language-text\">\"drop\"</code>: The new event is dropped and <code class=\"language-text\">schedule()</code> returns without having modified the event queue.</li>\n<li><code class=\"language-text\">\"replace\"</code>: The payload (if any) of the new event is assigned to the preceding event if it is still pending in the event queue; no new event is added to the event queue in this case. If the preceding event has already been pulled from the event queue, the default <code class=\"language-text\">\"defer\"</code> policy is applied.</li>\n</ul>\n<p>Note that while the <code class=\"language-text\">\"defer\"</code> policy is conservative in the sense that it does not discard events, it could potentially cause an unbounded growth of the event queue.</p>\n</div>\n<div class=\"lf-cpp lf-ts lf-rs\">\n<blockquote>\n<p>The <code class=\"language-text\">&lt;policy></code> argument is currently not supported.</p>\n</blockquote>\n</div>","headings":[{"value":"Action Declaration","depth":2},{"value":"Logical Actions","depth":2},{"value":"Physical Actions","depth":2},{"value":"Triggering Time for Actions","depth":2}],"frontmatter":{"permalink":"/docs/handbook/actions","title":"Actions","oneline":"Actions in Lingua Franca.","preamble":""}},"prev":{"childMarkdownRemark":{"frontmatter":{"title":"Extending Reactors","oneline":"Extending reactors in Lingua Franca.","permalink":"/docs/handbook/extending-reactors"}}},"next":{"childMarkdownRemark":{"frontmatter":{"title":"Superdense Time","oneline":"Superdense time in Lingua Franca.","permalink":"/docs/handbook/superdense-time"}}}},"pageContext":{"id":"1-actions","slug":"/docs/handbook/actions","repoPath":"/packages/documentation/copy/en/topics/Actions.md","previousID":"0330e7d8-a106-5833-b0c0-6e33d1965b87","nextID":"87fbdd2f-f348-5e23-8921-5fb303bcdd88","lang":"en","modifiedTime":"2022-04-29T16:25:03.068Z"}},
    "staticQueryHashes": []}